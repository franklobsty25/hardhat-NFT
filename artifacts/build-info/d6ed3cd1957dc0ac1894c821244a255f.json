{"id":"d6ed3cd1957dc0ac1894c821244a255f","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"base64-sol/base64.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"},"contracts/DynamicSVGNFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"base64-sol/base64.sol\";\n\ncontract DynamicSVGNFT is ERC721 {\n    // mint\n    // store our SVG information someehere\n    // some logic to say \"Show X image\" or \"Show Y image\"\n\n    uint256 private s_tokenCounter;\n    string private i_lowImageURI;\n    string private i_highImageURI;\n    string private constant base64EncodedSvgPrefix =\n        \"data:image/svg+xml;base64,\";\n    AggregatorV3Interface internal immutable i_priceFeed;\n    mapping(uint256 => int256) public s_tokenIdToHighValue;\n\n    event CreatedNFT(uint256 indexed tokenId, int256 highValue);\n\n    constructor(\n        address priceFeedAddress,\n        string memory lowSvg,\n        string memory highSvg\n    ) ERC721(\"Dynamic SVG NFT\", \"DSN\") {\n        s_tokenCounter = 0;\n        i_lowImageURI = svgToImageURI(lowSvg);\n        i_highImageURI = svgToImageURI(highSvg);\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function svgToImageURI(\n        string memory svg\n    ) public pure returns (string memory) {\n        string memory svgBase64Encoded = Base64.encode(\n            bytes(string(abi.encodePacked(svg)))\n        );\n        return\n            string(abi.encodePacked(base64EncodedSvgPrefix, svgBase64Encoded));\n    }\n\n    function mintNFT(int256 highValue) public {\n        s_tokenIdToHighValue[s_tokenCounter] = highValue;\n        s_tokenCounter += 1;\n        _safeMint(msg.sender, s_tokenCounter);\n        emit CreatedNFT(s_tokenCounter, highValue);\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"data:application/json;base64,\";\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        require(\n            _requireOwned(tokenId) == _ownerOf(tokenId),\n            \"URI Query for nonexistent token\"\n        );\n\n        (, int256 price, , , ) = i_priceFeed.latestRoundData();\n        string memory imageURI = i_lowImageURI;\n\n        if (price >= s_tokenIdToHighValue[tokenId]) {\n            imageURI = i_highImageURI;\n        }\n\n        // data:image/svg+xml;base64,\n\n        return\n            string(\n                abi.encodePacked(\n                    _baseURI(),\n                    Base64.encode(\n                        abi.encodePacked(\n                            ' {\"name\":\"',\n                            name(),\n                            '\", \"description\": \"An NFT that changes based on the Chainlink Feed\",',\n                            '\"attributes\": [{\"trait_type\": \"coolness\", \"value\": 100}], \"image\": \"',\n                            imageURI,\n                            '\"}'\n                        )\n                    )\n                )\n            );\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol","exportedSymbols":{"AggregatorV3Interface":[45]},"id":46,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AggregatorV3Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":45,"linearizedBaseContracts":[45],"name":"AggregatorV3Interface","nameLocation":"67:21:0","nodeType":"ContractDefinition","nodes":[{"functionSelector":"313ce567","id":6,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"102:8:0","nodeType":"FunctionDefinition","parameters":{"id":2,"nodeType":"ParameterList","parameters":[],"src":"110:2:0"},"returnParameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6,"src":"136:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3,"name":"uint8","nodeType":"ElementaryTypeName","src":"136:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"135:7:0"},"scope":45,"src":"93:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7284e416","id":11,"implemented":false,"kind":"function","modifiers":[],"name":"description","nameLocation":"156:11:0","nodeType":"FunctionDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[],"src":"167:2:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11,"src":"193:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8,"name":"string","nodeType":"ElementaryTypeName","src":"193:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"192:15:0"},"scope":45,"src":"147:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"54fd4d50","id":16,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"221:7:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"228:2:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":16,"src":"254:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13,"name":"uint256","nodeType":"ElementaryTypeName","src":"254:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"253:9:0"},"scope":45,"src":"212:51:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9a6fc8f5","id":31,"implemented":false,"kind":"function","modifiers":[],"name":"getRoundData","nameLocation":"276:12:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"_roundId","nameLocation":"301:8:0","nodeType":"VariableDeclaration","scope":31,"src":"294:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":17,"name":"uint80","nodeType":"ElementaryTypeName","src":"294:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"288:25:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"roundId","nameLocation":"344:7:0","nodeType":"VariableDeclaration","scope":31,"src":"337:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":20,"name":"uint80","nodeType":"ElementaryTypeName","src":"337:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"answer","nameLocation":"360:6:0","nodeType":"VariableDeclaration","scope":31,"src":"353:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":22,"name":"int256","nodeType":"ElementaryTypeName","src":"353:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"startedAt","nameLocation":"376:9:0","nodeType":"VariableDeclaration","scope":31,"src":"368:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":24,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"updatedAt","nameLocation":"395:9:0","nodeType":"VariableDeclaration","scope":31,"src":"387:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"387:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":29,"mutability":"mutable","name":"answeredInRound","nameLocation":"413:15:0","nodeType":"VariableDeclaration","scope":31,"src":"406:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":28,"name":"uint80","nodeType":"ElementaryTypeName","src":"406:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"336:93:0"},"scope":45,"src":"267:163:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"feaf968c","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"latestRoundData","nameLocation":"443:15:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[],"src":"458:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"roundId","nameLocation":"503:7:0","nodeType":"VariableDeclaration","scope":44,"src":"496:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":33,"name":"uint80","nodeType":"ElementaryTypeName","src":"496:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"answer","nameLocation":"519:6:0","nodeType":"VariableDeclaration","scope":44,"src":"512:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":35,"name":"int256","nodeType":"ElementaryTypeName","src":"512:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"startedAt","nameLocation":"535:9:0","nodeType":"VariableDeclaration","scope":44,"src":"527:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"527:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":40,"mutability":"mutable","name":"updatedAt","nameLocation":"554:9:0","nodeType":"VariableDeclaration","scope":44,"src":"546:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":39,"name":"uint256","nodeType":"ElementaryTypeName","src":"546:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"answeredInRound","nameLocation":"572:15:0","nodeType":"VariableDeclaration","scope":44,"src":"565:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":41,"name":"uint80","nodeType":"ElementaryTypeName","src":"565:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"495:93:0"},"scope":45,"src":"434:155:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":46,"src":"57:534:0","usedErrors":[],"usedEvents":[]}],"src":"32:560:0"},"id":0},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[182],"IERC20Errors":[87],"IERC721Errors":[135]},"id":183,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":47,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":48,"nodeType":"StructuredDocumentation","src":"138:139:1","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":87,"linearizedBaseContracts":[87],"name":"IERC20Errors","nameLocation":"288:12:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"307:309:1","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":57,"name":"ERC20InsufficientBalance","nameLocation":"627:24:1","nodeType":"ErrorDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"sender","nameLocation":"660:6:1","nodeType":"VariableDeclaration","scope":57,"src":"652:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"balance","nameLocation":"676:7:1","nodeType":"VariableDeclaration","scope":57,"src":"668:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":55,"mutability":"mutable","name":"needed","nameLocation":"693:6:1","nodeType":"VariableDeclaration","scope":57,"src":"685:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:1"},"src":"621:80:1"},{"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"707:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":62,"name":"ERC20InvalidSender","nameLocation":"870:18:1","nodeType":"ErrorDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"sender","nameLocation":"897:6:1","nodeType":"VariableDeclaration","scope":62,"src":"889:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:1"},"src":"864:41:1"},{"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"911:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":67,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:1","nodeType":"ErrorDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:1","nodeType":"VariableDeclaration","scope":67,"src":"1102:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:1"},"src":"1075:45:1"},{"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1126:345:1","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":76,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:1","nodeType":"ErrorDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"spender","nameLocation":"1517:7:1","nodeType":"VariableDeclaration","scope":76,"src":"1509:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:1","nodeType":"VariableDeclaration","scope":76,"src":"1526:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"needed","nameLocation":"1553:6:1","nodeType":"VariableDeclaration","scope":76,"src":"1545:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":73,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:1"},"src":"1476:85:1"},{"documentation":{"id":77,"nodeType":"StructuredDocumentation","src":"1567:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":81,"name":"ERC20InvalidApprover","nameLocation":"1752:20:1","nodeType":"ErrorDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"approver","nameLocation":"1781:8:1","nodeType":"VariableDeclaration","scope":81,"src":"1773:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:1"},"src":"1746:45:1"},{"documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"1797:195:1","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":86,"name":"ERC20InvalidSpender","nameLocation":"2003:19:1","nodeType":"ErrorDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"spender","nameLocation":"2031:7:1","nodeType":"VariableDeclaration","scope":86,"src":"2023:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:1"},"src":"1997:43:1"}],"scope":183,"src":"278:1764:1","usedErrors":[57,62,67,76,81,86],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":88,"nodeType":"StructuredDocumentation","src":"2044:141:1","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":135,"linearizedBaseContracts":[135],"name":"IERC721Errors","nameLocation":"2196:13:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":89,"nodeType":"StructuredDocumentation","src":"2216:219:1","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":93,"name":"ERC721InvalidOwner","nameLocation":"2446:18:1","nodeType":"ErrorDefinition","parameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"owner","nameLocation":"2473:5:1","nodeType":"VariableDeclaration","scope":93,"src":"2465:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":90,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:1"},"src":"2440:40:1"},{"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"2486:132:1","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":98,"name":"ERC721NonexistentToken","nameLocation":"2629:22:1","nodeType":"ErrorDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:1","nodeType":"VariableDeclaration","scope":98,"src":"2652:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":95,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:1"},"src":"2623:46:1"},{"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2675:289:1","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":107,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:1","nodeType":"ErrorDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"sender","nameLocation":"3004:6:1","nodeType":"VariableDeclaration","scope":107,"src":"2996:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:1","nodeType":"VariableDeclaration","scope":107,"src":"3012:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"owner","nameLocation":"3037:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3029:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":104,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:1"},"src":"2969:75:1"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3050:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":112,"name":"ERC721InvalidSender","nameLocation":"3213:19:1","nodeType":"ErrorDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"sender","nameLocation":"3241:6:1","nodeType":"VariableDeclaration","scope":112,"src":"3233:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":109,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:1"},"src":"3207:42:1"},{"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"3255:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":117,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:1","nodeType":"ErrorDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:1","nodeType":"VariableDeclaration","scope":117,"src":"3447:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:1"},"src":"3419:46:1"},{"documentation":{"id":118,"nodeType":"StructuredDocumentation","src":"3471:247:1","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":124,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:1","nodeType":"ErrorDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"operator","nameLocation":"3764:8:1","nodeType":"VariableDeclaration","scope":124,"src":"3756:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:1","nodeType":"VariableDeclaration","scope":124,"src":"3774:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:1"},"src":"3723:68:1"},{"documentation":{"id":125,"nodeType":"StructuredDocumentation","src":"3797:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":129,"name":"ERC721InvalidApprover","nameLocation":"3982:21:1","nodeType":"ErrorDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"approver","nameLocation":"4012:8:1","nodeType":"VariableDeclaration","scope":129,"src":"4004:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:1"},"src":"3976:46:1"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"4028:197:1","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":134,"name":"ERC721InvalidOperator","nameLocation":"4236:21:1","nodeType":"ErrorDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"operator","nameLocation":"4266:8:1","nodeType":"VariableDeclaration","scope":134,"src":"4258:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:1"},"src":"4230:46:1"}],"scope":183,"src":"2186:2092:1","usedErrors":[93,98,107,112,117,124,129,134],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"4280:143:1","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":182,"linearizedBaseContracts":[182],"name":"IERC1155Errors","nameLocation":"4434:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"4455:361:1","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":147,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:1","nodeType":"ErrorDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"sender","nameLocation":"4862:6:1","nodeType":"VariableDeclaration","scope":147,"src":"4854:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":141,"mutability":"mutable","name":"balance","nameLocation":"4878:7:1","nodeType":"VariableDeclaration","scope":147,"src":"4870:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":143,"mutability":"mutable","name":"needed","nameLocation":"4895:6:1","nodeType":"VariableDeclaration","scope":147,"src":"4887:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:1","nodeType":"VariableDeclaration","scope":147,"src":"4903:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":144,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:1"},"src":"4821:99:1"},{"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"4926:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":152,"name":"ERC1155InvalidSender","nameLocation":"5089:20:1","nodeType":"ErrorDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"sender","nameLocation":"5118:6:1","nodeType":"VariableDeclaration","scope":152,"src":"5110:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":149,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:1"},"src":"5083:43:1"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"5132:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":157,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:1","nodeType":"ErrorDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:1","nodeType":"VariableDeclaration","scope":157,"src":"5325:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:1"},"src":"5296:47:1"},{"documentation":{"id":158,"nodeType":"StructuredDocumentation","src":"5349:256:1","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":164,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:1","nodeType":"ErrorDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"operator","nameLocation":"5653:8:1","nodeType":"VariableDeclaration","scope":164,"src":"5645:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":159,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"owner","nameLocation":"5671:5:1","nodeType":"VariableDeclaration","scope":164,"src":"5663:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:1"},"src":"5610:68:1"},{"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"5684:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":169,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:1","nodeType":"ErrorDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"approver","nameLocation":"5900:8:1","nodeType":"VariableDeclaration","scope":169,"src":"5892:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:1"},"src":"5863:47:1"},{"documentation":{"id":170,"nodeType":"StructuredDocumentation","src":"5916:197:1","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":174,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:1","nodeType":"ErrorDefinition","parameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"operator","nameLocation":"6155:8:1","nodeType":"VariableDeclaration","scope":174,"src":"6147:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":171,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:1"},"src":"6118:47:1"},{"documentation":{"id":175,"nodeType":"StructuredDocumentation","src":"6171:280:1","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":181,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:1","nodeType":"ErrorDefinition","parameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:1","nodeType":"VariableDeclaration","scope":181,"src":"6488:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":176,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":179,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:1","nodeType":"VariableDeclaration","scope":181,"src":"6507:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":178,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:1"},"src":"6456:73:1"}],"scope":183,"src":"4424:2107:1","usedErrors":[147,152,157,164,169,174,181],"usedEvents":[]}],"src":"112:6420:1"},"id":1},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[1376],"ERC165":[1655],"ERC721":[1191],"IERC165":[1667],"IERC721":[1308],"IERC721Errors":[135],"IERC721Metadata":[1354],"IERC721Receiver":[1326],"Strings":[1631]},"id":1192,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":184,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":186,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":1309,"src":"133:38:2","symbolAliases":[{"foreign":{"id":185,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"141:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":188,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":1327,"src":"172:54:2","symbolAliases":[{"foreign":{"id":187,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"180:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":1355,"src":"227:65:2","symbolAliases":[{"foreign":{"id":189,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"235:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":1377,"src":"293:48:2","symbolAliases":[{"foreign":{"id":191,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"301:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":1632,"src":"342:48:2","symbolAliases":[{"foreign":{"id":193,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"350:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":197,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":1656,"src":"391:69:2","symbolAliases":[{"foreign":{"id":195,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"399:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":196,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"408:6:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":199,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1192,"sourceUnit":183,"src":"461:66:2","symbolAliases":[{"foreign":{"id":198,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":135,"src":"469:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":201,"name":"Context","nameLocations":["804:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1376,"src":"804:7:2"},"id":202,"nodeType":"InheritanceSpecifier","src":"804:7:2"},{"baseName":{"id":203,"name":"ERC165","nameLocations":["813:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":1655,"src":"813:6:2"},"id":204,"nodeType":"InheritanceSpecifier","src":"813:6:2"},{"baseName":{"id":205,"name":"IERC721","nameLocations":["821:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1308,"src":"821:7:2"},"id":206,"nodeType":"InheritanceSpecifier","src":"821:7:2"},{"baseName":{"id":207,"name":"IERC721Metadata","nameLocations":["830:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"830:15:2"},"id":208,"nodeType":"InheritanceSpecifier","src":"830:15:2"},{"baseName":{"id":209,"name":"IERC721Errors","nameLocations":["847:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":135,"src":"847:13:2"},"id":210,"nodeType":"InheritanceSpecifier","src":"847:13:2"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"529:246:2","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1191,"linearizedBaseContracts":[1191,135,1354,1308,1655,1667,1376],"name":"ERC721","nameLocation":"794:6:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":213,"libraryName":{"id":211,"name":"Strings","nameLocations":["873:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1631,"src":"873:7:2"},"nodeType":"UsingForDirective","src":"867:26:2","typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":215,"mutability":"mutable","name":"_name","nameLocation":"932:5:2","nodeType":"VariableDeclaration","scope":1191,"src":"917:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":214,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":217,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:2","nodeType":"VariableDeclaration","scope":1191,"src":"964:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":216,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":221,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:2","nodeType":"VariableDeclaration","scope":1191,"src":"993:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":220,"keyName":"tokenId","keyNameLocation":"1009:7:2","keyType":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":225,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:2","nodeType":"VariableDeclaration","scope":1191,"src":"1051:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":224,"keyName":"owner","keyNameLocation":"1067:5:2","keyType":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":229,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:2","nodeType":"VariableDeclaration","scope":1191,"src":"1109:59:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":228,"keyName":"tokenId","keyNameLocation":"1125:7:2","keyType":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":227,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":235,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:2","nodeType":"VariableDeclaration","scope":1191,"src":"1175:86:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":234,"keyName":"owner","keyNameLocation":"1191:5:2","keyType":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":233,"keyName":"operator","keyNameLocation":"1216:8:2","keyType":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":232,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":251,"nodeType":"Block","src":"1437:57:2","statements":[{"expression":{"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":243,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1447:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":244,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"1455:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":246,"nodeType":"ExpressionStatement","src":"1447:13:2"},{"expression":{"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":247,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"1470:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":248,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"1480:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":250,"nodeType":"ExpressionStatement","src":"1470:17:2"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"1268:108:2","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":252,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"name_","nameLocation":"1407:5:2","nodeType":"VariableDeclaration","scope":252,"src":"1393:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":237,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:2","nodeType":"VariableDeclaration","scope":252,"src":"1414:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":239,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:2"},"returnParameters":{"id":242,"nodeType":"ParameterList","parameters":[],"src":"1437:0:2"},"scope":1191,"src":"1381:113:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1654,1666],"body":{"id":282,"nodeType":"Block","src":"1669:192:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":263,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1698:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":265,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1718:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1308_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1308_$","typeString":"type(contract IERC721)"}],"id":264,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1713:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1308","typeString":"type(contract IERC721)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":269,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1754:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":271,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"1774:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1354_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1354_$","typeString":"type(contract IERC721Metadata)"}],"id":270,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1354","typeString":"type(contract IERC721Metadata)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":278,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1842:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":276,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1818:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1191_$","typeString":"type(contract super ERC721)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:2","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1654,"src":"1818:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":262,"id":281,"nodeType":"Return","src":"1679:175:2"}]},"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"1500:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":283,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:2","nodeType":"FunctionDefinition","overrides":{"id":259,"nodeType":"OverrideSpecifier","overrides":[{"id":257,"name":"ERC165","nameLocations":["1637:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":1655,"src":"1637:6:2"},{"id":258,"name":"IERC165","nameLocations":["1645:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1667,"src":"1645:7:2"}],"src":"1628:25:2"},"parameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:2","nodeType":"VariableDeclaration","scope":283,"src":"1588:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":254,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:2"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":283,"src":"1663:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":260,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:2"},"scope":1191,"src":"1561:300:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1233],"body":{"id":310,"nodeType":"Block","src":"1992:136:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":291,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2006:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:2","typeDescriptions":{}}},"id":295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":305,"nodeType":"IfStatement","src":"2002:87:2","trueBody":{"id":304,"nodeType":"Block","src":"2027:62:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":298,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:2","typeDescriptions":{}}},"id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":297,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"2048:18:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":303,"nodeType":"RevertStatement","src":"2041:37:2"}]}},{"expression":{"baseExpression":{"id":306,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"2105:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":308,"indexExpression":{"id":307,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2115:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":290,"id":309,"nodeType":"Return","src":"2098:23:2"}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"1867:48:2","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":311,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:2","nodeType":"FunctionDefinition","parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"owner","nameLocation":"1947:5:2","nodeType":"VariableDeclaration","scope":311,"src":"1939:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":285,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:2"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":311,"src":"1983:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:2"},"scope":1191,"src":"1920:208:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1241],"body":{"id":323,"nodeType":"Block","src":"2257:46:2","statements":[{"expression":{"arguments":[{"id":320,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2288:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":319,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2274:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":318,"id":322,"nodeType":"Return","src":"2267:29:2"}]},"documentation":{"id":312,"nodeType":"StructuredDocumentation","src":"2134:46:2","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":324,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:2","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:2","nodeType":"VariableDeclaration","scope":324,"src":"2202:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:2"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":324,"src":"2248:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:2"},"scope":1191,"src":"2185:118:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1339],"body":{"id":332,"nodeType":"Block","src":"2425:29:2","statements":[{"expression":{"id":330,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2442:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":329,"id":331,"nodeType":"Return","src":"2435:12:2"}]},"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"2309:51:2","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":333,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:2","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"2378:2:2"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":333,"src":"2410:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":327,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:2"},"scope":1191,"src":"2365:89:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1345],"body":{"id":341,"nodeType":"Block","src":"2580:31:2","statements":[{"expression":{"id":339,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2597:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":338,"id":340,"nodeType":"Return","src":"2590:14:2"}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"2460:53:2","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":342,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:2","nodeType":"FunctionDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"2533:2:2"},"returnParameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":342,"src":"2565:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":336,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:2"},"scope":1191,"src":"2518:93:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1353],"body":{"id":377,"nodeType":"Block","src":"2756:176:2","statements":[{"expression":{"arguments":[{"id":351,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"2780:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":350,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2766:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":353,"nodeType":"ExpressionStatement","src":"2766:22:2"},{"assignments":[355],"declarations":[{"constant":false,"id":355,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:2","nodeType":"VariableDeclaration","scope":377,"src":"2799:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":354,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":358,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":356,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"2823:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:2"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":361,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2856:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":359,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:2","typeDescriptions":{}}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:2","memberName":"length","nodeType":"MemberAccess","src":"2850:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:2","trueExpression":{"arguments":[{"id":369,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2892:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":370,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"2901:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:2","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1444,"src":"2901:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":366,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:2","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:2","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:2","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":349,"id":376,"nodeType":"Return","src":"2843:82:2"}]},"documentation":{"id":343,"nodeType":"StructuredDocumentation","src":"2617:55:2","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":378,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:2","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":345,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:2","nodeType":"VariableDeclaration","scope":378,"src":"2695:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:2"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":378,"src":"2741:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":347,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:2"},"scope":1191,"src":"2677:255:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":386,"nodeType":"Block","src":"3240:26:2","statements":[{"expression":{"hexValue":"","id":384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":383,"id":385,"nodeType":"Return","src":"3250:9:2"}]},"documentation":{"id":379,"nodeType":"StructuredDocumentation","src":"2938:231:2","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":387,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:2","nodeType":"FunctionDefinition","parameters":{"id":380,"nodeType":"ParameterList","parameters":[],"src":"3191:2:2"},"returnParameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":387,"src":"3225:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":381,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:2"},"scope":1191,"src":"3174:92:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1281],"body":{"id":402,"nodeType":"Block","src":"3384:52:2","statements":[{"expression":{"arguments":[{"id":396,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3403:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":397,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"3407:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":398,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3416:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":395,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[994,1060],"referencedDeclaration":994,"src":"3394:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":401,"nodeType":"ExpressionStatement","src":"3394:35:2"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"3272:46:2","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":403,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:2","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"to","nameLocation":"3348:2:2","nodeType":"VariableDeclaration","scope":403,"src":"3340:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:2","nodeType":"VariableDeclaration","scope":403,"src":"3352:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":391,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:2"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[],"src":"3384:0:2"},"scope":1191,"src":"3323:113:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1297],"body":{"id":419,"nodeType":"Block","src":"3573:78:2","statements":[{"expression":{"arguments":[{"id":412,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"3597:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":411,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"3583:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":414,"nodeType":"ExpressionStatement","src":"3583:22:2"},{"expression":{"arguments":[{"id":416,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"3636:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":415,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"3623:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":410,"id":418,"nodeType":"Return","src":"3616:28:2"}]},"documentation":{"id":404,"nodeType":"StructuredDocumentation","src":"3442:50:2","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":420,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:2","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:2","nodeType":"VariableDeclaration","scope":420,"src":"3518:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:2"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":420,"src":"3564:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:2"},"scope":1191,"src":"3497:154:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1289],"body":{"id":435,"nodeType":"Block","src":"3793:69:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":429,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3822:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":431,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"3836:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":432,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"3846:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":428,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"3803:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":434,"nodeType":"ExpressionStatement","src":"3803:52:2"}]},"documentation":{"id":421,"nodeType":"StructuredDocumentation","src":"3657:56:2","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":436,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:2","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"operator","nameLocation":"3753:8:2","nodeType":"VariableDeclaration","scope":436,"src":"3745:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":425,"mutability":"mutable","name":"approved","nameLocation":"3768:8:2","nodeType":"VariableDeclaration","scope":436,"src":"3763:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":424,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:2"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[],"src":"3793:0:2"},"scope":1191,"src":"3718:144:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1307],"body":{"id":452,"nodeType":"Block","src":"4022:59:2","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":446,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"4039:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":448,"indexExpression":{"id":447,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"4058:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":450,"indexExpression":{"id":449,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"4065:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":445,"id":451,"nodeType":"Return","src":"4032:42:2"}]},"documentation":{"id":437,"nodeType":"StructuredDocumentation","src":"3868:55:2","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":453,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:2","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"owner","nameLocation":"3962:5:2","nodeType":"VariableDeclaration","scope":453,"src":"3954:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":438,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"operator","nameLocation":"3977:8:2","nodeType":"VariableDeclaration","scope":453,"src":"3969:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:2"},"returnParameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":453,"src":"4016:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":443,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:2"},"scope":1191,"src":"3928:153:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1273],"body":{"id":498,"nodeType":"Block","src":"4223:498:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":463,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4237:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":464,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:2","typeDescriptions":{}}},"id":467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":477,"nodeType":"IfStatement","src":"4233:87:2","trueBody":{"id":476,"nodeType":"Block","src":"4255:65:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:2","typeDescriptions":{}}},"id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":469,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"4276:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":475,"nodeType":"RevertStatement","src":"4269:40:2"}]}},{"assignments":[479],"declarations":[{"constant":false,"id":479,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:2","nodeType":"VariableDeclaration","scope":498,"src":"4538:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":486,"initialValue":{"arguments":[{"id":481,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4570:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":482,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"4574:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"4583:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":480,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"4562:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"4610:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":488,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"4627:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":497,"nodeType":"IfStatement","src":"4606:109:2","trueBody":{"id":496,"nodeType":"Block","src":"4633:82:2","statements":[{"errorCall":{"arguments":[{"id":491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"4675:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":492,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"4681:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":493,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"4690:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":490,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"4654:20:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":495,"nodeType":"RevertStatement","src":"4647:57:2"}]}}]},"documentation":{"id":454,"nodeType":"StructuredDocumentation","src":"4087:51:2","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":499,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:2","nodeType":"FunctionDefinition","parameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"from","nameLocation":"4173:4:2","nodeType":"VariableDeclaration","scope":499,"src":"4165:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":455,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":458,"mutability":"mutable","name":"to","nameLocation":"4187:2:2","nodeType":"VariableDeclaration","scope":499,"src":"4179:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":457,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:2","nodeType":"VariableDeclaration","scope":499,"src":"4191:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":459,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:2"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"4223:0:2"},"scope":1191,"src":"4143:578:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1263],"body":{"id":516,"nodeType":"Block","src":"4863:56:2","statements":[{"expression":{"arguments":[{"id":510,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"4890:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":511,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"4896:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"4900:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":509,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[517,543],"referencedDeclaration":543,"src":"4873:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"ExpressionStatement","src":"4873:39:2"}]},"documentation":{"id":500,"nodeType":"StructuredDocumentation","src":"4727:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":517,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:2","nodeType":"FunctionDefinition","parameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"from","nameLocation":"4821:4:2","nodeType":"VariableDeclaration","scope":517,"src":"4813:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":501,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"to","nameLocation":"4835:2:2","nodeType":"VariableDeclaration","scope":517,"src":"4827:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":503,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:2","nodeType":"VariableDeclaration","scope":517,"src":"4839:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:2"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[],"src":"4863:0:2"},"scope":1191,"src":"4787:132:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1253],"body":{"id":542,"nodeType":"Block","src":"5088:105:2","statements":[{"expression":{"arguments":[{"id":530,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"5111:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":531,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"5117:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":532,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"5121:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":529,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"5098:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"ExpressionStatement","src":"5098:31:2"},{"expression":{"arguments":[{"id":536,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"5162:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":537,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"5168:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":538,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"5172:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":539,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"5181:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":535,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"5139:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":541,"nodeType":"ExpressionStatement","src":"5139:47:2"}]},"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"4925:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":543,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:2","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"mutability":"mutable","name":"from","nameLocation":"5019:4:2","nodeType":"VariableDeclaration","scope":543,"src":"5011:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"to","nameLocation":"5033:2:2","nodeType":"VariableDeclaration","scope":543,"src":"5025:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:2","nodeType":"VariableDeclaration","scope":543,"src":"5037:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"data","nameLocation":"5067:4:2","nodeType":"VariableDeclaration","scope":543,"src":"5054:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":525,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:2"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"5088:0:2"},"scope":1191,"src":"4985:208:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":555,"nodeType":"Block","src":"5782:40:2","statements":[{"expression":{"baseExpression":{"id":551,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5799:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":553,"indexExpression":{"id":552,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"5807:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":550,"id":554,"nodeType":"Return","src":"5792:23:2"}]},"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"5199:503:2","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":556,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:2","nodeType":"FunctionDefinition","parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:2","nodeType":"VariableDeclaration","scope":556,"src":"5725:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":545,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:2"},"returnParameters":{"id":550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":556,"src":"5773:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":548,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:2"},"scope":1191,"src":"5707:115:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":568,"nodeType":"Block","src":"6017:48:2","statements":[{"expression":{"baseExpression":{"id":564,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6034:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":566,"indexExpression":{"id":565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"6050:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":563,"id":567,"nodeType":"Return","src":"6027:31:2"}]},"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"5828:105:2","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":569,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:2","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:2","nodeType":"VariableDeclaration","scope":569,"src":"5960:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:2"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":569,"src":"6008:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:2"},"scope":1191,"src":"5938:127:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":604,"nodeType":"Block","src":"6485:163:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":581,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"6514:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":582,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:2","typeDescriptions":{}}},"id":585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":587,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"6552:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":588,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"6561:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"6589:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":592,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"6596:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":590,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"6572:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":596,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"6621:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":595,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"6608:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":598,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"6633:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":601,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":580,"id":603,"nodeType":"Return","src":"6495:146:2"}]},"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"6071:300:2","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":605,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:2","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"owner","nameLocation":"6407:5:2","nodeType":"VariableDeclaration","scope":605,"src":"6399:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":571,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"spender","nameLocation":"6422:7:2","nodeType":"VariableDeclaration","scope":605,"src":"6414:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:2","nodeType":"VariableDeclaration","scope":605,"src":"6431:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:2"},"returnParameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":605,"src":"6479:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":578,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:2"},"scope":1191,"src":"6376:272:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":641,"nodeType":"Block","src":"7179:271:2","statements":[{"condition":{"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:2","subExpression":{"arguments":[{"id":616,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"7208:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":617,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"7215:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":618,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"7224:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":615,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"7194:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":640,"nodeType":"IfStatement","src":"7189:255:2","trueBody":{"id":639,"nodeType":"Block","src":"7234:210:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":621,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"7252:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:2","typeDescriptions":{}}},"id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":637,"nodeType":"Block","src":"7350:84:2","statements":[{"errorCall":{"arguments":[{"id":633,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"7402:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"7411:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":632,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"7375:26:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":636,"nodeType":"RevertStatement","src":"7368:51:2"}]},"id":638,"nodeType":"IfStatement","src":"7248:186:2","trueBody":{"id":631,"nodeType":"Block","src":"7273:71:2","statements":[{"errorCall":{"arguments":[{"id":628,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"7321:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":627,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"7298:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":630,"nodeType":"RevertStatement","src":"7291:38:2"}]}}]}}]},"documentation":{"id":606,"nodeType":"StructuredDocumentation","src":"6654:423:2","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":642,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:2","nodeType":"FunctionDefinition","parameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":608,"mutability":"mutable","name":"owner","nameLocation":"7116:5:2","nodeType":"VariableDeclaration","scope":642,"src":"7108:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"spender","nameLocation":"7131:7:2","nodeType":"VariableDeclaration","scope":642,"src":"7123:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:2","nodeType":"VariableDeclaration","scope":642,"src":"7140:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:2"},"returnParameters":{"id":614,"nodeType":"ParameterList","parameters":[],"src":"7179:0:2"},"scope":1191,"src":"7082:368:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":657,"nodeType":"Block","src":"8167:78:2","statements":[{"id":656,"nodeType":"UncheckedBlock","src":"8177:62:2","statements":[{"expression":{"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":650,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"8201:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":652,"indexExpression":{"id":651,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"8211:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"8223:5:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":655,"nodeType":"ExpressionStatement","src":"8201:27:2"}]}]},"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"7456:631:2","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:2","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"account","nameLocation":"8126:7:2","nodeType":"VariableDeclaration","scope":658,"src":"8118:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"value","nameLocation":"8143:5:2","nodeType":"VariableDeclaration","scope":658,"src":"8135:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":646,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:2"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"8167:0:2"},"scope":1191,"src":"8092:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":747,"nodeType":"Block","src":"8933:700:2","statements":[{"assignments":[671],"declarations":[{"constant":false,"id":671,"mutability":"mutable","name":"from","nameLocation":"8951:4:2","nodeType":"VariableDeclaration","scope":747,"src":"8943:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":670,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":675,"initialValue":{"arguments":[{"id":673,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"8967:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":672,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"8958:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":676,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"9035:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":677,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:2","typeDescriptions":{}}},"id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":689,"nodeType":"IfStatement","src":"9031:86:2","trueBody":{"id":688,"nodeType":"Block","src":"9055:62:2","statements":[{"expression":{"arguments":[{"id":683,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"9086:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":684,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"9092:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":685,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"9098:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":682,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"9069:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":687,"nodeType":"ExpressionStatement","src":"9069:37:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":690,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"9161:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:2","typeDescriptions":{}}},"id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":717,"nodeType":"IfStatement","src":"9157:256:2","trueBody":{"id":716,"nodeType":"Block","src":"9181:232:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:2","typeDescriptions":{}}},"id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":701,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"9298:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":702,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:2","typeDescriptions":{}}},"id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":696,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[994,1060],"referencedDeclaration":1060,"src":"9277:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":708,"nodeType":"ExpressionStatement","src":"9277:48:2"},{"id":715,"nodeType":"UncheckedBlock","src":"9340:63:2","statements":[{"expression":{"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":709,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"9368:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":711,"indexExpression":{"id":710,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"9378:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":714,"nodeType":"ExpressionStatement","src":"9368:20:2"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":718,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"9427:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:2","typeDescriptions":{}}},"id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":732,"nodeType":"IfStatement","src":"9423:107:2","trueBody":{"id":731,"nodeType":"Block","src":"9445:85:2","statements":[{"id":730,"nodeType":"UncheckedBlock","src":"9459:61:2","statements":[{"expression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":724,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"9487:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":726,"indexExpression":{"id":725,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"9497:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":729,"nodeType":"ExpressionStatement","src":"9487:18:2"}]}]}},{"expression":{"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":733,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"9540:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":735,"indexExpression":{"id":734,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"9548:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":736,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"9559:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":738,"nodeType":"ExpressionStatement","src":"9540:21:2"},{"eventCall":{"arguments":[{"id":740,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"9586:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":741,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"9592:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":742,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"9596:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":739,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"9577:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":744,"nodeType":"EmitStatement","src":"9572:32:2"},{"expression":{"id":745,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"9622:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":669,"id":746,"nodeType":"Return","src":"9615:11:2"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"8251:582:2","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":748,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:2","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"to","nameLocation":"8863:2:2","nodeType":"VariableDeclaration","scope":748,"src":"8855:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":663,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:2","nodeType":"VariableDeclaration","scope":748,"src":"8867:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":662,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"auth","nameLocation":"8892:4:2","nodeType":"VariableDeclaration","scope":748,"src":"8884:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:2"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":748,"src":"8924:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":667,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:2"},"scope":1191,"src":"8838:795:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":797,"nodeType":"Block","src":"10008:274:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":756,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"10022:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:2","typeDescriptions":{}}},"id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":770,"nodeType":"IfStatement","src":"10018:87:2","trueBody":{"id":769,"nodeType":"Block","src":"10040:65:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:2","typeDescriptions":{}}},"id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":762,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"10061:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"RevertStatement","src":"10054:40:2"}]}},{"assignments":[772],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:2","nodeType":"VariableDeclaration","scope":797,"src":"10114:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":781,"initialValue":{"arguments":[{"id":774,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"10146:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"10150:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:2","typeDescriptions":{}}},"id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":773,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"10138:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":782,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"10184:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":783,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:2","typeDescriptions":{}}},"id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":796,"nodeType":"IfStatement","src":"10180:96:2","trueBody":{"id":795,"nodeType":"Block","src":"10213:63:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:2","typeDescriptions":{}}},"id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":788,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"10234:19:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":794,"nodeType":"RevertStatement","src":"10227:38:2"}]}}]},"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"9639:311:2","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":798,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:2","nodeType":"FunctionDefinition","parameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"to","nameLocation":"9978:2:2","nodeType":"VariableDeclaration","scope":798,"src":"9970:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":750,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":753,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:2","nodeType":"VariableDeclaration","scope":798,"src":"9982:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":752,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:2"},"returnParameters":{"id":755,"nodeType":"ParameterList","parameters":[],"src":"10008:0:2"},"scope":1191,"src":"9955:327:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":812,"nodeType":"Block","src":"10690:43:2","statements":[{"expression":{"arguments":[{"id":807,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"10710:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":808,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"10714:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":806,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[813,839],"referencedDeclaration":839,"src":"10700:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":811,"nodeType":"ExpressionStatement","src":"10700:26:2"}]},"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"10288:340:2","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":813,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:2","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"to","nameLocation":"10660:2:2","nodeType":"VariableDeclaration","scope":813,"src":"10652:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:2","nodeType":"VariableDeclaration","scope":813,"src":"10664:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:2"},"returnParameters":{"id":805,"nodeType":"ParameterList","parameters":[],"src":"10690:0:2"},"scope":1191,"src":"10633:100:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":838,"nodeType":"Block","src":"11038:98:2","statements":[{"expression":{"arguments":[{"id":824,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"11054:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":825,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11058:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":823,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"11048:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":827,"nodeType":"ExpressionStatement","src":"11048:18:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:2","typeDescriptions":{}}},"id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":833,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"11111:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":834,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"11115:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":835,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"11124:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":828,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"11076:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":837,"nodeType":"ExpressionStatement","src":"11076:53:2"}]},"documentation":{"id":814,"nodeType":"StructuredDocumentation","src":"10739:210:2","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":839,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:2","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":816,"mutability":"mutable","name":"to","nameLocation":"10981:2:2","nodeType":"VariableDeclaration","scope":839,"src":"10973:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":818,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:2","nodeType":"VariableDeclaration","scope":839,"src":"10985:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"data","nameLocation":"11015:4:2","nodeType":"VariableDeclaration","scope":839,"src":"11002:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":819,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:2"},"returnParameters":{"id":822,"nodeType":"ParameterList","parameters":[],"src":"11038:0:2"},"scope":1191,"src":"10954:182:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":871,"nodeType":"Block","src":"11503:186:2","statements":[{"assignments":[846],"declarations":[{"constant":false,"id":846,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:2","nodeType":"VariableDeclaration","scope":871,"src":"11513:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":845,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":858,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":848,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:2","typeDescriptions":{}}},"id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":852,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"11557:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:2","typeDescriptions":{}}},"id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":847,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"11537:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":859,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"11591:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":860,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:2","typeDescriptions":{}}},"id":863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":870,"nodeType":"IfStatement","src":"11587:96:2","trueBody":{"id":869,"nodeType":"Block","src":"11620:63:2","statements":[{"errorCall":{"arguments":[{"id":866,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"11664:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":865,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"11641:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"RevertStatement","src":"11634:38:2"}]}}]},"documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"11142:315:2","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":872,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:2","nodeType":"FunctionDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:2","nodeType":"VariableDeclaration","scope":872,"src":"11477:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":841,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:2"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[],"src":"11503:0:2"},"scope":1191,"src":"11462:227:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":931,"nodeType":"Block","src":"12084:389:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":882,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"12098:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":883,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:2","typeDescriptions":{}}},"id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":896,"nodeType":"IfStatement","src":"12094:87:2","trueBody":{"id":895,"nodeType":"Block","src":"12116:65:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":889,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:2","typeDescriptions":{}}},"id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":888,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"12137:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"RevertStatement","src":"12130:40:2"}]}},{"assignments":[898],"declarations":[{"constant":false,"id":898,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:2","nodeType":"VariableDeclaration","scope":931,"src":"12190:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":897,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":907,"initialValue":{"arguments":[{"id":900,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"12222:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":901,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"12226:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:2","typeDescriptions":{}}},"id":905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":899,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"12214:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":908,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"12260:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":909,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:2","typeDescriptions":{}}},"id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":919,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"12362:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":920,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"12379:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":929,"nodeType":"IfStatement","src":"12358:109:2","trueBody":{"id":928,"nodeType":"Block","src":"12385:82:2","statements":[{"errorCall":{"arguments":[{"id":923,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"12427:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":924,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"12433:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":925,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"12442:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":922,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"12406:20:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":927,"nodeType":"RevertStatement","src":"12399:57:2"}]}},"id":930,"nodeType":"IfStatement","src":"12256:211:2","trueBody":{"id":918,"nodeType":"Block","src":"12289:63:2","statements":[{"errorCall":{"arguments":[{"id":915,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"12333:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":914,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"12310:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":917,"nodeType":"RevertStatement","src":"12303:38:2"}]}}]},"documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"11695:313:2","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":932,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:2","nodeType":"FunctionDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":875,"mutability":"mutable","name":"from","nameLocation":"12040:4:2","nodeType":"VariableDeclaration","scope":932,"src":"12032:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"to","nameLocation":"12054:2:2","nodeType":"VariableDeclaration","scope":932,"src":"12046:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:2","nodeType":"VariableDeclaration","scope":932,"src":"12058:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":878,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:2"},"returnParameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"12084:0:2"},"scope":1191,"src":"12013:460:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":949,"nodeType":"Block","src":"13481:53:2","statements":[{"expression":{"arguments":[{"id":943,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"13505:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":944,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"13511:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":945,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"13515:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":942,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[950,976],"referencedDeclaration":976,"src":"13491:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":948,"nodeType":"ExpressionStatement","src":"13491:36:2"}]},"documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"12479:922:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":950,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:2","nodeType":"FunctionDefinition","parameters":{"id":940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"from","nameLocation":"13437:4:2","nodeType":"VariableDeclaration","scope":950,"src":"13429:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"to","nameLocation":"13451:2:2","nodeType":"VariableDeclaration","scope":950,"src":"13443:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":939,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:2","nodeType":"VariableDeclaration","scope":950,"src":"13455:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":938,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:2"},"returnParameters":{"id":941,"nodeType":"ParameterList","parameters":[],"src":"13481:0:2"},"scope":1191,"src":"13406:128:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":975,"nodeType":"Block","src":"13873:102:2","statements":[{"expression":{"arguments":[{"id":963,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"13893:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":964,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"13899:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":965,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"13903:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":962,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"13883:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"13883:28:2"},{"expression":{"arguments":[{"id":969,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"13944:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":970,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"13950:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":971,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"13954:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":972,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"13963:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":968,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"13921:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"ExpressionStatement","src":"13921:47:2"}]},"documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"13540:226:2","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:2","nodeType":"FunctionDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":953,"mutability":"mutable","name":"from","nameLocation":"13802:4:2","nodeType":"VariableDeclaration","scope":976,"src":"13794:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":952,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":955,"mutability":"mutable","name":"to","nameLocation":"13816:2:2","nodeType":"VariableDeclaration","scope":976,"src":"13808:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":954,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":957,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:2","nodeType":"VariableDeclaration","scope":976,"src":"13820:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":956,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"data","nameLocation":"13850:4:2","nodeType":"VariableDeclaration","scope":976,"src":"13837:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":958,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:2"},"returnParameters":{"id":961,"nodeType":"ParameterList","parameters":[],"src":"13873:0:2"},"scope":1191,"src":"13771:204:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":993,"nodeType":"Block","src":"14488:50:2","statements":[{"expression":{"arguments":[{"id":987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"14507:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":988,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"14511:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":989,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"14520:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":986,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[994,1060],"referencedDeclaration":1060,"src":"14498:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":992,"nodeType":"ExpressionStatement","src":"14498:33:2"}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"13981:432:2","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":994,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:2","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"to","nameLocation":"14444:2:2","nodeType":"VariableDeclaration","scope":994,"src":"14436:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":978,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:2","nodeType":"VariableDeclaration","scope":994,"src":"14448:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"auth","nameLocation":"14473:4:2","nodeType":"VariableDeclaration","scope":994,"src":"14465:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":982,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:2"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"14488:0:2"},"scope":1191,"src":"14418:120:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1059,"nodeType":"Block","src":"14814:568:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1006,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"14880:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1007,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"14893:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1008,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:2","typeDescriptions":{}}},"id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1052,"nodeType":"IfStatement","src":"14876:460:2","trueBody":{"id":1051,"nodeType":"Block","src":"14913:423:2","statements":[{"assignments":[1015],"declarations":[{"constant":false,"id":1015,"mutability":"mutable","name":"owner","nameLocation":"14935:5:2","nodeType":"VariableDeclaration","scope":1051,"src":"14927:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1014,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1019,"initialValue":{"arguments":[{"id":1017,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"14957:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1016,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"14943:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1020,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"15093:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1021,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:2","typeDescriptions":{}}},"id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1026,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"15115:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1027,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"15124:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:2","subExpression":{"arguments":[{"id":1031,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"15150:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1032,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"15157:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1030,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"15133:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"IfStatement","src":"15089:142:2","trueBody":{"id":1040,"nodeType":"Block","src":"15164:67:2","statements":[{"errorCall":{"arguments":[{"id":1037,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"15211:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1036,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"15189:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1039,"nodeType":"RevertStatement","src":"15182:34:2"}]}},{"condition":{"id":1042,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"15249:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1050,"nodeType":"IfStatement","src":"15245:81:2","trueBody":{"id":1049,"nodeType":"Block","src":"15260:66:2","statements":[{"eventCall":{"arguments":[{"id":1044,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"15292:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1045,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"15299:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1046,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"15303:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1043,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"15283:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1048,"nodeType":"EmitStatement","src":"15278:33:2"}]}}]}},{"expression":{"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1053,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"15346:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1055,"indexExpression":{"id":1054,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"15362:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1056,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"15373:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1058,"nodeType":"ExpressionStatement","src":"15346:29:2"}]},"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"14544:171:2","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1060,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:2","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"to","nameLocation":"14746:2:2","nodeType":"VariableDeclaration","scope":1060,"src":"14738:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":996,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":999,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:2","nodeType":"VariableDeclaration","scope":1060,"src":"14750:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":998,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"auth","nameLocation":"14775:4:2","nodeType":"VariableDeclaration","scope":1060,"src":"14767:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:2","nodeType":"VariableDeclaration","scope":1060,"src":"14781:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1002,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:2"},"returnParameters":{"id":1005,"nodeType":"ParameterList","parameters":[],"src":"14814:0:2"},"scope":1191,"src":"14720:662:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1096,"nodeType":"Block","src":"15684:219:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1070,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"15698:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1071,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:2","typeDescriptions":{}}},"id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1081,"nodeType":"IfStatement","src":"15694:91:2","trueBody":{"id":1080,"nodeType":"Block","src":"15722:63:2","statements":[{"errorCall":{"arguments":[{"id":1077,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"15765:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1076,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"15743:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1079,"nodeType":"RevertStatement","src":"15736:38:2"}]}},{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1082,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"15794:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1085,"indexExpression":{"id":1083,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"15813:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1086,"indexExpression":{"id":1084,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"15820:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1087,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"15832:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1089,"nodeType":"ExpressionStatement","src":"15794:46:2"},{"eventCall":{"arguments":[{"id":1091,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"15870:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1092,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"15877:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1093,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"15887:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1090,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"15855:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1095,"nodeType":"EmitStatement","src":"15850:46:2"}]},"documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"15388:198:2","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1097,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:2","nodeType":"FunctionDefinition","parameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"owner","nameLocation":"15627:5:2","nodeType":"VariableDeclaration","scope":1097,"src":"15619:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1062,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"operator","nameLocation":"15642:8:2","nodeType":"VariableDeclaration","scope":1097,"src":"15634:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1064,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1067,"mutability":"mutable","name":"approved","nameLocation":"15657:8:2","nodeType":"VariableDeclaration","scope":1097,"src":"15652:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1066,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:2"},"returnParameters":{"id":1069,"nodeType":"ParameterList","parameters":[],"src":"15684:0:2"},"scope":1191,"src":"15591:312:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1125,"nodeType":"Block","src":"16210:169:2","statements":[{"assignments":[1106],"declarations":[{"constant":false,"id":1106,"mutability":"mutable","name":"owner","nameLocation":"16228:5:2","nodeType":"VariableDeclaration","scope":1125,"src":"16220:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1105,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1110,"initialValue":{"arguments":[{"id":1108,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"16245:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1107,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"16236:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1111,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"16267:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1112,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:2","typeDescriptions":{}}},"id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1122,"nodeType":"IfStatement","src":"16263:88:2","trueBody":{"id":1121,"nodeType":"Block","src":"16288:63:2","statements":[{"errorCall":{"arguments":[{"id":1118,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"16332:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1117,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"16309:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1120,"nodeType":"RevertStatement","src":"16302:38:2"}]}},{"expression":{"id":1123,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"16367:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1104,"id":1124,"nodeType":"Return","src":"16360:12:2"}]},"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"15909:224:2","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1126,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:2","nodeType":"FunctionDefinition","parameters":{"id":1101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:2","nodeType":"VariableDeclaration","scope":1126,"src":"16161:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1099,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:2"},"returnParameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"16201:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1102,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:2"},"scope":1191,"src":"16138:241:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1189,"nodeType":"Block","src":"17020:680:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1138,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"17034:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:2","memberName":"code","nodeType":"MemberAccess","src":"17034:7:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:2","memberName":"length","nodeType":"MemberAccess","src":"17034:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1188,"nodeType":"IfStatement","src":"17030:664:2","trueBody":{"id":1187,"nodeType":"Block","src":"17054:640:2","statements":[{"clauses":[{"block":{"id":1167,"nodeType":"Block","src":"17168:162:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1156,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"17190:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1157,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"17200:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1326_$","typeString":"type(contract IERC721Receiver)"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:2","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1325,"src":"17200:32:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:2","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1166,"nodeType":"IfStatement","src":"17186:130:2","trueBody":{"id":1165,"nodeType":"Block","src":"17243:73:2","statements":[{"errorCall":{"arguments":[{"id":1162,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"17294:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1161,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"17272:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1164,"nodeType":"RevertStatement","src":"17265:32:2"}]}}]},"errorName":"","id":1168,"nodeType":"TryCatchClause","parameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"retval","nameLocation":"17160:6:2","nodeType":"VariableDeclaration","scope":1168,"src":"17153:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1153,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:2"},"src":"17144:186:2"},{"block":{"id":1184,"nodeType":"Block","src":"17359:325:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1172,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"17381:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:2","memberName":"length","nodeType":"MemberAccess","src":"17381:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1182,"nodeType":"Block","src":"17480:190:2","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:2","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:2","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:2"},"nodeType":"YulFunctionCall","src":"17599:15:2"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:2"},"nodeType":"YulFunctionCall","src":"17616:13:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:2"},"nodeType":"YulFunctionCall","src":"17592:38:2"},"nodeType":"YulExpressionStatement","src":"17592:38:2"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1170,"isOffset":false,"isSlot":false,"src":"17607:6:2","valueSize":1},{"declaration":1170,"isOffset":false,"isSlot":false,"src":"17622:6:2","valueSize":1}],"id":1181,"nodeType":"InlineAssembly","src":"17557:95:2"}]},"id":1183,"nodeType":"IfStatement","src":"17377:293:2","trueBody":{"id":1180,"nodeType":"Block","src":"17401:73:2","statements":[{"errorCall":{"arguments":[{"id":1177,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"17452:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1176,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"17430:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1179,"nodeType":"RevertStatement","src":"17423:32:2"}]}}]},"errorName":"","id":1185,"nodeType":"TryCatchClause","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"reason","nameLocation":"17351:6:2","nodeType":"VariableDeclaration","scope":1185,"src":"17338:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1169,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:2"},"src":"17331:353:2"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1147,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"17109:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"17123:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"17129:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1151,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"17138:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1144,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"17088:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1143,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"17072:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1326_$","typeString":"type(contract IERC721Receiver)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1326","typeString":"contract IERC721Receiver"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:2","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1325,"src":"17072:36:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1186,"nodeType":"TryStatement","src":"17068:616:2"}]}}]},"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"16385:528:2","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":1190,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:2","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"from","nameLocation":"16958:4:2","nodeType":"VariableDeclaration","scope":1190,"src":"16950:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"to","nameLocation":"16972:2:2","nodeType":"VariableDeclaration","scope":1190,"src":"16964:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:2","nodeType":"VariableDeclaration","scope":1190,"src":"16976:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"data","nameLocation":"17006:4:2","nodeType":"VariableDeclaration","scope":1190,"src":"16993:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1134,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:2"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"17020:0:2"},"scope":1191,"src":"16918:782:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1192,"src":"776:16926:2","usedErrors":[93,98,107,112,117,124,129,134],"usedEvents":[1207,1216,1225]}],"src":"107:17596:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1667],"IERC721":[1308]},"id":1309,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1193,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1195,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1309,"sourceUnit":1668,"src":"134:62:3","symbolAliases":[{"foreign":{"id":1194,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"142:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1197,"name":"IERC165","nameLocations":["287:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1667,"src":"287:7:3"},"id":1198,"nodeType":"InheritanceSpecifier","src":"287:7:3"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"198:67:3","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1308,"linearizedBaseContracts":[1308,1667],"name":"IERC721","nameLocation":"276:7:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"301:88:3","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1207,"name":"Transfer","nameLocation":"400:8:3","nodeType":"EventDefinition","parameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:3","nodeType":"VariableDeclaration","scope":1207,"src":"409:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1200,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1203,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:3","nodeType":"VariableDeclaration","scope":1207,"src":"431:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1205,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:3","nodeType":"VariableDeclaration","scope":1207,"src":"451:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:3"},"src":"394:82:3"},{"anonymous":false,"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"482:94:3","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1216,"name":"Approval","nameLocation":"587:8:3","nodeType":"EventDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:3","nodeType":"VariableDeclaration","scope":1216,"src":"596:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1209,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1212,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:3","nodeType":"VariableDeclaration","scope":1216,"src":"619:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1214,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:3","nodeType":"VariableDeclaration","scope":1216,"src":"645:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:3"},"src":"581:89:3"},{"anonymous":false,"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"676:117:3","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1225,"name":"ApprovalForAll","nameLocation":"804:14:3","nodeType":"EventDefinition","parameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:3","nodeType":"VariableDeclaration","scope":1225,"src":"819:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:3","nodeType":"VariableDeclaration","scope":1225,"src":"842:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1220,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1223,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:3","nodeType":"VariableDeclaration","scope":1225,"src":"868:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1222,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:3"},"src":"798:85:3"},{"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"889:76:3","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1233,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:3","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"owner","nameLocation":"997:5:3","nodeType":"VariableDeclaration","scope":1233,"src":"989:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1227,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:3"},"returnParameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"balance","nameLocation":"1035:7:3","nodeType":"VariableDeclaration","scope":1233,"src":"1027:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:3"},"scope":1308,"src":"970:74:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1234,"nodeType":"StructuredDocumentation","src":"1050:131:3","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1241,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:3","nodeType":"FunctionDefinition","parameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:3","nodeType":"VariableDeclaration","scope":1241,"src":"1203:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1235,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:3"},"returnParameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"owner","nameLocation":"1251:5:3","nodeType":"VariableDeclaration","scope":1241,"src":"1243:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:3"},"scope":1308,"src":"1186:72:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"1264:565:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1253,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:3","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"from","nameLocation":"1868:4:3","nodeType":"VariableDeclaration","scope":1253,"src":"1860:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"to","nameLocation":"1882:2:3","nodeType":"VariableDeclaration","scope":1253,"src":"1874:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:3","nodeType":"VariableDeclaration","scope":1253,"src":"1886:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"data","nameLocation":"1918:4:3","nodeType":"VariableDeclaration","scope":1253,"src":"1903:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1249,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:3"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"1932:0:3"},"scope":1308,"src":"1834:99:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"1939:705:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1263,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:3","nodeType":"FunctionDefinition","parameters":{"id":1261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"from","nameLocation":"2683:4:3","nodeType":"VariableDeclaration","scope":1263,"src":"2675:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"to","nameLocation":"2697:2:3","nodeType":"VariableDeclaration","scope":1263,"src":"2689:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1260,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:3","nodeType":"VariableDeclaration","scope":1263,"src":"2701:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1259,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:3"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[],"src":"2726:0:3"},"scope":1308,"src":"2649:78:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"2733:732:3","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1273,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:3","nodeType":"FunctionDefinition","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"from","nameLocation":"3500:4:3","nodeType":"VariableDeclaration","scope":1273,"src":"3492:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"to","nameLocation":"3514:2:3","nodeType":"VariableDeclaration","scope":1273,"src":"3506:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:3","nodeType":"VariableDeclaration","scope":1273,"src":"3518:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:3"},"returnParameters":{"id":1272,"nodeType":"ParameterList","parameters":[],"src":"3543:0:3"},"scope":1308,"src":"3470:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"3550:452:3","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1281,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:3","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"mutability":"mutable","name":"to","nameLocation":"4032:2:3","nodeType":"VariableDeclaration","scope":1281,"src":"4024:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:3","nodeType":"VariableDeclaration","scope":1281,"src":"4036:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1277,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:3"},"returnParameters":{"id":1280,"nodeType":"ParameterList","parameters":[],"src":"4061:0:3"},"scope":1308,"src":"4007:55:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1282,"nodeType":"StructuredDocumentation","src":"4068:315:3","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1289,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:3","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1284,"mutability":"mutable","name":"operator","nameLocation":"4423:8:3","nodeType":"VariableDeclaration","scope":1289,"src":"4415:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1283,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"approved","nameLocation":"4438:8:3","nodeType":"VariableDeclaration","scope":1289,"src":"4433:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1285,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:3"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[],"src":"4456:0:3"},"scope":1308,"src":"4388:69:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"4463:139:3","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1297,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:3","nodeType":"FunctionDefinition","parameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:3","nodeType":"VariableDeclaration","scope":1297,"src":"4628:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1291,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:3"},"returnParameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1295,"mutability":"mutable","name":"operator","nameLocation":"4676:8:3","nodeType":"VariableDeclaration","scope":1297,"src":"4668:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:3"},"scope":1308,"src":"4607:79:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"4692:138:3","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1307,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:3","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"owner","nameLocation":"4869:5:3","nodeType":"VariableDeclaration","scope":1307,"src":"4861:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1299,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"operator","nameLocation":"4884:8:3","nodeType":"VariableDeclaration","scope":1307,"src":"4876:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1301,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:3"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1307,"src":"4917:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1304,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:3"},"scope":1308,"src":"4835:88:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1309,"src":"266:4659:3","usedErrors":[],"usedEvents":[1207,1216,1225]}],"src":"108:4818:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1326]},"id":1327,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1310,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"142:152:4","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1326,"linearizedBaseContracts":[1326],"name":"IERC721Receiver","nameLocation":"305:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"327:500:4","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1325,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:4","nodeType":"FunctionDefinition","parameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"operator","nameLocation":"875:8:4","nodeType":"VariableDeclaration","scope":1325,"src":"867:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"from","nameLocation":"901:4:4","nodeType":"VariableDeclaration","scope":1325,"src":"893:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1315,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:4","nodeType":"VariableDeclaration","scope":1325,"src":"915:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1317,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"data","nameLocation":"955:4:4","nodeType":"VariableDeclaration","scope":1325,"src":"940:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1319,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:4"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1325,"src":"984:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1322,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:4"},"scope":1326,"src":"832:160:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1327,"src":"295:699:4","usedErrors":[],"usedEvents":[]}],"src":"116:879:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[1308],"IERC721Metadata":[1354]},"id":1355,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1328,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1330,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1355,"sourceUnit":1309,"src":"153:39:5","symbolAliases":[{"foreign":{"id":1329,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"161:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1332,"name":"IERC721","nameLocations":["357:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1308,"src":"357:7:5"},"id":1333,"nodeType":"InheritanceSpecifier","src":"357:7:5"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1331,"nodeType":"StructuredDocumentation","src":"194:133:5","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1354,"linearizedBaseContracts":[1354,1308,1667],"name":"IERC721Metadata","nameLocation":"338:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"371:58:5","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1339,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:5","nodeType":"FunctionDefinition","parameters":{"id":1335,"nodeType":"ParameterList","parameters":[],"src":"447:2:5"},"returnParameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1339,"src":"473:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1336,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:5"},"scope":1354,"src":"434:54:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"494:60:5","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1345,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:5","nodeType":"FunctionDefinition","parameters":{"id":1341,"nodeType":"ParameterList","parameters":[],"src":"574:2:5"},"returnParameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1345,"src":"600:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1342,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:5"},"scope":1354,"src":"559:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"621:90:5","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1353,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:5","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:5","nodeType":"VariableDeclaration","scope":1353,"src":"734:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:5"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1353,"src":"774:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1350,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:5"},"scope":1354,"src":"716:73:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1355,"src":"328:463:5","usedErrors":[],"usedEvents":[1207,1216,1225]}],"src":"127:665:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1376]},"id":1377,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1356,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1357,"nodeType":"StructuredDocumentation","src":"127:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1376,"linearizedBaseContracts":[1376],"name":"Context","nameLocation":"642:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1365,"nodeType":"Block","src":"718:34:6","statements":[{"expression":{"expression":{"id":1362,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:6","memberName":"sender","nodeType":"MemberAccess","src":"735:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1361,"id":1364,"nodeType":"Return","src":"728:17:6"}]},"id":1366,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:6","nodeType":"FunctionDefinition","parameters":{"id":1358,"nodeType":"ParameterList","parameters":[],"src":"675:2:6"},"returnParameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1366,"src":"709:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1359,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:6"},"scope":1376,"src":"656:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"825:32:6","statements":[{"expression":{"expression":{"id":1371,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:6","memberName":"data","nodeType":"MemberAccess","src":"842:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1370,"id":1373,"nodeType":"Return","src":"835:15:6"}]},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:6","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[],"src":"775:2:6"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"809:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1368,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:6"},"scope":1376,"src":"758:99:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1377,"src":"624:235:6","usedErrors":[],"usedEvents":[]}],"src":"101:759:6"},"id":6},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2721],"SignedMath":[2826],"Strings":[1631]},"id":1632,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1378,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:7"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1380,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1632,"sourceUnit":2722,"src":"127:37:7","symbolAliases":[{"foreign":{"id":1379,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"135:4:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1382,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1632,"sourceUnit":2827,"src":"165:49:7","symbolAliases":[{"foreign":{"id":1381,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"173:10:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"216:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1631,"linearizedBaseContracts":[1631],"name":"Strings","nameLocation":"259:7:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1386,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:7","nodeType":"VariableDeclaration","scope":1631,"src":"273:56:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1384,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1389,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:7","nodeType":"VariableDeclaration","scope":1631,"src":"335:42:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1387,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1390,"nodeType":"StructuredDocumentation","src":"384:81:7","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1396,"name":"StringsInsufficientHexLength","nameLocation":"476:28:7","nodeType":"ErrorDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"value","nameLocation":"513:5:7","nodeType":"VariableDeclaration","scope":1396,"src":"505:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1391,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"length","nameLocation":"528:6:7","nodeType":"VariableDeclaration","scope":1396,"src":"520:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:7"},"src":"470:66:7"},{"body":{"id":1443,"nodeType":"Block","src":"708:627:7","statements":[{"id":1442,"nodeType":"UncheckedBlock","src":"718:611:7","statements":[{"assignments":[1405],"declarations":[{"constant":false,"id":1405,"mutability":"mutable","name":"length","nameLocation":"750:6:7","nodeType":"VariableDeclaration","scope":1442,"src":"742:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1404,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1412,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"770:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1406,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"759:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2721_$","typeString":"type(library Math)"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:7","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2541,"src":"759:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:7"},{"assignments":[1414],"declarations":[{"constant":false,"id":1414,"mutability":"mutable","name":"buffer","nameLocation":"808:6:7","nodeType":"VariableDeclaration","scope":1442,"src":"794:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1413,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1419,"initialValue":{"arguments":[{"id":1417,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"828:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1415,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:7"},{"assignments":[1421],"declarations":[{"constant":false,"id":1421,"mutability":"mutable","name":"ptr","nameLocation":"857:3:7","nodeType":"VariableDeclaration","scope":1442,"src":"849:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1420,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1422,"nodeType":"VariableDeclarationStatement","src":"849:11:7"},{"AST":{"nodeType":"YulBlock","src":"930:67:7","statements":[{"nodeType":"YulAssignment","src":"948:35:7","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:7","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:7"},"nodeType":"YulFunctionCall","src":"967:15:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:7"},"nodeType":"YulFunctionCall","src":"955:28:7"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1414,"isOffset":false,"isSlot":false,"src":"959:6:7","valueSize":1},{"declaration":1405,"isOffset":false,"isSlot":false,"src":"975:6:7","valueSize":1},{"declaration":1421,"isOffset":false,"isSlot":false,"src":"948:3:7","valueSize":1}],"id":1423,"nodeType":"InlineAssembly","src":"921:76:7"},{"body":{"id":1438,"nodeType":"Block","src":"1023:269:7","statements":[{"expression":{"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:7","subExpression":{"id":1425,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"1041:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1427,"nodeType":"ExpressionStatement","src":"1041:5:7"},{"AST":{"nodeType":"YulBlock","src":"1124:86:7","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:7"},"nodeType":"YulFunctionCall","src":"1164:14:7"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:7"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:7"},"nodeType":"YulFunctionCall","src":"1159:32:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:7"},"nodeType":"YulFunctionCall","src":"1146:46:7"},"nodeType":"YulExpressionStatement","src":"1146:46:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1386,"isOffset":false,"isSlot":false,"src":"1180:10:7","valueSize":1},{"declaration":1421,"isOffset":false,"isSlot":false,"src":"1154:3:7","valueSize":1},{"declaration":1399,"isOffset":false,"isSlot":false,"src":"1168:5:7","valueSize":1}],"id":1428,"nodeType":"InlineAssembly","src":"1115:95:7"},{"expression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"1227:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1432,"nodeType":"ExpressionStatement","src":"1227:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"1260:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1437,"nodeType":"IfStatement","src":"1256:21:7","trueBody":{"id":1436,"nodeType":"Break","src":"1272:5:7"}}]},"condition":{"hexValue":"74727565","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1439,"nodeType":"WhileStatement","src":"1010:282:7"},{"expression":{"id":1440,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"1312:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1403,"id":1441,"nodeType":"Return","src":"1305:13:7"}]}]},"documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"542:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1444,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:7","nodeType":"FunctionDefinition","parameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"value","nameLocation":"663:5:7","nodeType":"VariableDeclaration","scope":1444,"src":"655:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:7"},"returnParameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1444,"src":"693:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1401,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:7"},"scope":1631,"src":"637:698:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1469,"nodeType":"Block","src":"1511:92:7","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"1542:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:7","trueExpression":{"hexValue":"2d","id":1458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"1588:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1462,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"1573:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2826_$","typeString":"type(library SignedMath)"}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:7","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2825,"src":"1573:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1461,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"1564:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1452,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:7","typeDescriptions":{}}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:7","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:7","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1451,"id":1468,"nodeType":"Return","src":"1521:75:7"}]},"documentation":{"id":1445,"nodeType":"StructuredDocumentation","src":"1341:89:7","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1470,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:7","nodeType":"FunctionDefinition","parameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"value","nameLocation":"1466:5:7","nodeType":"VariableDeclaration","scope":1470,"src":"1459:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1446,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:7"},"returnParameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1470,"src":"1496:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1449,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:7"},"scope":1631,"src":"1435:168:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1489,"nodeType":"Block","src":"1782:100:7","statements":[{"id":1488,"nodeType":"UncheckedBlock","src":"1792:84:7","statements":[{"expression":{"arguments":[{"id":1479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"1835:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"1854:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1480,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"1842:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2721_$","typeString":"type(library Math)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:7","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2663,"src":"1842:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1478,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1490,1573,1593],"referencedDeclaration":1573,"src":"1823:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1477,"id":1487,"nodeType":"Return","src":"1816:49:7"}]}]},"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"1609:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1490,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:7","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1473,"mutability":"mutable","name":"value","nameLocation":"1737:5:7","nodeType":"VariableDeclaration","scope":1490,"src":"1729:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:7"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1490,"src":"1767:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1475,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:7"},"scope":1631,"src":"1708:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1572,"nodeType":"Block","src":"2095:435:7","statements":[{"assignments":[1501],"declarations":[{"constant":false,"id":1501,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:7","nodeType":"VariableDeclaration","scope":1572,"src":"2105:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1503,"initialValue":{"id":1502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"2126:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:7"},{"assignments":[1505],"declarations":[{"constant":false,"id":1505,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:7","nodeType":"VariableDeclaration","scope":1572,"src":"2141:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1504,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1514,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1509,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2177:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1506,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:7"},{"expression":{"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1515,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2198:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1517,"indexExpression":{"hexValue":"30","id":1516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1520,"nodeType":"ExpressionStatement","src":"2198:15:7"},{"expression":{"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1521,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2223:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1523,"indexExpression":{"hexValue":"31","id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1526,"nodeType":"ExpressionStatement","src":"2223:15:7"},{"body":{"id":1555,"nodeType":"Block","src":"2293:95:7","statements":[{"expression":{"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1541,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2307:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1543,"indexExpression":{"id":1542,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2314:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1544,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"2319:10:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1548,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1545,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2330:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1550,"nodeType":"ExpressionStatement","src":"2307:40:7"},{"expression":{"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1551,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2361:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1554,"nodeType":"ExpressionStatement","src":"2361:16:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1535,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2281:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1556,"initializationExpression":{"assignments":[1528],"declarations":[{"constant":false,"id":1528,"mutability":"mutable","name":"i","nameLocation":"2261:1:7","nodeType":"VariableDeclaration","scope":1556,"src":"2253:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1534,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1530,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2269:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:7"},"loopExpression":{"expression":{"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:7","subExpression":{"id":1538,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2290:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1540,"nodeType":"ExpressionStatement","src":"2288:3:7"},"nodeType":"ForStatement","src":"2248:140:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1557,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2401:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1566,"nodeType":"IfStatement","src":"2397:96:7","trueBody":{"id":1565,"nodeType":"Block","src":"2418:75:7","statements":[{"errorCall":{"arguments":[{"id":1561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"2468:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1562,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2475:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1560,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"2439:28:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1564,"nodeType":"RevertStatement","src":"2432:50:7"}]}},{"expression":{"arguments":[{"id":1569,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2516:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1567,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:7","typeDescriptions":{}}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1499,"id":1571,"nodeType":"Return","src":"2502:21:7"}]},"documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"1888:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1573,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:7","nodeType":"FunctionDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"value","nameLocation":"2034:5:7","nodeType":"VariableDeclaration","scope":1573,"src":"2026:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1492,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"length","nameLocation":"2049:6:7","nodeType":"VariableDeclaration","scope":1573,"src":"2041:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1494,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:7"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1573,"src":"2080:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1497,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:7"},"scope":1631,"src":"2005:525:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"2762:75:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1586,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"2807:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1584,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:7","typeDescriptions":{}}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:7","typeDescriptions":{}}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1589,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"2815:14:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1581,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1490,1573,1593],"referencedDeclaration":1573,"src":"2779:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1580,"id":1591,"nodeType":"Return","src":"2772:58:7"}]},"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"2536:148:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:7","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1576,"mutability":"mutable","name":"addr","nameLocation":"2718:4:7","nodeType":"VariableDeclaration","scope":1593,"src":"2710:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1575,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:7"},"returnParameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1593,"src":"2747:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1578,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:7"},"scope":1631,"src":"2689:148:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1629,"nodeType":"Block","src":"2992:104:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1605,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"3015:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1603,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:7","typeDescriptions":{}}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:7","memberName":"length","nodeType":"MemberAccess","src":"3009:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1610,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"3034:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1608,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:7","typeDescriptions":{}}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:7","memberName":"length","nodeType":"MemberAccess","src":"3028:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1617,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"3063:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1615,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:7","typeDescriptions":{}}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1614,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1623,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"3086:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1621,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:7","typeDescriptions":{}}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1620,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1602,"id":1628,"nodeType":"Return","src":"3002:87:7"}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"2843:66:7","text":" @dev Returns true if the two strings are equal."},"id":1630,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:7","nodeType":"FunctionDefinition","parameters":{"id":1599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"a","nameLocation":"2943:1:7","nodeType":"VariableDeclaration","scope":1630,"src":"2929:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1595,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"b","nameLocation":"2960:1:7","nodeType":"VariableDeclaration","scope":1630,"src":"2946:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1597,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:7"},"returnParameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1630,"src":"2986:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1600,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:7"},"scope":1631,"src":"2914:182:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1632,"src":"251:2847:7","usedErrors":[1396],"usedEvents":[]}],"src":"101:2998:7"},"id":7},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1655],"IERC165":[1667]},"id":1656,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1633,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1635,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1656,"sourceUnit":1668,"src":"140:38:8","symbolAliases":[{"foreign":{"id":1634,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"148:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1637,"name":"IERC165","nameLocations":["687:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1667,"src":"687:7:8"},"id":1638,"nodeType":"InheritanceSpecifier","src":"687:7:8"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1636,"nodeType":"StructuredDocumentation","src":"180:478:8","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1655,"linearizedBaseContracts":[1655,1667],"name":"ERC165","nameLocation":"677:6:8","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1666],"body":{"id":1653,"nodeType":"Block","src":"844:64:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1646,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"861:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1648,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"881:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1667_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1667_$","typeString":"type(contract IERC165)"}],"id":1647,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1667","typeString":"type(contract IERC165)"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1645,"id":1652,"nodeType":"Return","src":"854:47:8"}]},"documentation":{"id":1639,"nodeType":"StructuredDocumentation","src":"701:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1654,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:8","nodeType":"FunctionDefinition","parameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:8","nodeType":"VariableDeclaration","scope":1654,"src":"789:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1640,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:8"},"returnParameters":{"id":1645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1654,"src":"838:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1643,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:8"},"scope":1655,"src":"762:146:8","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1656,"src":"659:251:8","usedErrors":[],"usedEvents":[]}],"src":"114:797:8"},"id":8},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1667]},"id":1668,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1657,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1658,"nodeType":"StructuredDocumentation","src":"141:279:9","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1667,"linearizedBaseContracts":[1667],"name":"IERC165","nameLocation":"431:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1659,"nodeType":"StructuredDocumentation","src":"445:340:9","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1666,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:9","nodeType":"FunctionDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:9","nodeType":"VariableDeclaration","scope":1666,"src":"817:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1660,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:9"},"returnParameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1666,"src":"860:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1663,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:9"},"scope":1667,"src":"790:76:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1668,"src":"421:447:9","usedErrors":[],"usedEvents":[]}],"src":"115:754:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2721]},"id":2722,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1669,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"129:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2721,"linearizedBaseContracts":[2721],"name":"Math","nameLocation":"211:4:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1671,"nodeType":"StructuredDocumentation","src":"222:50:10","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1673,"name":"MathOverflowedMulDiv","nameLocation":"283:20:10","nodeType":"ErrorDefinition","parameters":{"id":1672,"nodeType":"ParameterList","parameters":[],"src":"303:2:10"},"src":"277:29:10"},{"canonicalName":"Math.Rounding","id":1678,"members":[{"id":1674,"name":"Floor","nameLocation":"336:5:10","nodeType":"EnumValue","src":"336:5:10"},{"id":1675,"name":"Ceil","nameLocation":"379:4:10","nodeType":"EnumValue","src":"379:4:10"},{"id":1676,"name":"Trunc","nameLocation":"421:5:10","nodeType":"EnumValue","src":"421:5:10"},{"id":1677,"name":"Expand","nameLocation":"451:6:10","nodeType":"EnumValue","src":"451:6:10"}],"name":"Rounding","nameLocation":"317:8:10","nodeType":"EnumDefinition","src":"312:169:10"},{"body":{"id":1709,"nodeType":"Block","src":"661:140:10","statements":[{"id":1708,"nodeType":"UncheckedBlock","src":"671:124:10","statements":[{"assignments":[1691],"declarations":[{"constant":false,"id":1691,"mutability":"mutable","name":"c","nameLocation":"703:1:10","nodeType":"VariableDeclaration","scope":1708,"src":"695:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1695,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1692,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"707:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1693,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"711:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1696,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"730:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1697,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"734:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1703,"nodeType":"IfStatement","src":"726:28:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1689,"id":1702,"nodeType":"Return","src":"737:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1705,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"782:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1706,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1689,"id":1707,"nodeType":"Return","src":"768:16:10"}]}]},"documentation":{"id":1679,"nodeType":"StructuredDocumentation","src":"487:93:10","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":1710,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:10","nodeType":"FunctionDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1681,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":1710,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1680,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1710,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1682,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1710,"src":"646:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1685,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1710,"src":"652:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:10"},"scope":2721,"src":"585:216:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1737,"nodeType":"Block","src":"984:113:10","statements":[{"id":1736,"nodeType":"UncheckedBlock","src":"994:97:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1722,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"1022:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1723,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"1026:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1729,"nodeType":"IfStatement","src":"1018:28:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1727,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1721,"id":1728,"nodeType":"Return","src":"1029:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"1074:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1732,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"1078:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1734,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1721,"id":1735,"nodeType":"Return","src":"1060:20:10"}]}]},"documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"807:96:10","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":1738,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:10","nodeType":"FunctionDefinition","parameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"a","nameLocation":"932:1:10","nodeType":"VariableDeclaration","scope":1738,"src":"924:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1715,"mutability":"mutable","name":"b","nameLocation":"943:1:10","nodeType":"VariableDeclaration","scope":1738,"src":"935:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1714,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:10"},"returnParameters":{"id":1721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1738,"src":"969:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1717,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1738,"src":"975:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1719,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:10"},"scope":2721,"src":"908:189:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1779,"nodeType":"Block","src":"1283:417:10","statements":[{"id":1778,"nodeType":"UncheckedBlock","src":"1293:401:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1750,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"1551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1757,"nodeType":"IfStatement","src":"1547:28:10","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1755,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1749,"id":1756,"nodeType":"Return","src":"1559:16:10"}},{"assignments":[1759],"declarations":[{"constant":false,"id":1759,"mutability":"mutable","name":"c","nameLocation":"1597:1:10","nodeType":"VariableDeclaration","scope":1778,"src":"1589:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1763,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1760,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"1601:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1761,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"1605:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1764,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1624:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1765,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"1628:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1767,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"1633:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1773,"nodeType":"IfStatement","src":"1620:33:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1771,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1749,"id":1772,"nodeType":"Return","src":"1636:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1775,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1681:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1776,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1749,"id":1777,"nodeType":"Return","src":"1667:16:10"}]}]},"documentation":{"id":1739,"nodeType":"StructuredDocumentation","src":"1103:99:10","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":1780,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:10","nodeType":"FunctionDefinition","parameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1741,"mutability":"mutable","name":"a","nameLocation":"1231:1:10","nodeType":"VariableDeclaration","scope":1780,"src":"1223:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1740,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1743,"mutability":"mutable","name":"b","nameLocation":"1242:1:10","nodeType":"VariableDeclaration","scope":1780,"src":"1234:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:10"},"returnParameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1780,"src":"1268:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1745,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1780,"src":"1274:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1747,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:10"},"scope":2721,"src":"1207:493:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1807,"nodeType":"Block","src":"1887:114:10","statements":[{"id":1806,"nodeType":"UncheckedBlock","src":"1897:98:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"1925:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1799,"nodeType":"IfStatement","src":"1921:29:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1791,"id":1798,"nodeType":"Return","src":"1933:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"1978:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1802,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"1982:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1804,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1791,"id":1805,"nodeType":"Return","src":"1964:20:10"}]}]},"documentation":{"id":1781,"nodeType":"StructuredDocumentation","src":"1706:100:10","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:10","nodeType":"FunctionDefinition","parameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"a","nameLocation":"1835:1:10","nodeType":"VariableDeclaration","scope":1808,"src":"1827:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1785,"mutability":"mutable","name":"b","nameLocation":"1846:1:10","nodeType":"VariableDeclaration","scope":1808,"src":"1838:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:10"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1808,"src":"1872:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1787,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1808,"src":"1878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:10"},"scope":2721,"src":"1811:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1835,"nodeType":"Block","src":"2198:114:10","statements":[{"id":1834,"nodeType":"UncheckedBlock","src":"2208:98:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1820,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"2236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1827,"nodeType":"IfStatement","src":"2232:29:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1825,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1819,"id":1826,"nodeType":"Return","src":"2244:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1829,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"2289:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1830,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"2293:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1832,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1819,"id":1833,"nodeType":"Return","src":"2275:20:10"}]}]},"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"2007:110:10","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":1836,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:10","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"a","nameLocation":"2146:1:10","nodeType":"VariableDeclaration","scope":1836,"src":"2138:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"b","nameLocation":"2157:1:10","nodeType":"VariableDeclaration","scope":1836,"src":"2149:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1812,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:10"},"returnParameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1836,"src":"2183:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1815,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1836,"src":"2189:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1817,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:10"},"scope":2721,"src":"2122:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1853,"nodeType":"Block","src":"2449:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"2466:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"2470:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1850,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"2478:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:10","trueExpression":{"id":1849,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"2474:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1845,"id":1852,"nodeType":"Return","src":"2459:20:10"}]},"documentation":{"id":1837,"nodeType":"StructuredDocumentation","src":"2318:59:10","text":" @dev Returns the largest of two numbers."},"id":1854,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:10","nodeType":"FunctionDefinition","parameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1839,"mutability":"mutable","name":"a","nameLocation":"2403:1:10","nodeType":"VariableDeclaration","scope":1854,"src":"2395:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1841,"mutability":"mutable","name":"b","nameLocation":"2414:1:10","nodeType":"VariableDeclaration","scope":1854,"src":"2406:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1840,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:10"},"returnParameters":{"id":1845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1854,"src":"2440:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:10"},"scope":2721,"src":"2382:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1871,"nodeType":"Block","src":"2624:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1864,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"2641:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1865,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"2645:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1868,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"2653:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:10","trueExpression":{"id":1867,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"2649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1863,"id":1870,"nodeType":"Return","src":"2634:20:10"}]},"documentation":{"id":1855,"nodeType":"StructuredDocumentation","src":"2492:60:10","text":" @dev Returns the smallest of two numbers."},"id":1872,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:10","nodeType":"FunctionDefinition","parameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"a","nameLocation":"2578:1:10","nodeType":"VariableDeclaration","scope":1872,"src":"2570:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1856,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1859,"mutability":"mutable","name":"b","nameLocation":"2589:1:10","nodeType":"VariableDeclaration","scope":1872,"src":"2581:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1858,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:10"},"returnParameters":{"id":1863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1872,"src":"2615:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:10"},"scope":2721,"src":"2557:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1894,"nodeType":"Block","src":"2845:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1882,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"2900:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1883,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"2904:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1885,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"2910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1887,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"2914:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1881,"id":1893,"nodeType":"Return","src":"2892:28:10"}]},"documentation":{"id":1873,"nodeType":"StructuredDocumentation","src":"2667:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1895,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:10","nodeType":"FunctionDefinition","parameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1875,"mutability":"mutable","name":"a","nameLocation":"2799:1:10","nodeType":"VariableDeclaration","scope":1895,"src":"2791:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1874,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1877,"mutability":"mutable","name":"b","nameLocation":"2810:1:10","nodeType":"VariableDeclaration","scope":1895,"src":"2802:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1876,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:10"},"returnParameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1895,"src":"2836:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:10"},"scope":2721,"src":"2774:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1928,"nodeType":"Block","src":"3219:260:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1905,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"3233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1913,"nodeType":"IfStatement","src":"3229:127:10","trueBody":{"id":1912,"nodeType":"Block","src":"3241:115:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"3340:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1909,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"3344:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1904,"id":1911,"nodeType":"Return","src":"3333:12:10"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1914,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"3444:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1918,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"3458:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1921,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"3467:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:10","trueExpression":{"hexValue":"30","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1904,"id":1927,"nodeType":"Return","src":"3437:35:10"}]},"documentation":{"id":1896,"nodeType":"StructuredDocumentation","src":"2933:210:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":1929,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:10","nodeType":"FunctionDefinition","parameters":{"id":1901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"a","nameLocation":"3173:1:10","nodeType":"VariableDeclaration","scope":1929,"src":"3165:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"b","nameLocation":"3184:1:10","nodeType":"VariableDeclaration","scope":1929,"src":"3176:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:10"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1929,"src":"3210:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:10"},"scope":2721,"src":"3148:331:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2054,"nodeType":"Block","src":"3901:4018:10","statements":[{"id":2053,"nodeType":"UncheckedBlock","src":"3911:4002:10","statements":[{"assignments":[1942],"declarations":[{"constant":false,"id":1942,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:10","nodeType":"VariableDeclaration","scope":2053,"src":"4232:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1946,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1943,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"4248:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1944,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"4252:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:10"},{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:10","nodeType":"VariableDeclaration","scope":2053,"src":"4312:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1949,"nodeType":"VariableDeclarationStatement","src":"4312:13:10"},{"AST":{"nodeType":"YulBlock","src":"4392:122:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:10"},"nodeType":"YulFunctionCall","src":"4433:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:10"},"nodeType":"YulFunctionCall","src":"4420:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:10","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:10"},"nodeType":"YulFunctionCall","src":"4470:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:10"},"nodeType":"YulFunctionCall","src":"4486:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:10"},"nodeType":"YulFunctionCall","src":"4466:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1942,"isOffset":false,"isSlot":false,"src":"4478:5:10","valueSize":1},{"declaration":1942,"isOffset":false,"isSlot":false,"src":"4493:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"4457:5:10","valueSize":1},{"declaration":1932,"isOffset":false,"isSlot":false,"src":"4427:1:10","valueSize":1},{"declaration":1934,"isOffset":false,"isSlot":false,"src":"4430:1:10","valueSize":1}],"id":1950,"nodeType":"InlineAssembly","src":"4383:131:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1951,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"4595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1959,"nodeType":"IfStatement","src":"4591:368:10","trueBody":{"id":1958,"nodeType":"Block","src":"4607:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1954,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"4925:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1955,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"4933:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1940,"id":1957,"nodeType":"Return","src":"4918:26:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1960,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"5065:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1961,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5080:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1967,"nodeType":"IfStatement","src":"5061:88:10","trueBody":{"id":1966,"nodeType":"Block","src":"5087:62:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1963,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"5112:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1965,"nodeType":"RevertStatement","src":"5105:29:10"}]}},{"assignments":[1969],"declarations":[{"constant":false,"id":1969,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:10","nodeType":"VariableDeclaration","scope":2053,"src":"5404:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1970,"nodeType":"VariableDeclarationStatement","src":"5404:17:10"},{"AST":{"nodeType":"YulBlock","src":"5444:291:10","statements":[{"nodeType":"YulAssignment","src":"5513:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:10"},"nodeType":"YulFunctionCall","src":"5526:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:10"}]},{"nodeType":"YulAssignment","src":"5633:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:10"},"nodeType":"YulFunctionCall","src":"5653:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:10"},"nodeType":"YulFunctionCall","src":"5642:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:10"}]},{"nodeType":"YulAssignment","src":"5691:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:10"},"nodeType":"YulFunctionCall","src":"5700:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1936,"isOffset":false,"isSlot":false,"src":"5539:11:10","valueSize":1},{"declaration":1942,"isOffset":false,"isSlot":false,"src":"5667:5:10","valueSize":1},{"declaration":1942,"isOffset":false,"isSlot":false,"src":"5691:5:10","valueSize":1},{"declaration":1942,"isOffset":false,"isSlot":false,"src":"5704:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"5633:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"5646:5:10","valueSize":1},{"declaration":1969,"isOffset":false,"isSlot":false,"src":"5513:9:10","valueSize":1},{"declaration":1969,"isOffset":false,"isSlot":false,"src":"5656:9:10","valueSize":1},{"declaration":1969,"isOffset":false,"isSlot":false,"src":"5711:9:10","valueSize":1},{"declaration":1932,"isOffset":false,"isSlot":false,"src":"5533:1:10","valueSize":1},{"declaration":1934,"isOffset":false,"isSlot":false,"src":"5536:1:10","valueSize":1}],"id":1971,"nodeType":"InlineAssembly","src":"5435:300:10"},{"assignments":[1973],"declarations":[{"constant":false,"id":1973,"mutability":"mutable","name":"twos","nameLocation":"5947:4:10","nodeType":"VariableDeclaration","scope":2053,"src":"5939:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1972,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1980,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"5954:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":1975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1976,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"5973:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:10"},{"AST":{"nodeType":"YulBlock","src":"6008:362:10","statements":[{"nodeType":"YulAssignment","src":"6073:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:10"},"nodeType":"YulFunctionCall","src":"6088:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:10"}]},{"nodeType":"YulAssignment","src":"6177:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:10"},"nodeType":"YulFunctionCall","src":"6186:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:10"}]},{"nodeType":"YulAssignment","src":"6317:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:10"},"nodeType":"YulFunctionCall","src":"6333:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:10"},"nodeType":"YulFunctionCall","src":"6329:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:10"},"nodeType":"YulFunctionCall","src":"6325:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1936,"isOffset":false,"isSlot":false,"src":"6073:11:10","valueSize":1},{"declaration":1936,"isOffset":false,"isSlot":false,"src":"6092:11:10","valueSize":1},{"declaration":1942,"isOffset":false,"isSlot":false,"src":"6177:5:10","valueSize":1},{"declaration":1942,"isOffset":false,"isSlot":false,"src":"6190:5:10","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"6105:4:10","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"6197:4:10","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"6317:4:10","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"6340:4:10","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"6347:4:10","valueSize":1}],"id":1981,"nodeType":"InlineAssembly","src":"5999:371:10"},{"expression":{"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1982,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"6436:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1983,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"6445:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1984,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"6453:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1987,"nodeType":"ExpressionStatement","src":"6436:21:10"},{"assignments":[1989],"declarations":[{"constant":false,"id":1989,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:10","nodeType":"VariableDeclaration","scope":2053,"src":"6775:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1988,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1996,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1991,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"6798:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:10"},{"expression":{"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1997,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7031:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1999,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"7046:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2000,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7060:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2004,"nodeType":"ExpressionStatement","src":"7031:36:10"},{"expression":{"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2005,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7100:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2007,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"7115:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2008,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7129:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"7100:36:10"},{"expression":{"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2013,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7170:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"7185:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2016,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7199:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2020,"nodeType":"ExpressionStatement","src":"7170:36:10"},{"expression":{"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2021,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7240:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"7255:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2024,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7269:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"nodeType":"ExpressionStatement","src":"7240:36:10"},{"expression":{"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2029,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7310:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2031,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"7325:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2032,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7339:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2036,"nodeType":"ExpressionStatement","src":"7310:36:10"},{"expression":{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2037,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7381:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"7396:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2040,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7410:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2044,"nodeType":"ExpressionStatement","src":"7381:36:10"},{"expression":{"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"7851:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2046,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"7860:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2047,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7868:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2050,"nodeType":"ExpressionStatement","src":"7851:24:10"},{"expression":{"id":2051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"7896:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1940,"id":2052,"nodeType":"Return","src":"7889:13:10"}]}]},"documentation":{"id":1930,"nodeType":"StructuredDocumentation","src":"3485:313:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2055,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:10","nodeType":"FunctionDefinition","parameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1932,"mutability":"mutable","name":"x","nameLocation":"3827:1:10","nodeType":"VariableDeclaration","scope":2055,"src":"3819:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1934,"mutability":"mutable","name":"y","nameLocation":"3838:1:10","nodeType":"VariableDeclaration","scope":2055,"src":"3830:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1933,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:10","nodeType":"VariableDeclaration","scope":2055,"src":"3841:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1935,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:10"},"returnParameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"result","nameLocation":"3893:6:10","nodeType":"VariableDeclaration","scope":2055,"src":"3885:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:10"},"scope":2721,"src":"3803:4116:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2097,"nodeType":"Block","src":"8161:192:10","statements":[{"assignments":[2071],"declarations":[{"constant":false,"id":2071,"mutability":"mutable","name":"result","nameLocation":"8179:6:10","nodeType":"VariableDeclaration","scope":2097,"src":"8171:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2070,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2077,"initialValue":{"arguments":[{"id":2073,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"8195:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2074,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8198:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2075,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"8201:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2072,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2055,2098],"referencedDeclaration":2055,"src":"8188:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2079,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"8244:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}],"id":2078,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"8227:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1678_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2082,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"8264:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2083,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8267:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2084,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"8270:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2081,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2094,"nodeType":"IfStatement","src":"8223:101:10","trueBody":{"id":2093,"nodeType":"Block","src":"8288:36:10","statements":[{"expression":{"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"8302:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2092,"nodeType":"ExpressionStatement","src":"8302:11:10"}]}},{"expression":{"id":2095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"8340:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2069,"id":2096,"nodeType":"Return","src":"8333:13:10"}]},"documentation":{"id":2056,"nodeType":"StructuredDocumentation","src":"7925:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2098,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:10","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"x","nameLocation":"8075:1:10","nodeType":"VariableDeclaration","scope":2098,"src":"8067:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"y","nameLocation":"8086:1:10","nodeType":"VariableDeclaration","scope":2098,"src":"8078:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2062,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:10","nodeType":"VariableDeclaration","scope":2098,"src":"8089:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:10","nodeType":"VariableDeclaration","scope":2098,"src":"8110:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"},"typeName":{"id":2064,"nodeType":"UserDefinedTypeName","pathNode":{"id":2063,"name":"Rounding","nameLocations":["8110:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1678,"src":"8110:8:10"},"referencedDeclaration":1678,"src":"8110:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:10"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2098,"src":"8152:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:10"},"scope":2721,"src":"8051:302:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2209,"nodeType":"Block","src":"8644:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"8658:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2112,"nodeType":"IfStatement","src":"8654:45:10","trueBody":{"id":2111,"nodeType":"Block","src":"8666:33:10","statements":[{"expression":{"hexValue":"30","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2105,"id":2110,"nodeType":"Return","src":"8680:8:10"}]}},{"assignments":[2114],"declarations":[{"constant":false,"id":2114,"mutability":"mutable","name":"result","nameLocation":"9386:6:10","nodeType":"VariableDeclaration","scope":2209,"src":"9378:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2123,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2117,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"9406:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2116,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2377,2412],"referencedDeclaration":2377,"src":"9401:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2121,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:10"},{"id":2208,"nodeType":"UncheckedBlock","src":"9815:408:10","statements":[{"expression":{"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9839:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2126,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"9858:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2127,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9862:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2130,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2134,"nodeType":"ExpressionStatement","src":"9839:35:10"},{"expression":{"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2135,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9888:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"9907:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9911:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2141,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2145,"nodeType":"ExpressionStatement","src":"9888:35:10"},{"expression":{"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2146,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9937:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9947:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"9956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9960:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2152,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2156,"nodeType":"ExpressionStatement","src":"9937:35:10"},{"expression":{"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2157,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9986:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"9996:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"10005:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10009:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2167,"nodeType":"ExpressionStatement","src":"9986:35:10"},{"expression":{"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2168,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10035:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10045:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"10054:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10058:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2178,"nodeType":"ExpressionStatement","src":"10035:35:10"},{"expression":{"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2179,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10084:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10094:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"10103:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10107:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2189,"nodeType":"ExpressionStatement","src":"10084:35:10"},{"expression":{"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2190,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10133:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10143:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"10152:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10156:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2200,"nodeType":"ExpressionStatement","src":"10133:35:10"},{"expression":{"arguments":[{"id":2202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10193:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"10201:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"10205:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2201,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"10189:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2105,"id":2207,"nodeType":"Return","src":"10182:30:10"}]}]},"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"8359:223:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2210,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:10","nodeType":"FunctionDefinition","parameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"a","nameLocation":"8609:1:10","nodeType":"VariableDeclaration","scope":2210,"src":"8601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:10"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2210,"src":"8635:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:10"},"scope":2721,"src":"8587:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2244,"nodeType":"Block","src":"10405:164:10","statements":[{"id":2243,"nodeType":"UncheckedBlock","src":"10415:148:10","statements":[{"assignments":[2222],"declarations":[{"constant":false,"id":2222,"mutability":"mutable","name":"result","nameLocation":"10447:6:10","nodeType":"VariableDeclaration","scope":2243,"src":"10439:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2226,"initialValue":{"arguments":[{"id":2224,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"10461:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2223,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2210,2245],"referencedDeclaration":2210,"src":"10456:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2229,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"10511:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}],"id":2228,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"10494:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1678_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2231,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2232,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10533:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2234,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"10542:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:10","trueExpression":{"hexValue":"31","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2220,"id":2242,"nodeType":"Return","src":"10477:75:10"}]}]},"documentation":{"id":2211,"nodeType":"StructuredDocumentation","src":"10235:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2245,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:10","nodeType":"FunctionDefinition","parameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2213,"mutability":"mutable","name":"a","nameLocation":"10351:1:10","nodeType":"VariableDeclaration","scope":2245,"src":"10343:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2212,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2216,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:10","nodeType":"VariableDeclaration","scope":2245,"src":"10354:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"},"typeName":{"id":2215,"nodeType":"UserDefinedTypeName","pathNode":{"id":2214,"name":"Rounding","nameLocations":["10354:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1678,"src":"10354:8:10"},"referencedDeclaration":1678,"src":"10354:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:10"},"returnParameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2245,"src":"10396:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2218,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:10"},"scope":2721,"src":"10329:240:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2376,"nodeType":"Block","src":"10760:922:10","statements":[{"assignments":[2254],"declarations":[{"constant":false,"id":2254,"mutability":"mutable","name":"result","nameLocation":"10778:6:10","nodeType":"VariableDeclaration","scope":2376,"src":"10770:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2253,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2256,"initialValue":{"hexValue":"30","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:10"},{"id":2373,"nodeType":"UncheckedBlock","src":"10798:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"10826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2271,"nodeType":"IfStatement","src":"10822:99:10","trueBody":{"id":2270,"nodeType":"Block","src":"10844:77:10","statements":[{"expression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"10862:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2265,"nodeType":"ExpressionStatement","src":"10862:13:10"},{"expression":{"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"10893:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2269,"nodeType":"ExpressionStatement","src":"10893:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"10938:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2286,"nodeType":"IfStatement","src":"10934:96:10","trueBody":{"id":2285,"nodeType":"Block","src":"10955:75:10","statements":[{"expression":{"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2277,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"10973:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2280,"nodeType":"ExpressionStatement","src":"10973:12:10"},{"expression":{"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11003:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2284,"nodeType":"ExpressionStatement","src":"11003:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11047:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2301,"nodeType":"IfStatement","src":"11043:96:10","trueBody":{"id":2300,"nodeType":"Block","src":"11064:75:10","statements":[{"expression":{"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11082:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2295,"nodeType":"ExpressionStatement","src":"11082:12:10"},{"expression":{"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2296,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11112:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2299,"nodeType":"ExpressionStatement","src":"11112:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11156:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2316,"nodeType":"IfStatement","src":"11152:96:10","trueBody":{"id":2315,"nodeType":"Block","src":"11173:75:10","statements":[{"expression":{"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11191:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2310,"nodeType":"ExpressionStatement","src":"11191:12:10"},{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11221:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2314,"nodeType":"ExpressionStatement","src":"11221:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11265:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2331,"nodeType":"IfStatement","src":"11261:93:10","trueBody":{"id":2330,"nodeType":"Block","src":"11281:73:10","statements":[{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11299:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"11299:11:10"},{"expression":{"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11328:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2329,"nodeType":"ExpressionStatement","src":"11328:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11371:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2346,"nodeType":"IfStatement","src":"11367:93:10","trueBody":{"id":2345,"nodeType":"Block","src":"11387:73:10","statements":[{"expression":{"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11405:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2340,"nodeType":"ExpressionStatement","src":"11405:11:10"},{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11434:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"11434:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11477:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2361,"nodeType":"IfStatement","src":"11473:93:10","trueBody":{"id":2360,"nodeType":"Block","src":"11493:73:10","statements":[{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11511:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"11511:11:10"},{"expression":{"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11540:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2359,"nodeType":"ExpressionStatement","src":"11540:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"11583:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2372,"nodeType":"IfStatement","src":"11579:64:10","trueBody":{"id":2371,"nodeType":"Block","src":"11599:44:10","statements":[{"expression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2367,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11617:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2370,"nodeType":"ExpressionStatement","src":"11617:11:10"}]}}]},{"expression":{"id":2374,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"11669:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2252,"id":2375,"nodeType":"Return","src":"11662:13:10"}]},"documentation":{"id":2246,"nodeType":"StructuredDocumentation","src":"10575:119:10","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2377,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:10","nodeType":"FunctionDefinition","parameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2248,"mutability":"mutable","name":"value","nameLocation":"10721:5:10","nodeType":"VariableDeclaration","scope":2377,"src":"10713:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:10"},"returnParameters":{"id":2252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2377,"src":"10751:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2250,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:10"},"scope":2721,"src":"10699:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2411,"nodeType":"Block","src":"11915:168:10","statements":[{"id":2410,"nodeType":"UncheckedBlock","src":"11925:152:10","statements":[{"assignments":[2389],"declarations":[{"constant":false,"id":2389,"mutability":"mutable","name":"result","nameLocation":"11957:6:10","nodeType":"VariableDeclaration","scope":2410,"src":"11949:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2388,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2393,"initialValue":{"arguments":[{"id":2391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"11971:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2390,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2377,2412],"referencedDeclaration":2377,"src":"11966:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"11998:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2396,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"12025:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}],"id":2395,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"12008:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1678_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"12043:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"12052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:10","trueExpression":{"hexValue":"31","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2407,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2387,"id":2409,"nodeType":"Return","src":"11991:75:10"}]}]},"documentation":{"id":2378,"nodeType":"StructuredDocumentation","src":"11688:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2412,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:10","nodeType":"FunctionDefinition","parameters":{"id":2384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2380,"mutability":"mutable","name":"value","nameLocation":"11857:5:10","nodeType":"VariableDeclaration","scope":2412,"src":"11849:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2379,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2383,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:10","nodeType":"VariableDeclaration","scope":2412,"src":"11864:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"},"typeName":{"id":2382,"nodeType":"UserDefinedTypeName","pathNode":{"id":2381,"name":"Rounding","nameLocations":["11864:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1678,"src":"11864:8:10"},"referencedDeclaration":1678,"src":"11864:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:10"},"returnParameters":{"id":2387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2412,"src":"11906:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2385,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:10"},"scope":2721,"src":"11835:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2540,"nodeType":"Block","src":"12276:854:10","statements":[{"assignments":[2421],"declarations":[{"constant":false,"id":2421,"mutability":"mutable","name":"result","nameLocation":"12294:6:10","nodeType":"VariableDeclaration","scope":2540,"src":"12286:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2420,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2423,"initialValue":{"hexValue":"30","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:10"},{"id":2537,"nodeType":"UncheckedBlock","src":"12314:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12342:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2440,"nodeType":"IfStatement","src":"12338:103:10","trueBody":{"id":2439,"nodeType":"Block","src":"12361:80:10","statements":[{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12379:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"12379:17:10"},{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"12414:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12458:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2457,"nodeType":"IfStatement","src":"12454:103:10","trueBody":{"id":2456,"nodeType":"Block","src":"12477:80:10","statements":[{"expression":{"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12495:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2451,"nodeType":"ExpressionStatement","src":"12495:17:10"},{"expression":{"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2452,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"12530:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2455,"nodeType":"ExpressionStatement","src":"12530:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12574:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2474,"nodeType":"IfStatement","src":"12570:103:10","trueBody":{"id":2473,"nodeType":"Block","src":"12593:80:10","statements":[{"expression":{"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12611:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2468,"nodeType":"ExpressionStatement","src":"12611:17:10"},{"expression":{"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"12646:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2472,"nodeType":"ExpressionStatement","src":"12646:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12690:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2491,"nodeType":"IfStatement","src":"12686:100:10","trueBody":{"id":2490,"nodeType":"Block","src":"12708:78:10","statements":[{"expression":{"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12726:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2485,"nodeType":"ExpressionStatement","src":"12726:16:10"},{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"12760:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"12760:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12803:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2508,"nodeType":"IfStatement","src":"12799:100:10","trueBody":{"id":2507,"nodeType":"Block","src":"12821:78:10","statements":[{"expression":{"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12839:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2502,"nodeType":"ExpressionStatement","src":"12839:16:10"},{"expression":{"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"12873:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2506,"nodeType":"ExpressionStatement","src":"12873:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2525,"nodeType":"IfStatement","src":"12912:100:10","trueBody":{"id":2524,"nodeType":"Block","src":"12934:78:10","statements":[{"expression":{"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"12952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2519,"nodeType":"ExpressionStatement","src":"12952:16:10"},{"expression":{"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2520,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"12986:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2523,"nodeType":"ExpressionStatement","src":"12986:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"13029:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2536,"nodeType":"IfStatement","src":"13025:66:10","trueBody":{"id":2535,"nodeType":"Block","src":"13047:44:10","statements":[{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2531,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"13065:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2534,"nodeType":"ExpressionStatement","src":"13065:11:10"}]}}]},{"expression":{"id":2538,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"13117:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2419,"id":2539,"nodeType":"Return","src":"13110:13:10"}]},"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"12089:120:10","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2541,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:10","nodeType":"FunctionDefinition","parameters":{"id":2416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"value","nameLocation":"12237:5:10","nodeType":"VariableDeclaration","scope":2541,"src":"12229:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2414,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:10"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2541,"src":"12267:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:10"},"scope":2721,"src":"12214:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2575,"nodeType":"Block","src":"13365:170:10","statements":[{"id":2574,"nodeType":"UncheckedBlock","src":"13375:154:10","statements":[{"assignments":[2553],"declarations":[{"constant":false,"id":2553,"mutability":"mutable","name":"result","nameLocation":"13407:6:10","nodeType":"VariableDeclaration","scope":2574,"src":"13399:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2552,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2557,"initialValue":{"arguments":[{"id":2555,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"13422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2554,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2541,2576],"referencedDeclaration":2541,"src":"13416:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2558,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"13449:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2560,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"13476:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}],"id":2559,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"13459:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1678_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2563,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"13495:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"13504:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:10","trueExpression":{"hexValue":"31","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2571,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2551,"id":2573,"nodeType":"Return","src":"13442:76:10"}]}]},"documentation":{"id":2542,"nodeType":"StructuredDocumentation","src":"13136:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2576,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:10","nodeType":"FunctionDefinition","parameters":{"id":2548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2544,"mutability":"mutable","name":"value","nameLocation":"13307:5:10","nodeType":"VariableDeclaration","scope":2576,"src":"13299:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2547,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:10","nodeType":"VariableDeclaration","scope":2576,"src":"13314:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"},"typeName":{"id":2546,"nodeType":"UserDefinedTypeName","pathNode":{"id":2545,"name":"Rounding","nameLocations":["13314:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1678,"src":"13314:8:10"},"referencedDeclaration":1678,"src":"13314:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:10"},"returnParameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2576,"src":"13356:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:10"},"scope":2721,"src":"13284:251:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2662,"nodeType":"Block","src":"13855:600:10","statements":[{"assignments":[2585],"declarations":[{"constant":false,"id":2585,"mutability":"mutable","name":"result","nameLocation":"13873:6:10","nodeType":"VariableDeclaration","scope":2662,"src":"13865:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2584,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2587,"initialValue":{"hexValue":"30","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:10"},{"id":2659,"nodeType":"UncheckedBlock","src":"13893:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"13921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2602,"nodeType":"IfStatement","src":"13917:98:10","trueBody":{"id":2601,"nodeType":"Block","src":"13939:76:10","statements":[{"expression":{"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"13957:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2596,"nodeType":"ExpressionStatement","src":"13957:13:10"},{"expression":{"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2597,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"13988:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2600,"nodeType":"ExpressionStatement","src":"13988:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14032:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2617,"nodeType":"IfStatement","src":"14028:95:10","trueBody":{"id":2616,"nodeType":"Block","src":"14049:74:10","statements":[{"expression":{"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2611,"nodeType":"ExpressionStatement","src":"14067:12:10"},{"expression":{"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2612,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2615,"nodeType":"ExpressionStatement","src":"14097:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14140:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2632,"nodeType":"IfStatement","src":"14136:95:10","trueBody":{"id":2631,"nodeType":"Block","src":"14157:74:10","statements":[{"expression":{"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2626,"nodeType":"ExpressionStatement","src":"14175:12:10"},{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2627,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14205:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"14205:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14248:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2647,"nodeType":"IfStatement","src":"14244:95:10","trueBody":{"id":2646,"nodeType":"Block","src":"14265:74:10","statements":[{"expression":{"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2641,"nodeType":"ExpressionStatement","src":"14283:12:10"},{"expression":{"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2642,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14313:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2645,"nodeType":"ExpressionStatement","src":"14313:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"14356:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2658,"nodeType":"IfStatement","src":"14352:64:10","trueBody":{"id":2657,"nodeType":"Block","src":"14372:44:10","statements":[{"expression":{"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2653,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14390:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2656,"nodeType":"ExpressionStatement","src":"14390:11:10"}]}}]},{"expression":{"id":2660,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"14442:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2583,"id":2661,"nodeType":"Return","src":"14435:13:10"}]},"documentation":{"id":2577,"nodeType":"StructuredDocumentation","src":"13541:246:10","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2663,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:10","nodeType":"FunctionDefinition","parameters":{"id":2580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"value","nameLocation":"13816:5:10","nodeType":"VariableDeclaration","scope":2663,"src":"13808:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:10"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2663,"src":"13846:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2581,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:10"},"scope":2721,"src":"13792:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2700,"nodeType":"Block","src":"14692:177:10","statements":[{"id":2699,"nodeType":"UncheckedBlock","src":"14702:161:10","statements":[{"assignments":[2675],"declarations":[{"constant":false,"id":2675,"mutability":"mutable","name":"result","nameLocation":"14734:6:10","nodeType":"VariableDeclaration","scope":2699,"src":"14726:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2674,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2679,"initialValue":{"arguments":[{"id":2677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"14750:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2676,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2663,2701],"referencedDeclaration":2663,"src":"14743:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"14777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2682,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"14804:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}],"id":2681,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"14787:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1678_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"14823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2688,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"14838:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:10","trueExpression":{"hexValue":"31","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2696,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2673,"id":2698,"nodeType":"Return","src":"14770:82:10"}]}]},"documentation":{"id":2664,"nodeType":"StructuredDocumentation","src":"14461:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2701,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:10","nodeType":"FunctionDefinition","parameters":{"id":2670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2666,"mutability":"mutable","name":"value","nameLocation":"14634:5:10","nodeType":"VariableDeclaration","scope":2701,"src":"14626:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2665,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2669,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:10","nodeType":"VariableDeclaration","scope":2701,"src":"14641:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"},"typeName":{"id":2668,"nodeType":"UserDefinedTypeName","pathNode":{"id":2667,"name":"Rounding","nameLocations":["14641:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1678,"src":"14641:8:10"},"referencedDeclaration":1678,"src":"14641:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:10"},"returnParameters":{"id":2673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2701,"src":"14683:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2671,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:10"},"scope":2721,"src":"14610:259:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2719,"nodeType":"Block","src":"15067:48:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2712,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"15090:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}],"id":2711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2710,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:10","typeDescriptions":{}}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2709,"id":2718,"nodeType":"Return","src":"15077:31:10"}]},"documentation":{"id":2702,"nodeType":"StructuredDocumentation","src":"14875:113:10","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":2720,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:10","nodeType":"FunctionDefinition","parameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:10","nodeType":"VariableDeclaration","scope":2720,"src":"15019:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"},"typeName":{"id":2704,"nodeType":"UserDefinedTypeName","pathNode":{"id":2703,"name":"Rounding","nameLocations":["15019:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1678,"src":"15019:8:10"},"referencedDeclaration":1678,"src":"15019:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1678","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:10"},"returnParameters":{"id":2709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2720,"src":"15061:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2707,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:10"},"scope":2721,"src":"14993:122:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2722,"src":"203:14914:10","usedErrors":[1673],"usedEvents":[]}],"src":"103:15015:10"},"id":10},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[2826]},"id":2827,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2723,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2724,"nodeType":"StructuredDocumentation","src":"135:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2826,"linearizedBaseContracts":[2826],"name":"SignedMath","nameLocation":"224:10:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2741,"nodeType":"Block","src":"376:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2734,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"393:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2735,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"397:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"405:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:11","trueExpression":{"id":2737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"401:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2733,"id":2740,"nodeType":"Return","src":"386:20:11"}]},"documentation":{"id":2725,"nodeType":"StructuredDocumentation","src":"241:66:11","text":" @dev Returns the largest of two signed numbers."},"id":2742,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:11","nodeType":"FunctionDefinition","parameters":{"id":2730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"a","nameLocation":"332:1:11","nodeType":"VariableDeclaration","scope":2742,"src":"325:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2726,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2729,"mutability":"mutable","name":"b","nameLocation":"342:1:11","nodeType":"VariableDeclaration","scope":2742,"src":"335:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2728,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:11"},"returnParameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2742,"src":"368:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2731,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:11"},"scope":2826,"src":"312:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2759,"nodeType":"Block","src":"555:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"572:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2753,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"576:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2756,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"584:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:11","trueExpression":{"id":2755,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"580:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2751,"id":2758,"nodeType":"Return","src":"565:20:11"}]},"documentation":{"id":2743,"nodeType":"StructuredDocumentation","src":"419:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":2760,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:11","nodeType":"FunctionDefinition","parameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2745,"mutability":"mutable","name":"a","nameLocation":"511:1:11","nodeType":"VariableDeclaration","scope":2760,"src":"504:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2744,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2747,"mutability":"mutable","name":"b","nameLocation":"521:1:11","nodeType":"VariableDeclaration","scope":2760,"src":"514:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2746,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:11"},"returnParameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2760,"src":"547:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2749,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:11"},"scope":2826,"src":"491:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2803,"nodeType":"Block","src":"797:162:11","statements":[{"assignments":[2771],"declarations":[{"constant":false,"id":2771,"mutability":"mutable","name":"x","nameLocation":"866:1:11","nodeType":"VariableDeclaration","scope":2803,"src":"859:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2770,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2784,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2772,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"871:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2773,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"875:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2775,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2776,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"882:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2777,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"886:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2779,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2782,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2785,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"911:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2790,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"931:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:11","typeDescriptions":{}}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2786,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:11","typeDescriptions":{}}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2795,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"945:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2796,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"949:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2798,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2800,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2769,"id":2802,"nodeType":"Return","src":"904:48:11"}]},"documentation":{"id":2761,"nodeType":"StructuredDocumentation","src":"598:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2804,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:11","nodeType":"FunctionDefinition","parameters":{"id":2766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"a","nameLocation":"753:1:11","nodeType":"VariableDeclaration","scope":2804,"src":"746:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2762,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"b","nameLocation":"763:1:11","nodeType":"VariableDeclaration","scope":2804,"src":"756:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2764,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:11"},"returnParameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2804,"src":"789:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2767,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:11"},"scope":2826,"src":"729:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2824,"nodeType":"Block","src":"1103:158:11","statements":[{"id":2823,"nodeType":"UncheckedBlock","src":"1113:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2814,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"1228:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:11","subExpression":{"id":2818,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"1242:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:11","trueExpression":{"id":2817,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"1237:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2812,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:11","typeDescriptions":{}}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2811,"id":2822,"nodeType":"Return","src":"1213:31:11"}]}]},"documentation":{"id":2805,"nodeType":"StructuredDocumentation","src":"965:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2825,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:11","nodeType":"FunctionDefinition","parameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"n","nameLocation":"1068:1:11","nodeType":"VariableDeclaration","scope":2825,"src":"1061:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2806,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:11"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2825,"src":"1094:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2809,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:11"},"scope":2826,"src":"1048:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2827,"src":"216:1047:11","usedErrors":[],"usedEvents":[]}],"src":"109:1155:11"},"id":11},"base64-sol/base64.sol":{"ast":{"absolutePath":"base64-sol/base64.sol","exportedSymbols":{"Base64":[2941]},"id":2942,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2828,"literals":["solidity",">=","0.6",".0"],"nodeType":"PragmaDirective","src":"33:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"Base64","contractDependencies":[],"contractKind":"library","documentation":{"id":2829,"nodeType":"StructuredDocumentation","src":"59:127:12","text":"@title Base64\n @author Brecht Devos - <brecht@loopring.org>\n @notice Provides functions for encoding/decoding base64"},"fullyImplemented":true,"id":2941,"linearizedBaseContracts":[2941],"name":"Base64","nameLocation":"194:6:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2832,"mutability":"constant","name":"TABLE_ENCODE","nameLocation":"232:12:12","nodeType":"VariableDeclaration","scope":2941,"src":"207:106:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2830,"name":"string","nodeType":"ElementaryTypeName","src":"207:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"247:66:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce","typeString":"literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""},"value":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"},"visibility":"internal"},{"constant":true,"id":2835,"mutability":"constant","name":"TABLE_DECODE","nameLocation":"344:12:12","nodeType":"VariableDeclaration","scope":2941,"src":"319:451:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2833,"name":"bytes","nodeType":"ElementaryTypeName","src":"319:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f101112131415161718190000000000001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"359:411:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cbed483d4f9f83dd52b06773fd58dd8723113252a85374752ef109e22dfa50f9","typeString":"literal_string hex\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f101112131415161718190000000000001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\""},"value":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000?456789:;<=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123\u0000\u0000\u0000\u0000\u0000"},"visibility":"internal"},{"body":{"id":2878,"nodeType":"Block","src":"850:1788:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2842,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"864:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"869:6:12","memberName":"length","nodeType":"MemberAccess","src":"864:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"879:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"864:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2848,"nodeType":"IfStatement","src":"860:31:12","trueBody":{"expression":{"hexValue":"","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"889:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2841,"id":2847,"nodeType":"Return","src":"882:9:12"}},{"assignments":[2850],"declarations":[{"constant":false,"id":2850,"mutability":"mutable","name":"table","nameLocation":"954:5:12","nodeType":"VariableDeclaration","scope":2878,"src":"940:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2849,"name":"string","nodeType":"ElementaryTypeName","src":"940:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2852,"initialValue":{"id":2851,"name":"TABLE_ENCODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"962:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"940:34:12"},{"assignments":[2854],"declarations":[{"constant":false,"id":2854,"mutability":"mutable","name":"encodedLen","nameLocation":"1031:10:12","nodeType":"VariableDeclaration","scope":2878,"src":"1023:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2853,"name":"uint256","nodeType":"ElementaryTypeName","src":"1023:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2865,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2856,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"1050:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1055:6:12","memberName":"length","nodeType":"MemberAccess","src":"1050:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1064:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1050:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2860,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1049:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1069:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"1049:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2863,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1048:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1044:27:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1023:48:12"},{"assignments":[2867],"declarations":[{"constant":false,"id":2867,"mutability":"mutable","name":"result","nameLocation":"1165:6:12","nodeType":"VariableDeclaration","scope":2878,"src":"1151:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2866,"name":"string","nodeType":"ElementaryTypeName","src":"1151:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2874,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2870,"name":"encodedLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"1185:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1198:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1185:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1174:10:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2868,"name":"string","nodeType":"ElementaryTypeName","src":"1178:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1174:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1151:50:12"},{"AST":{"nodeType":"YulBlock","src":"1221:1387:12","statements":[{"expression":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1286:6:12"},{"name":"encodedLen","nodeType":"YulIdentifier","src":"1294:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1279:6:12"},"nodeType":"YulFunctionCall","src":"1279:26:12"},"nodeType":"YulExpressionStatement","src":"1279:26:12"},{"nodeType":"YulVariableDeclaration","src":"1359:29:12","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"1379:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"1386:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1375:3:12"},"nodeType":"YulFunctionCall","src":"1375:13:12"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"1363:8:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1427:19:12","value":{"name":"data","nodeType":"YulIdentifier","src":"1442:4:12"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"1431:7:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1459:39:12","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1477:7:12"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1492:4:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1486:5:12"},"nodeType":"YulFunctionCall","src":"1486:11:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1473:3:12"},"nodeType":"YulFunctionCall","src":"1473:25:12"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"1463:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1556:32:12","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1577:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1585:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1573:3:12"},"nodeType":"YulFunctionCall","src":"1573:15:12"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"1560:9:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1697:697:12","statements":[{"nodeType":"YulAssignment","src":"1747:26:12","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1762:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"1771:1:12","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1758:3:12"},"nodeType":"YulFunctionCall","src":"1758:15:12"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1747:7:12"}]},{"nodeType":"YulVariableDeclaration","src":"1790:27:12","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1809:7:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1803:5:12"},"nodeType":"YulFunctionCall","src":"1803:14:12"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"1794:5:12","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1881:9:12"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"1902:8:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1920:2:12","type":"","value":"18"},{"name":"input","nodeType":"YulIdentifier","src":"1924:5:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1916:3:12"},"nodeType":"YulFunctionCall","src":"1916:14:12"},{"kind":"number","nodeType":"YulLiteral","src":"1932:4:12","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1912:3:12"},"nodeType":"YulFunctionCall","src":"1912:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1898:3:12"},"nodeType":"YulFunctionCall","src":"1898:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1892:5:12"},"nodeType":"YulFunctionCall","src":"1892:47:12"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1873:7:12"},"nodeType":"YulFunctionCall","src":"1873:67:12"},"nodeType":"YulExpressionStatement","src":"1873:67:12"},{"nodeType":"YulAssignment","src":"1957:30:12","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1974:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1985:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1970:3:12"},"nodeType":"YulFunctionCall","src":"1970:17:12"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1957:9:12"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2012:9:12"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2033:8:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2051:2:12","type":"","value":"12"},{"name":"input","nodeType":"YulIdentifier","src":"2055:5:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2047:3:12"},"nodeType":"YulFunctionCall","src":"2047:14:12"},{"kind":"number","nodeType":"YulLiteral","src":"2063:4:12","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2043:3:12"},"nodeType":"YulFunctionCall","src":"2043:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2029:3:12"},"nodeType":"YulFunctionCall","src":"2029:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2023:5:12"},"nodeType":"YulFunctionCall","src":"2023:47:12"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2004:7:12"},"nodeType":"YulFunctionCall","src":"2004:67:12"},"nodeType":"YulExpressionStatement","src":"2004:67:12"},{"nodeType":"YulAssignment","src":"2088:30:12","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2105:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2116:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2101:3:12"},"nodeType":"YulFunctionCall","src":"2101:17:12"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2088:9:12"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2143:9:12"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2164:8:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2183:1:12","type":"","value":"6"},{"name":"input","nodeType":"YulIdentifier","src":"2186:5:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2178:3:12"},"nodeType":"YulFunctionCall","src":"2178:14:12"},{"kind":"number","nodeType":"YulLiteral","src":"2194:4:12","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2174:3:12"},"nodeType":"YulFunctionCall","src":"2174:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2160:3:12"},"nodeType":"YulFunctionCall","src":"2160:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2154:5:12"},"nodeType":"YulFunctionCall","src":"2154:47:12"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2135:7:12"},"nodeType":"YulFunctionCall","src":"2135:67:12"},"nodeType":"YulExpressionStatement","src":"2135:67:12"},{"nodeType":"YulAssignment","src":"2219:30:12","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2236:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2247:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2232:3:12"},"nodeType":"YulFunctionCall","src":"2232:17:12"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2219:9:12"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2274:9:12"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2295:8:12"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"2317:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"2325:4:12","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2305:3:12"},"nodeType":"YulFunctionCall","src":"2305:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2291:3:12"},"nodeType":"YulFunctionCall","src":"2291:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2285:5:12"},"nodeType":"YulFunctionCall","src":"2285:47:12"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2266:7:12"},"nodeType":"YulFunctionCall","src":"2266:67:12"},"nodeType":"YulExpressionStatement","src":"2266:67:12"},{"nodeType":"YulAssignment","src":"2350:30:12","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2367:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2363:3:12"},"nodeType":"YulFunctionCall","src":"2363:17:12"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2350:9:12"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1665:7:12"},{"name":"endPtr","nodeType":"YulIdentifier","src":"1674:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1662:2:12"},"nodeType":"YulFunctionCall","src":"1662:19:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1682:2:12","statements":[]},"pre":{"nodeType":"YulBlock","src":"1659:2:12","statements":[]},"src":"1655:739:12"},{"cases":[{"body":{"nodeType":"YulBlock","src":"2486:47:12","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2499:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2510:1:12","type":"","value":"2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2495:3:12"},"nodeType":"YulFunctionCall","src":"2495:17:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2518:3:12","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"2523:6:12","type":"","value":"0x3d3d"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2514:3:12"},"nodeType":"YulFunctionCall","src":"2514:16:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2488:6:12"},"nodeType":"YulFunctionCall","src":"2488:43:12"},"nodeType":"YulExpressionStatement","src":"2488:43:12"}]},"nodeType":"YulCase","src":"2479:54:12","value":{"kind":"number","nodeType":"YulLiteral","src":"2484:1:12","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2553:45:12","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2566:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2577:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2562:3:12"},"nodeType":"YulFunctionCall","src":"2562:17:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2585:3:12","type":"","value":"248"},{"kind":"number","nodeType":"YulLiteral","src":"2590:4:12","type":"","value":"0x3d"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2581:3:12"},"nodeType":"YulFunctionCall","src":"2581:14:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2555:6:12"},"nodeType":"YulFunctionCall","src":"2555:41:12"},"nodeType":"YulExpressionStatement","src":"2555:41:12"}]},"nodeType":"YulCase","src":"2546:52:12","value":{"kind":"number","nodeType":"YulLiteral","src":"2551:1:12","type":"","value":"2"}}],"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2457:4:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2451:5:12"},"nodeType":"YulFunctionCall","src":"2451:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"2464:1:12","type":"","value":"3"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"2447:3:12"},"nodeType":"YulFunctionCall","src":"2447:19:12"},"nodeType":"YulSwitch","src":"2440:158:12"}]},"evmVersion":"paris","externalReferences":[{"declaration":2837,"isOffset":false,"isSlot":false,"src":"1442:4:12","valueSize":1},{"declaration":2837,"isOffset":false,"isSlot":false,"src":"1492:4:12","valueSize":1},{"declaration":2837,"isOffset":false,"isSlot":false,"src":"2457:4:12","valueSize":1},{"declaration":2854,"isOffset":false,"isSlot":false,"src":"1294:10:12","valueSize":1},{"declaration":2867,"isOffset":false,"isSlot":false,"src":"1286:6:12","valueSize":1},{"declaration":2867,"isOffset":false,"isSlot":false,"src":"1577:6:12","valueSize":1},{"declaration":2850,"isOffset":false,"isSlot":false,"src":"1379:5:12","valueSize":1}],"id":2875,"nodeType":"InlineAssembly","src":"1212:1396:12"},{"expression":{"id":2876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"2625:6:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2841,"id":2877,"nodeType":"Return","src":"2618:13:12"}]},"id":2879,"implemented":true,"kind":"function","modifiers":[],"name":"encode","nameLocation":"786:6:12","nodeType":"FunctionDefinition","parameters":{"id":2838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"data","nameLocation":"806:4:12","nodeType":"VariableDeclaration","scope":2879,"src":"793:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2836,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:19:12"},"returnParameters":{"id":2841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2879,"src":"835:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2839,"name":"string","nodeType":"ElementaryTypeName","src":"835:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"834:15:12"},"scope":2941,"src":"777:1861:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2939,"nodeType":"Block","src":"2718:2104:12","statements":[{"assignments":[2887],"declarations":[{"constant":false,"id":2887,"mutability":"mutable","name":"data","nameLocation":"2741:4:12","nodeType":"VariableDeclaration","scope":2939,"src":"2728:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2886,"name":"bytes","nodeType":"ElementaryTypeName","src":"2728:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2892,"initialValue":{"arguments":[{"id":2890,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"2754:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2748:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2888,"name":"bytes","nodeType":"ElementaryTypeName","src":"2748:5:12","typeDescriptions":{}}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2748:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2728:32:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2893,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"2775:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2780:6:12","memberName":"length","nodeType":"MemberAccess","src":"2775:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2790:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2775:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2902,"nodeType":"IfStatement","src":"2771:41:12","trueBody":{"expression":{"arguments":[{"hexValue":"30","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2810:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2800:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2897,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2885,"id":2901,"nodeType":"Return","src":"2793:19:12"}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2904,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"2830:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2835:6:12","memberName":"length","nodeType":"MemberAccess","src":"2830:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"34","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2844:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2830:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2849:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2830:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420626173653634206465636f64657220696e707574","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2852:30:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b899645e29043a8d30000fb8ed0252b5c4f6f5f09672aefa374ee368d324bb89","typeString":"literal_string \"invalid base64 decoder input\""},"value":"invalid base64 decoder input"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b899645e29043a8d30000fb8ed0252b5c4f6f5f09672aefa374ee368d324bb89","typeString":"literal_string \"invalid base64 decoder input\""}],"id":2903,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2822:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2822:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2912,"nodeType":"ExpressionStatement","src":"2822:61:12"},{"assignments":[2914],"declarations":[{"constant":false,"id":2914,"mutability":"mutable","name":"table","nameLocation":"2945:5:12","nodeType":"VariableDeclaration","scope":2939,"src":"2932:18:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2913,"name":"bytes","nodeType":"ElementaryTypeName","src":"2932:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2916,"initialValue":{"id":2915,"name":"TABLE_DECODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"2953:12:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2932:33:12"},{"assignments":[2918],"declarations":[{"constant":false,"id":2918,"mutability":"mutable","name":"decodedLen","nameLocation":"3032:10:12","nodeType":"VariableDeclaration","scope":2939,"src":"3024:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2917,"name":"uint256","nodeType":"ElementaryTypeName","src":"3024:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2926,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2919,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"3046:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3051:6:12","memberName":"length","nodeType":"MemberAccess","src":"3046:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"34","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3060:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"3046:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2923,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3045:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"33","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3065:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"3045:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3024:42:12"},{"assignments":[2928],"declarations":[{"constant":false,"id":2928,"mutability":"mutable","name":"result","nameLocation":"3159:6:12","nodeType":"VariableDeclaration","scope":2939,"src":"3146:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2927,"name":"bytes","nodeType":"ElementaryTypeName","src":"3146:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2935,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2931,"name":"decodedLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"3178:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3191:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3178:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3168:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2929,"name":"bytes","nodeType":"ElementaryTypeName","src":"3172:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3146:48:12"},{"AST":{"nodeType":"YulBlock","src":"3214:1578:12","statements":[{"nodeType":"YulVariableDeclaration","src":"3260:46:12","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3287:4:12"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3299:4:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3293:5:12"},"nodeType":"YulFunctionCall","src":"3293:11:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3283:3:12"},"nodeType":"YulFunctionCall","src":"3283:22:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3277:5:12"},"nodeType":"YulFunctionCall","src":"3277:29:12"},"variables":[{"name":"lastBytes","nodeType":"YulTypedName","src":"3264:9:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"3353:191:12","statements":[{"nodeType":"YulAssignment","src":"3371:32:12","value":{"arguments":[{"name":"decodedLen","nodeType":"YulIdentifier","src":"3389:10:12"},{"kind":"number","nodeType":"YulLiteral","src":"3401:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3385:3:12"},"nodeType":"YulFunctionCall","src":"3385:18:12"},"variableNames":[{"name":"decodedLen","nodeType":"YulIdentifier","src":"3371:10:12"}]},{"body":{"nodeType":"YulBlock","src":"3458:72:12","statements":[{"nodeType":"YulAssignment","src":"3480:32:12","value":{"arguments":[{"name":"decodedLen","nodeType":"YulIdentifier","src":"3498:10:12"},{"kind":"number","nodeType":"YulLiteral","src":"3510:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3494:3:12"},"nodeType":"YulFunctionCall","src":"3494:18:12"},"variableNames":[{"name":"decodedLen","nodeType":"YulIdentifier","src":"3480:10:12"}]}]},"condition":{"arguments":[{"arguments":[{"name":"lastBytes","nodeType":"YulIdentifier","src":"3430:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"3441:6:12","type":"","value":"0xFFFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3426:3:12"},"nodeType":"YulFunctionCall","src":"3426:22:12"},{"kind":"number","nodeType":"YulLiteral","src":"3450:6:12","type":"","value":"0x3d3d"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3423:2:12"},"nodeType":"YulFunctionCall","src":"3423:34:12"},"nodeType":"YulIf","src":"3420:110:12"}]},"condition":{"arguments":[{"arguments":[{"name":"lastBytes","nodeType":"YulIdentifier","src":"3329:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"3340:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3325:3:12"},"nodeType":"YulFunctionCall","src":"3325:20:12"},{"kind":"number","nodeType":"YulLiteral","src":"3347:4:12","type":"","value":"0x3d"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3322:2:12"},"nodeType":"YulFunctionCall","src":"3322:30:12"},"nodeType":"YulIf","src":"3319:225:12"},{"expression":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"3609:6:12"},{"name":"decodedLen","nodeType":"YulIdentifier","src":"3617:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3602:6:12"},"nodeType":"YulFunctionCall","src":"3602:26:12"},"nodeType":"YulExpressionStatement","src":"3602:26:12"},{"nodeType":"YulVariableDeclaration","src":"3682:29:12","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"3702:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"3709:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:12"},"nodeType":"YulFunctionCall","src":"3698:13:12"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"3686:8:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3750:19:12","value":{"name":"data","nodeType":"YulIdentifier","src":"3765:4:12"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"3754:7:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3782:39:12","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"3800:7:12"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3815:4:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3809:5:12"},"nodeType":"YulFunctionCall","src":"3809:11:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3796:3:12"},"nodeType":"YulFunctionCall","src":"3796:25:12"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"3786:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3879:32:12","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"3900:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"3908:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3896:3:12"},"nodeType":"YulFunctionCall","src":"3896:15:12"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"3883:9:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"4025:757:12","statements":[{"nodeType":"YulAssignment","src":"4078:26:12","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"4093:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"4102:1:12","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4089:3:12"},"nodeType":"YulFunctionCall","src":"4089:15:12"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"4078:7:12"}]},{"nodeType":"YulVariableDeclaration","src":"4120:27:12","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"4139:7:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4133:5:12"},"nodeType":"YulFunctionCall","src":"4133:14:12"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"4124:5:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4196:473:12","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4266:2:12","type":"","value":"18"},{"arguments":[{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"4284:8:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4302:2:12","type":"","value":"24"},{"name":"input","nodeType":"YulIdentifier","src":"4306:5:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4298:3:12"},"nodeType":"YulFunctionCall","src":"4298:14:12"},{"kind":"number","nodeType":"YulLiteral","src":"4314:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4294:3:12"},"nodeType":"YulFunctionCall","src":"4294:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4280:3:12"},"nodeType":"YulFunctionCall","src":"4280:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4274:5:12"},"nodeType":"YulFunctionCall","src":"4274:47:12"},{"kind":"number","nodeType":"YulLiteral","src":"4323:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4270:3:12"},"nodeType":"YulFunctionCall","src":"4270:58:12"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4262:3:12"},"nodeType":"YulFunctionCall","src":"4262:67:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4358:2:12","type":"","value":"12"},{"arguments":[{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"4376:8:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4394:2:12","type":"","value":"16"},{"name":"input","nodeType":"YulIdentifier","src":"4398:5:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4390:3:12"},"nodeType":"YulFunctionCall","src":"4390:14:12"},{"kind":"number","nodeType":"YulLiteral","src":"4406:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4386:3:12"},"nodeType":"YulFunctionCall","src":"4386:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:12"},"nodeType":"YulFunctionCall","src":"4372:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4366:5:12"},"nodeType":"YulFunctionCall","src":"4366:47:12"},{"kind":"number","nodeType":"YulLiteral","src":"4415:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4362:3:12"},"nodeType":"YulFunctionCall","src":"4362:58:12"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4354:3:12"},"nodeType":"YulFunctionCall","src":"4354:67:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4234:3:12"},"nodeType":"YulFunctionCall","src":"4234:188:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4476:1:12","type":"","value":"6"},{"arguments":[{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"4493:8:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4512:1:12","type":"","value":"8"},{"name":"input","nodeType":"YulIdentifier","src":"4515:5:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4507:3:12"},"nodeType":"YulFunctionCall","src":"4507:14:12"},{"kind":"number","nodeType":"YulLiteral","src":"4523:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4503:3:12"},"nodeType":"YulFunctionCall","src":"4503:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4489:3:12"},"nodeType":"YulFunctionCall","src":"4489:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4483:5:12"},"nodeType":"YulFunctionCall","src":"4483:47:12"},{"kind":"number","nodeType":"YulLiteral","src":"4532:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4479:3:12"},"nodeType":"YulFunctionCall","src":"4479:58:12"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4471:3:12"},"nodeType":"YulFunctionCall","src":"4471:67:12"},{"arguments":[{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"4585:8:12"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"4607:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"4615:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4595:3:12"},"nodeType":"YulFunctionCall","src":"4595:25:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4581:3:12"},"nodeType":"YulFunctionCall","src":"4581:40:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4575:5:12"},"nodeType":"YulFunctionCall","src":"4575:47:12"},{"kind":"number","nodeType":"YulLiteral","src":"4624:4:12","type":"","value":"0xFF"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4571:3:12"},"nodeType":"YulFunctionCall","src":"4571:58:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4443:3:12"},"nodeType":"YulFunctionCall","src":"4443:208:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4210:3:12"},"nodeType":"YulFunctionCall","src":"4210:459:12"},"variables":[{"name":"output","nodeType":"YulTypedName","src":"4200:6:12","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"4693:9:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4708:3:12","type":"","value":"232"},{"name":"output","nodeType":"YulIdentifier","src":"4713:6:12"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4704:3:12"},"nodeType":"YulFunctionCall","src":"4704:16:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4686:6:12"},"nodeType":"YulFunctionCall","src":"4686:35:12"},"nodeType":"YulExpressionStatement","src":"4686:35:12"},{"nodeType":"YulAssignment","src":"4738:30:12","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"4755:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"4766:1:12","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4751:3:12"},"nodeType":"YulFunctionCall","src":"4751:17:12"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"4738:9:12"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"3993:7:12"},{"name":"endPtr","nodeType":"YulIdentifier","src":"4002:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3990:2:12"},"nodeType":"YulFunctionCall","src":"3990:19:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4010:2:12","statements":[]},"pre":{"nodeType":"YulBlock","src":"3987:2:12","statements":[]},"src":"3983:799:12"}]},"evmVersion":"paris","externalReferences":[{"declaration":2887,"isOffset":false,"isSlot":false,"src":"3287:4:12","valueSize":1},{"declaration":2887,"isOffset":false,"isSlot":false,"src":"3299:4:12","valueSize":1},{"declaration":2887,"isOffset":false,"isSlot":false,"src":"3765:4:12","valueSize":1},{"declaration":2887,"isOffset":false,"isSlot":false,"src":"3815:4:12","valueSize":1},{"declaration":2918,"isOffset":false,"isSlot":false,"src":"3371:10:12","valueSize":1},{"declaration":2918,"isOffset":false,"isSlot":false,"src":"3389:10:12","valueSize":1},{"declaration":2918,"isOffset":false,"isSlot":false,"src":"3480:10:12","valueSize":1},{"declaration":2918,"isOffset":false,"isSlot":false,"src":"3498:10:12","valueSize":1},{"declaration":2918,"isOffset":false,"isSlot":false,"src":"3617:10:12","valueSize":1},{"declaration":2928,"isOffset":false,"isSlot":false,"src":"3609:6:12","valueSize":1},{"declaration":2928,"isOffset":false,"isSlot":false,"src":"3900:6:12","valueSize":1},{"declaration":2914,"isOffset":false,"isSlot":false,"src":"3702:5:12","valueSize":1}],"id":2936,"nodeType":"InlineAssembly","src":"3205:1587:12"},{"expression":{"id":2937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"4809:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2885,"id":2938,"nodeType":"Return","src":"4802:13:12"}]},"id":2940,"implemented":true,"kind":"function","modifiers":[],"name":"decode","nameLocation":"2653:6:12","nodeType":"FunctionDefinition","parameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"mutability":"mutable","name":"_data","nameLocation":"2674:5:12","nodeType":"VariableDeclaration","scope":2940,"src":"2660:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2880,"name":"string","nodeType":"ElementaryTypeName","src":"2660:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2659:21:12"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2940,"src":"2704:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2883,"name":"bytes","nodeType":"ElementaryTypeName","src":"2704:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2703:14:12"},"scope":2941,"src":"2644:2178:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2942,"src":"186:4638:12","usedErrors":[],"usedEvents":[]}],"src":"33:4792:12"},"id":12},"contracts/DynamicSVGNFT.sol":{"ast":{"absolutePath":"contracts/DynamicSVGNFT.sol","exportedSymbols":{"AggregatorV3Interface":[45],"Base64":[2941],"Context":[1376],"DynamicSVGNFT":[3139],"ERC165":[1655],"ERC721":[1191],"IERC165":[1667],"IERC721":[1308],"IERC721Errors":[135],"IERC721Metadata":[1354],"IERC721Receiver":[1326],"Strings":[1631]},"id":3140,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2943,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:13"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol","id":2944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3140,"sourceUnit":46,"src":"57:76:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2945,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3140,"sourceUnit":1192,"src":"134:57:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"base64-sol/base64.sol","file":"base64-sol/base64.sol","id":2946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3140,"sourceUnit":2942,"src":"192:31:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2947,"name":"ERC721","nameLocations":["251:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1191,"src":"251:6:13"},"id":2948,"nodeType":"InheritanceSpecifier","src":"251:6:13"}],"canonicalName":"DynamicSVGNFT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3139,"linearizedBaseContracts":[3139,1191,135,1354,1308,1655,1667,1376],"name":"DynamicSVGNFT","nameLocation":"234:13:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2950,"mutability":"mutable","name":"s_tokenCounter","nameLocation":"394:14:13","nodeType":"VariableDeclaration","scope":3139,"src":"378:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2952,"mutability":"mutable","name":"i_lowImageURI","nameLocation":"429:13:13","nodeType":"VariableDeclaration","scope":3139,"src":"414:28:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2951,"name":"string","nodeType":"ElementaryTypeName","src":"414:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2954,"mutability":"mutable","name":"i_highImageURI","nameLocation":"463:14:13","nodeType":"VariableDeclaration","scope":3139,"src":"448:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2953,"name":"string","nodeType":"ElementaryTypeName","src":"448:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":true,"id":2957,"mutability":"constant","name":"base64EncodedSvgPrefix","nameLocation":"507:22:13","nodeType":"VariableDeclaration","scope":3139,"src":"483:85:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2955,"name":"string","nodeType":"ElementaryTypeName","src":"483:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"646174613a696d6167652f7376672b786d6c3b6261736536342c","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"540:28:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14","typeString":"literal_string \"data:image/svg+xml;base64,\""},"value":"data:image/svg+xml;base64,"},"visibility":"private"},{"constant":false,"id":2960,"mutability":"immutable","name":"i_priceFeed","nameLocation":"615:11:13","nodeType":"VariableDeclaration","scope":3139,"src":"574:52:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"},"typeName":{"id":2959,"nodeType":"UserDefinedTypeName","pathNode":{"id":2958,"name":"AggregatorV3Interface","nameLocations":["574:21:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"574:21:13"},"referencedDeclaration":45,"src":"574:21:13","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"visibility":"internal"},{"constant":false,"functionSelector":"e425aded","id":2964,"mutability":"mutable","name":"s_tokenIdToHighValue","nameLocation":"666:20:13","nodeType":"VariableDeclaration","scope":3139,"src":"632:54:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int256_$","typeString":"mapping(uint256 => int256)"},"typeName":{"id":2963,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2961,"name":"uint256","nodeType":"ElementaryTypeName","src":"640:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"632:26:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int256_$","typeString":"mapping(uint256 => int256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2962,"name":"int256","nodeType":"ElementaryTypeName","src":"651:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"882d3b5a729a8bb95cf6c0083c99b42ecd9637123d4425bd7b768877fd8af8b0","id":2970,"name":"CreatedNFT","nameLocation":"699:10:13","nodeType":"EventDefinition","parameters":{"id":2969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2966,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"726:7:13","nodeType":"VariableDeclaration","scope":2970,"src":"710:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2965,"name":"uint256","nodeType":"ElementaryTypeName","src":"710:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2968,"indexed":false,"mutability":"mutable","name":"highValue","nameLocation":"742:9:13","nodeType":"VariableDeclaration","scope":2970,"src":"735:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2967,"name":"int256","nodeType":"ElementaryTypeName","src":"735:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"709:43:13"},"src":"693:60:13"},{"body":{"id":3005,"nodeType":"Block","src":"905:194:13","statements":[{"expression":{"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2983,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"915:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"932:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"915:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2986,"nodeType":"ExpressionStatement","src":"915:18:13"},{"expression":{"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2987,"name":"i_lowImageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"943:13:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2989,"name":"lowSvg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"973:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2988,"name":"svgToImageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"959:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"959:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"943:37:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2992,"nodeType":"ExpressionStatement","src":"943:37:13"},{"expression":{"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2993,"name":"i_highImageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"990:14:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2995,"name":"highSvg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"1021:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2994,"name":"svgToImageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"1007:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"990:39:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2998,"nodeType":"ExpressionStatement","src":"990:39:13"},{"expression":{"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2999,"name":"i_priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"1039:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3001,"name":"priceFeedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"1075:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3000,"name":"AggregatorV3Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"1053:21:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AggregatorV3Interface_$45_$","typeString":"type(contract AggregatorV3Interface)"}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1053:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"src":"1039:53:13","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"id":3004,"nodeType":"ExpressionStatement","src":"1039:53:13"}]},"id":3006,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"44796e616d696320535647204e4654","id":2979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"879:17:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ea1fd3254b60bf4a83b0986ee86edb0638cb2f820040df53c34a4f0ba57d146d","typeString":"literal_string \"Dynamic SVG NFT\""},"value":"Dynamic SVG NFT"},{"hexValue":"44534e","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"898:5:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_275f2341ff18e41e04cc32c20974ed0046a9cb9bd1a1fcf968aafc5924b80a4d","typeString":"literal_string \"DSN\""},"value":"DSN"}],"id":2981,"kind":"baseConstructorSpecifier","modifierName":{"id":2978,"name":"ERC721","nameLocations":["872:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1191,"src":"872:6:13"},"nodeType":"ModifierInvocation","src":"872:32:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"priceFeedAddress","nameLocation":"788:16:13","nodeType":"VariableDeclaration","scope":3006,"src":"780:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2971,"name":"address","nodeType":"ElementaryTypeName","src":"780:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"lowSvg","nameLocation":"828:6:13","nodeType":"VariableDeclaration","scope":3006,"src":"814:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2973,"name":"string","nodeType":"ElementaryTypeName","src":"814:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2976,"mutability":"mutable","name":"highSvg","nameLocation":"858:7:13","nodeType":"VariableDeclaration","scope":3006,"src":"844:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2975,"name":"string","nodeType":"ElementaryTypeName","src":"844:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"770:101:13"},"returnParameters":{"id":2982,"nodeType":"ParameterList","parameters":[],"src":"905:0:13"},"scope":3139,"src":"759:340:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3038,"nodeType":"Block","src":"1197:218:13","statements":[{"assignments":[3014],"declarations":[{"constant":false,"id":3014,"mutability":"mutable","name":"svgBase64Encoded","nameLocation":"1221:16:13","nodeType":"VariableDeclaration","scope":3038,"src":"1207:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3013,"name":"string","nodeType":"ElementaryTypeName","src":"1207:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3028,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":3023,"name":"svg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"1297:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1280:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1284:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"1280:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1280:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1273:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3019,"name":"string","nodeType":"ElementaryTypeName","src":"1273:6:13","typeDescriptions":{}}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1273:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1267:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3017,"name":"bytes","nodeType":"ElementaryTypeName","src":"1267:5:13","typeDescriptions":{}}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1267:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3015,"name":"Base64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"1240:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Base64_$2941_$","typeString":"type(library Base64)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1247:6:13","memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":2879,"src":"1240:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1240:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1207:106:13"},{"expression":{"arguments":[{"arguments":[{"id":3033,"name":"base64EncodedSvgPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"1366:22:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3034,"name":"svgBase64Encoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"1390:16:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3031,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1349:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1353:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"1349:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3029,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:13","typeDescriptions":{}}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:66:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3012,"id":3037,"nodeType":"Return","src":"1323:85:13"}]},"functionSelector":"30d871c6","id":3039,"implemented":true,"kind":"function","modifiers":[],"name":"svgToImageURI","nameLocation":"1114:13:13","nodeType":"FunctionDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"svg","nameLocation":"1151:3:13","nodeType":"VariableDeclaration","scope":3039,"src":"1137:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3007,"name":"string","nodeType":"ElementaryTypeName","src":"1137:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1127:33:13"},"returnParameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3039,"src":"1182:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3010,"name":"string","nodeType":"ElementaryTypeName","src":"1182:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1181:15:13"},"scope":3139,"src":"1105:310:13","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":3065,"nodeType":"Block","src":"1463:193:13","statements":[{"expression":{"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3044,"name":"s_tokenIdToHighValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"1473:20:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int256_$","typeString":"mapping(uint256 => int256)"}},"id":3046,"indexExpression":{"id":3045,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"1494:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1473:36:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3047,"name":"highValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"1512:9:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1473:48:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3049,"nodeType":"ExpressionStatement","src":"1473:48:13"},{"expression":{"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3050,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"1531:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1549:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1531:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3053,"nodeType":"ExpressionStatement","src":"1531:19:13"},{"expression":{"arguments":[{"expression":{"id":3055,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1570:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1574:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1570:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3057,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"1582:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3054,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[813,839],"referencedDeclaration":813,"src":"1560:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1560:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3059,"nodeType":"ExpressionStatement","src":"1560:37:13"},{"eventCall":{"arguments":[{"id":3061,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"1623:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3062,"name":"highValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"1639:9:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3060,"name":"CreatedNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"1612:10:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_int256_$returns$__$","typeString":"function (uint256,int256)"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1612:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3064,"nodeType":"EmitStatement","src":"1607:42:13"}]},"functionSelector":"e2ed50cb","id":3066,"implemented":true,"kind":"function","modifiers":[],"name":"mintNFT","nameLocation":"1430:7:13","nodeType":"FunctionDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"highValue","nameLocation":"1445:9:13","nodeType":"VariableDeclaration","scope":3066,"src":"1438:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3040,"name":"int256","nodeType":"ElementaryTypeName","src":"1438:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1437:18:13"},"returnParameters":{"id":3043,"nodeType":"ParameterList","parameters":[],"src":"1463:0:13"},"scope":3139,"src":"1421:235:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[387],"body":{"id":3074,"nodeType":"Block","src":"1729:55:13","statements":[{"expression":{"hexValue":"646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1746:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},"value":"data:application/json;base64,"},"functionReturnParameters":3071,"id":3073,"nodeType":"Return","src":"1739:38:13"}]},"id":3075,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"1671:8:13","nodeType":"FunctionDefinition","overrides":{"id":3068,"nodeType":"OverrideSpecifier","overrides":[],"src":"1696:8:13"},"parameters":{"id":3067,"nodeType":"ParameterList","parameters":[],"src":"1679:2:13"},"returnParameters":{"id":3071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3075,"src":"1714:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3069,"name":"string","nodeType":"ElementaryTypeName","src":"1714:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1713:15:13"},"scope":3139,"src":"1662:122:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"baseFunctions":[378],"body":{"id":3137,"nodeType":"Block","src":"1884:1003:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3085,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"1929:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3084,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"1915:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1915:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3088,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"1950:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3087,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"1941:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1915:43:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"55524920517565727920666f72206e6f6e6578697374656e7420746f6b656e","id":3091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1972:33:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30","typeString":"literal_string \"URI Query for nonexistent token\""},"value":"URI Query for nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30","typeString":"literal_string \"URI Query for nonexistent token\""}],"id":3083,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1894:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1894:121:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3093,"nodeType":"ExpressionStatement","src":"1894:121:13"},{"assignments":[null,3095,null,null,null],"declarations":[null,{"constant":false,"id":3095,"mutability":"mutable","name":"price","nameLocation":"2036:5:13","nodeType":"VariableDeclaration","scope":3137,"src":"2029:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3094,"name":"int256","nodeType":"ElementaryTypeName","src":"2029:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},null,null,null],"id":3099,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3096,"name":"i_priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"2051:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2063:15:13","memberName":"latestRoundData","nodeType":"MemberAccess","referencedDeclaration":44,"src":"2051:27:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$","typeString":"function () view external returns (uint80,int256,uint256,uint256,uint80)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2051:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$","typeString":"tuple(uint80,int256,uint256,uint256,uint80)"}},"nodeType":"VariableDeclarationStatement","src":"2026:54:13"},{"assignments":[3101],"declarations":[{"constant":false,"id":3101,"mutability":"mutable","name":"imageURI","nameLocation":"2104:8:13","nodeType":"VariableDeclaration","scope":3137,"src":"2090:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3100,"name":"string","nodeType":"ElementaryTypeName","src":"2090:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3103,"initialValue":{"id":3102,"name":"i_lowImageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2115:13:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2090:38:13"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3104,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"2143:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"baseExpression":{"id":3105,"name":"s_tokenIdToHighValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"2152:20:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int256_$","typeString":"mapping(uint256 => int256)"}},"id":3107,"indexExpression":{"id":3106,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"2173:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2152:29:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2143:38:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3114,"nodeType":"IfStatement","src":"2139:94:13","trueBody":{"id":3113,"nodeType":"Block","src":"2183:50:13","statements":[{"expression":{"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3109,"name":"imageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"2197:8:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3110,"name":"i_highImageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"2208:14:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"2197:25:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3112,"nodeType":"ExpressionStatement","src":"2197:25:13"}]}},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3119,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[3075],"referencedDeclaration":3075,"src":"2363:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2363:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"hexValue":"207b226e616d65223a22","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2480:12:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6","typeString":"literal_string \" {\"name\":\"\""},"value":" {\"name\":\""},{"arguments":[],"expression":{"argumentTypes":[],"id":3126,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"2522:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2522:6:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c20226465736372697074696f6e223a2022416e204e46542074686174206368616e676573206261736564206f6e2074686520436861696e6c696e6b2046656564222c","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2558:70:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d","typeString":"literal_string \"\", \"description\": \"An NFT that changes based on the Chainlink Feed\",\""},"value":"\", \"description\": \"An NFT that changes based on the Chainlink Feed\","},{"hexValue":"2261747472696275746573223a205b7b2274726169745f74797065223a2022636f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d616765223a2022","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2658:70:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d","typeString":"literal_string \"\"attributes\": [{\"trait_type\": \"coolness\", \"value\": 100}], \"image\": \"\""},"value":"\"attributes\": [{\"trait_type\": \"coolness\", \"value\": 100}], \"image\": \""},{"id":3130,"name":"imageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"2758:8:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"227d","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2796:4:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475","typeString":"literal_string \"\"}\""},"value":"\"}"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6","typeString":"literal_string \" {\"name\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d","typeString":"literal_string \"\", \"description\": \"An NFT that changes based on the Chainlink Feed\",\""},{"typeIdentifier":"t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d","typeString":"literal_string \"\"attributes\": [{\"trait_type\": \"coolness\", \"value\": 100}], \"image\": \"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475","typeString":"literal_string \"\"}\""}],"expression":{"id":3123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2434:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2438:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"2434:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2434:392:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3121,"name":"Base64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"2395:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Base64_$2941_$","typeString":"type(library Base64)"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2402:6:13","memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":2879,"src":"2395:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2395:453:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3117,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2325:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2329:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"2325:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2325:541:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2301:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3115,"name":"string","nodeType":"ElementaryTypeName","src":"2301:6:13","typeDescriptions":{}}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2301:579:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3082,"id":3136,"nodeType":"Return","src":"2282:598:13"}]},"functionSelector":"c87b56dd","id":3138,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1799:8:13","nodeType":"FunctionDefinition","overrides":{"id":3079,"nodeType":"OverrideSpecifier","overrides":[],"src":"1851:8:13"},"parameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"tokenId","nameLocation":"1825:7:13","nodeType":"VariableDeclaration","scope":3138,"src":"1817:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3076,"name":"uint256","nodeType":"ElementaryTypeName","src":"1817:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1807:31:13"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3138,"src":"1869:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3080,"name":"string","nodeType":"ElementaryTypeName","src":"1869:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1868:15:13"},"scope":3139,"src":"1790:1097:13","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3140,"src":"225:2664:13","usedErrors":[93,98,107,112,117,124,129,134],"usedEvents":[1207,1216,1225,2970]}],"src":"32:2858:13"},"id":13}},"contracts":{"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol":{"AggregatorV3Interface":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"getRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567","description()":"7284e416","getRoundData(uint80)":"9a6fc8f5","latestRoundData()":"feaf968c","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":\"AggregatorV3Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":215,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":217,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":221,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":225,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":229,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":235,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011d1a1503b94e67b1140e37648e2b81c7ec8d2834b954c500654eb5772ec9e9164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xD1 LOG1 POP EXTCODESIZE SWAP5 0xE6 PUSH28 0x1140E37648E2B81C7EC8D2834B954C500654EB5772EC9E9164736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:2847:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011d1a1503b94e67b1140e37648e2b81c7ec8d2834b954c500654eb5772ec9e9164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xD1 LOG1 POP EXTCODESIZE SWAP5 0xE6 PUSH28 0x1140E37648E2B81C7EC8D2834B954C500654EB5772EC9E9164736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:2847:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066d55c3938bdee5e14d05a6a04425c3d0b6d4fad67efc8aafeaf67cc517b228a64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xD55C3938BDEE5E EQ 0xD0 GAS PUSH11 0x4425C3D0B6D4FAD67EFC8 0xAA INVALID 0xAF PUSH8 0xCC517B228A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"216:1047:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066d55c3938bdee5e14d05a6a04425c3d0b6d4fad67efc8aafeaf67cc517b228a64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xD55C3938BDEE5E EQ 0xD0 GAS PUSH11 0x4425C3D0B6D4FAD67EFC8 0xAA INVALID 0xAF PUSH8 0xCC517B228A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"216:1047:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"base64-sol/base64.sol":{"Base64":{"abi":[],"devdoc":{"author":"Brecht Devos - <brecht@loopring.org>","kind":"dev","methods":{},"title":"Base64","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ddadf1cf1e885541fb159473100edc0abce1bc1a48ecd8a80539f9d36bd2d99164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xAD CALL 0xCF 0x1E DUP9 SSTORE COINBASE 0xFB ISZERO SWAP5 PUSH20 0x100EDC0ABCE1BC1A48ECD8A80539F9D36BD2D991 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"186:4638:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ddadf1cf1e885541fb159473100edc0abce1bc1a48ecd8a80539f9d36bd2d99164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xAD CALL 0xCF 0x1E DUP9 SSTORE COINBASE 0xFB ISZERO SWAP5 PUSH20 0x100EDC0ABCE1BC1A48ECD8A80539F9D36BD2D991 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"186:4638:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"decode(string memory)":"infinite","encode(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Brecht Devos - <brecht@loopring.org>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Base64\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions for encoding/decoding base64\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"base64-sol/base64.sol\":\"Base64\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Provides functions for encoding/decoding base64","version":1}}},"contracts/DynamicSVGNFT.sol":{"DynamicSVGNFT":{"abi":[{"inputs":[{"internalType":"address","name":"priceFeedAddress","type":"address"},{"internalType":"string","name":"lowSvg","type":"string"},{"internalType":"string","name":"highSvg","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"highValue","type":"int256"}],"name":"CreatedNFT","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int256","name":"highValue","type":"int256"}],"name":"mintNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"s_tokenIdToHighValue","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"svg","type":"string"}],"name":"svgToImageURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_252":{"entryPoint":null,"id":252,"parameterSlots":2,"returnSlots":0},"@_3006":{"entryPoint":null,"id":3006,"parameterSlots":3,"returnSlots":0},"@encode_2879":{"entryPoint":491,"id":2879,"parameterSlots":1,"returnSlots":1},"@svgToImageURI_3039":{"entryPoint":338,"id":3039,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1266,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":986,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1341,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":1392,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2375,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2430,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2455,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":1137,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":888,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":1168,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1657,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1546,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2364,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2542,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":2648,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2704,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1978,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":940,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":908,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1793,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1939,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":1813,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":2133,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1222,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1678,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1604,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":2103,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":1083,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":1803,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":2071,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":2495,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":2601,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":1557,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1036,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1853,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1009,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1014,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":903,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":898,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1019,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":1694,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":2058,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1911,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1707,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1863,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":960,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1906,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:11689:14","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:14","statements":[{"nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:14"},"nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:14"},"nodeType":"YulFunctionCall","src":"187:12:14"},"nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:14"},"nodeType":"YulFunctionCall","src":"310:12:14"},"nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nodeType":"YulBlock","src":"379:81:14","statements":[{"nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:14"},"nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nodeType":"YulBlock","src":"511:51:14","statements":[{"nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:14"},"nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:14"},"nodeType":"YulFunctionCall","src":"670:12:14"},"nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:14"},"nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:14"},"nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:14"},"nodeType":"YulFunctionCall","src":"624:43:14"},"nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nodeType":"YulBlock","src":"759:80:14","statements":[{"nodeType":"YulAssignment","src":"769:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:14"},"nodeType":"YulFunctionCall","src":"778:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:14"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:14"},"nodeType":"YulFunctionCall","src":"800:33:14"},"nodeType":"YulExpressionStatement","src":"800:33:14"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:14","type":""}],"src":"696:143:14"},{"body":{"nodeType":"YulBlock","src":"934:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"951:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"944:6:14"},"nodeType":"YulFunctionCall","src":"944:12:14"},"nodeType":"YulExpressionStatement","src":"944:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"845:117:14"},{"body":{"nodeType":"YulBlock","src":"1057:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1074:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1077:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1067:6:14"},"nodeType":"YulFunctionCall","src":"1067:12:14"},"nodeType":"YulExpressionStatement","src":"1067:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"968:117:14"},{"body":{"nodeType":"YulBlock","src":"1139:54:14","statements":[{"nodeType":"YulAssignment","src":"1149:38:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1167:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"1174:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1163:3:14"},"nodeType":"YulFunctionCall","src":"1163:14:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1179:3:14"},"nodeType":"YulFunctionCall","src":"1179:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1159:3:14"},"nodeType":"YulFunctionCall","src":"1159:28:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1149:6:14"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1122:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1132:6:14","type":""}],"src":"1091:102:14"},{"body":{"nodeType":"YulBlock","src":"1227:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1244:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1247:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1237:6:14"},"nodeType":"YulFunctionCall","src":"1237:88:14"},"nodeType":"YulExpressionStatement","src":"1237:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1341:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1344:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1334:6:14"},"nodeType":"YulFunctionCall","src":"1334:15:14"},"nodeType":"YulExpressionStatement","src":"1334:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1365:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1368:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1358:6:14"},"nodeType":"YulFunctionCall","src":"1358:15:14"},"nodeType":"YulExpressionStatement","src":"1358:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1199:180:14"},{"body":{"nodeType":"YulBlock","src":"1428:238:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1438:58:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1460:6:14"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1490:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1468:21:14"},"nodeType":"YulFunctionCall","src":"1468:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1456:3:14"},"nodeType":"YulFunctionCall","src":"1456:40:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1442:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1607:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1609:16:14"},"nodeType":"YulFunctionCall","src":"1609:18:14"},"nodeType":"YulExpressionStatement","src":"1609:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1550:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"1562:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1547:2:14"},"nodeType":"YulFunctionCall","src":"1547:34:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1586:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1598:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1583:2:14"},"nodeType":"YulFunctionCall","src":"1583:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1544:2:14"},"nodeType":"YulFunctionCall","src":"1544:62:14"},"nodeType":"YulIf","src":"1541:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1645:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1649:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1638:6:14"},"nodeType":"YulFunctionCall","src":"1638:22:14"},"nodeType":"YulExpressionStatement","src":"1638:22:14"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1414:6:14","type":""},{"name":"size","nodeType":"YulTypedName","src":"1422:4:14","type":""}],"src":"1385:281:14"},{"body":{"nodeType":"YulBlock","src":"1713:88:14","statements":[{"nodeType":"YulAssignment","src":"1723:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1733:18:14"},"nodeType":"YulFunctionCall","src":"1733:20:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1723:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1782:6:14"},{"name":"size","nodeType":"YulIdentifier","src":"1790:4:14"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1762:19:14"},"nodeType":"YulFunctionCall","src":"1762:33:14"},"nodeType":"YulExpressionStatement","src":"1762:33:14"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1697:4:14","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1706:6:14","type":""}],"src":"1672:129:14"},{"body":{"nodeType":"YulBlock","src":"1874:241:14","statements":[{"body":{"nodeType":"YulBlock","src":"1979:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1981:16:14"},"nodeType":"YulFunctionCall","src":"1981:18:14"},"nodeType":"YulExpressionStatement","src":"1981:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1951:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1959:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1948:2:14"},"nodeType":"YulFunctionCall","src":"1948:30:14"},"nodeType":"YulIf","src":"1945:56:14"},{"nodeType":"YulAssignment","src":"2011:37:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2041:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2019:21:14"},"nodeType":"YulFunctionCall","src":"2019:29:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2011:4:14"}]},{"nodeType":"YulAssignment","src":"2085:23:14","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2097:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2093:3:14"},"nodeType":"YulFunctionCall","src":"2093:15:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2085:4:14"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1858:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1869:4:14","type":""}],"src":"1807:308:14"},{"body":{"nodeType":"YulBlock","src":"2183:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2193:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"2202:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2197:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2262:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2287:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"2292:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2283:3:14"},"nodeType":"YulFunctionCall","src":"2283:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2306:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"2311:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2302:3:14"},"nodeType":"YulFunctionCall","src":"2302:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2296:5:14"},"nodeType":"YulFunctionCall","src":"2296:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2276:6:14"},"nodeType":"YulFunctionCall","src":"2276:39:14"},"nodeType":"YulExpressionStatement","src":"2276:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2223:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"2226:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2220:2:14"},"nodeType":"YulFunctionCall","src":"2220:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2234:19:14","statements":[{"nodeType":"YulAssignment","src":"2236:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2245:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"2248:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:14"},"nodeType":"YulFunctionCall","src":"2241:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2236:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"2216:3:14","statements":[]},"src":"2212:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2345:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2350:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2341:3:14"},"nodeType":"YulFunctionCall","src":"2341:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"2359:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2334:6:14"},"nodeType":"YulFunctionCall","src":"2334:27:14"},"nodeType":"YulExpressionStatement","src":"2334:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2165:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2170:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"2175:6:14","type":""}],"src":"2121:246:14"},{"body":{"nodeType":"YulBlock","src":"2468:339:14","statements":[{"nodeType":"YulAssignment","src":"2478:75:14","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2545:6:14"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2503:41:14"},"nodeType":"YulFunctionCall","src":"2503:49:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2487:15:14"},"nodeType":"YulFunctionCall","src":"2487:66:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2478:5:14"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2569:5:14"},{"name":"length","nodeType":"YulIdentifier","src":"2576:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2562:6:14"},"nodeType":"YulFunctionCall","src":"2562:21:14"},"nodeType":"YulExpressionStatement","src":"2562:21:14"},{"nodeType":"YulVariableDeclaration","src":"2592:27:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2607:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2614:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2603:3:14"},"nodeType":"YulFunctionCall","src":"2603:16:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2596:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2657:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2659:77:14"},"nodeType":"YulFunctionCall","src":"2659:79:14"},"nodeType":"YulExpressionStatement","src":"2659:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2638:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2643:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:14"},"nodeType":"YulFunctionCall","src":"2634:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"2652:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2631:2:14"},"nodeType":"YulFunctionCall","src":"2631:25:14"},"nodeType":"YulIf","src":"2628:112:14"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2784:3:14"},{"name":"dst","nodeType":"YulIdentifier","src":"2789:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2794:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2749:34:14"},"nodeType":"YulFunctionCall","src":"2749:52:14"},"nodeType":"YulExpressionStatement","src":"2749:52:14"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2441:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"2446:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"2454:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2462:5:14","type":""}],"src":"2373:434:14"},{"body":{"nodeType":"YulBlock","src":"2900:282:14","statements":[{"body":{"nodeType":"YulBlock","src":"2949:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2951:77:14"},"nodeType":"YulFunctionCall","src":"2951:79:14"},"nodeType":"YulExpressionStatement","src":"2951:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2928:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"2936:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2924:3:14"},"nodeType":"YulFunctionCall","src":"2924:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"2943:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2920:3:14"},"nodeType":"YulFunctionCall","src":"2920:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2913:6:14"},"nodeType":"YulFunctionCall","src":"2913:35:14"},"nodeType":"YulIf","src":"2910:122:14"},{"nodeType":"YulVariableDeclaration","src":"3041:27:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3061:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3055:5:14"},"nodeType":"YulFunctionCall","src":"3055:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3045:6:14","type":""}]},{"nodeType":"YulAssignment","src":"3077:99:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3149:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3157:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3145:3:14"},"nodeType":"YulFunctionCall","src":"3145:17:14"},{"name":"length","nodeType":"YulIdentifier","src":"3164:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"3172:3:14"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3086:58:14"},"nodeType":"YulFunctionCall","src":"3086:90:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3077:5:14"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2878:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"2886:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2894:5:14","type":""}],"src":"2827:355:14"},{"body":{"nodeType":"YulBlock","src":"3319:878:14","statements":[{"body":{"nodeType":"YulBlock","src":"3365:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3367:77:14"},"nodeType":"YulFunctionCall","src":"3367:79:14"},"nodeType":"YulExpressionStatement","src":"3367:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3340:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"3349:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3336:3:14"},"nodeType":"YulFunctionCall","src":"3336:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3361:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3332:3:14"},"nodeType":"YulFunctionCall","src":"3332:32:14"},"nodeType":"YulIf","src":"3329:119:14"},{"nodeType":"YulBlock","src":"3458:128:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3473:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3487:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3477:6:14","type":""}]},{"nodeType":"YulAssignment","src":"3502:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:14"},"nodeType":"YulFunctionCall","src":"3544:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:14"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"3512:31:14"},"nodeType":"YulFunctionCall","src":"3512:64:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3502:6:14"}]}]},{"nodeType":"YulBlock","src":"3596:292:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3611:39:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3635:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3646:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3631:3:14"},"nodeType":"YulFunctionCall","src":"3631:18:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3625:5:14"},"nodeType":"YulFunctionCall","src":"3625:25:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3615:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3697:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3699:77:14"},"nodeType":"YulFunctionCall","src":"3699:79:14"},"nodeType":"YulExpressionStatement","src":"3699:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3669:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3677:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3666:2:14"},"nodeType":"YulFunctionCall","src":"3666:30:14"},"nodeType":"YulIf","src":"3663:117:14"},{"nodeType":"YulAssignment","src":"3794:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3850:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3861:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3846:3:14"},"nodeType":"YulFunctionCall","src":"3846:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3870:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3804:41:14"},"nodeType":"YulFunctionCall","src":"3804:74:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3794:6:14"}]}]},{"nodeType":"YulBlock","src":"3898:292:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3913:39:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3937:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"3948:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3933:3:14"},"nodeType":"YulFunctionCall","src":"3933:18:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3927:5:14"},"nodeType":"YulFunctionCall","src":"3927:25:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3917:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3999:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4001:77:14"},"nodeType":"YulFunctionCall","src":"4001:79:14"},"nodeType":"YulExpressionStatement","src":"4001:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3971:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3979:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3968:2:14"},"nodeType":"YulFunctionCall","src":"3968:30:14"},"nodeType":"YulIf","src":"3965:117:14"},{"nodeType":"YulAssignment","src":"4096:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4152:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4163:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4148:3:14"},"nodeType":"YulFunctionCall","src":"4148:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4172:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"4106:41:14"},"nodeType":"YulFunctionCall","src":"4106:74:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4096:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3273:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3284:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3296:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3304:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3312:6:14","type":""}],"src":"3188:1009:14"},{"body":{"nodeType":"YulBlock","src":"4262:40:14","statements":[{"nodeType":"YulAssignment","src":"4273:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4289:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4283:5:14"},"nodeType":"YulFunctionCall","src":"4283:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4273:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4245:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4255:6:14","type":""}],"src":"4203:99:14"},{"body":{"nodeType":"YulBlock","src":"4336:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4353:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4356:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4346:6:14"},"nodeType":"YulFunctionCall","src":"4346:88:14"},"nodeType":"YulExpressionStatement","src":"4346:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4450:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4453:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4443:6:14"},"nodeType":"YulFunctionCall","src":"4443:15:14"},"nodeType":"YulExpressionStatement","src":"4443:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4474:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4477:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4467:6:14"},"nodeType":"YulFunctionCall","src":"4467:15:14"},"nodeType":"YulExpressionStatement","src":"4467:15:14"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"4308:180:14"},{"body":{"nodeType":"YulBlock","src":"4545:269:14","statements":[{"nodeType":"YulAssignment","src":"4555:22:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4569:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"4575:1:14","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4565:3:14"},"nodeType":"YulFunctionCall","src":"4565:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4555:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"4586:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4616:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"4622:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4612:3:14"},"nodeType":"YulFunctionCall","src":"4612:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4590:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4663:51:14","statements":[{"nodeType":"YulAssignment","src":"4677:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4691:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4699:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4687:3:14"},"nodeType":"YulFunctionCall","src":"4687:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4677:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4643:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4636:6:14"},"nodeType":"YulFunctionCall","src":"4636:26:14"},"nodeType":"YulIf","src":"4633:81:14"},{"body":{"nodeType":"YulBlock","src":"4766:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4780:16:14"},"nodeType":"YulFunctionCall","src":"4780:18:14"},"nodeType":"YulExpressionStatement","src":"4780:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4730:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4753:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4750:2:14"},"nodeType":"YulFunctionCall","src":"4750:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4727:2:14"},"nodeType":"YulFunctionCall","src":"4727:38:14"},"nodeType":"YulIf","src":"4724:84:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4529:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4538:6:14","type":""}],"src":"4494:320:14"},{"body":{"nodeType":"YulBlock","src":"4874:87:14","statements":[{"nodeType":"YulAssignment","src":"4884:11:14","value":{"name":"ptr","nodeType":"YulIdentifier","src":"4892:3:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4884:4:14"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4912:1:14","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4915:3:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4905:6:14"},"nodeType":"YulFunctionCall","src":"4905:14:14"},"nodeType":"YulExpressionStatement","src":"4905:14:14"},{"nodeType":"YulAssignment","src":"4928:26:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4946:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4949:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4936:9:14"},"nodeType":"YulFunctionCall","src":"4936:18:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4928:4:14"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"4861:3:14","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"4869:4:14","type":""}],"src":"4820:141:14"},{"body":{"nodeType":"YulBlock","src":"5011:49:14","statements":[{"nodeType":"YulAssignment","src":"5021:33:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5039:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"5046:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5035:3:14"},"nodeType":"YulFunctionCall","src":"5035:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"5051:2:14","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5031:3:14"},"nodeType":"YulFunctionCall","src":"5031:23:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5021:6:14"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4994:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5004:6:14","type":""}],"src":"4967:93:14"},{"body":{"nodeType":"YulBlock","src":"5119:54:14","statements":[{"nodeType":"YulAssignment","src":"5129:37:14","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"5154:4:14"},{"name":"value","nodeType":"YulIdentifier","src":"5160:5:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5150:3:14"},"nodeType":"YulFunctionCall","src":"5150:16:14"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"5129:8:14"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"5094:4:14","type":""},{"name":"value","nodeType":"YulTypedName","src":"5100:5:14","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"5110:8:14","type":""}],"src":"5066:107:14"},{"body":{"nodeType":"YulBlock","src":"5255:317:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5265:35:14","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"5286:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"5298:1:14","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5282:3:14"},"nodeType":"YulFunctionCall","src":"5282:18:14"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"5269:9:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5309:109:14","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"5340:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5351:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"5321:18:14"},"nodeType":"YulFunctionCall","src":"5321:97:14"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"5313:4:14","type":""}]},{"nodeType":"YulAssignment","src":"5427:51:14","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"5458:9:14"},{"name":"toInsert","nodeType":"YulIdentifier","src":"5469:8:14"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"5439:18:14"},"nodeType":"YulFunctionCall","src":"5439:39:14"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"5427:8:14"}]},{"nodeType":"YulAssignment","src":"5487:30:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5500:5:14"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"5511:4:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5507:3:14"},"nodeType":"YulFunctionCall","src":"5507:9:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5496:3:14"},"nodeType":"YulFunctionCall","src":"5496:21:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5487:5:14"}]},{"nodeType":"YulAssignment","src":"5526:40:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5539:5:14"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"5550:8:14"},{"name":"mask","nodeType":"YulIdentifier","src":"5560:4:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5546:3:14"},"nodeType":"YulFunctionCall","src":"5546:19:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5536:2:14"},"nodeType":"YulFunctionCall","src":"5536:30:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5526:6:14"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5216:5:14","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"5223:10:14","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"5235:8:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5248:6:14","type":""}],"src":"5179:393:14"},{"body":{"nodeType":"YulBlock","src":"5623:32:14","statements":[{"nodeType":"YulAssignment","src":"5633:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"5644:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5633:7:14"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5605:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5615:7:14","type":""}],"src":"5578:77:14"},{"body":{"nodeType":"YulBlock","src":"5693:28:14","statements":[{"nodeType":"YulAssignment","src":"5703:12:14","value":{"name":"value","nodeType":"YulIdentifier","src":"5710:5:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5703:3:14"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5679:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5689:3:14","type":""}],"src":"5661:60:14"},{"body":{"nodeType":"YulBlock","src":"5787:82:14","statements":[{"nodeType":"YulAssignment","src":"5797:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5855:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5837:17:14"},"nodeType":"YulFunctionCall","src":"5837:24:14"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"5828:8:14"},"nodeType":"YulFunctionCall","src":"5828:34:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5810:17:14"},"nodeType":"YulFunctionCall","src":"5810:53:14"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"5797:9:14"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5767:5:14","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"5777:9:14","type":""}],"src":"5727:142:14"},{"body":{"nodeType":"YulBlock","src":"5922:28:14","statements":[{"nodeType":"YulAssignment","src":"5932:12:14","value":{"name":"value","nodeType":"YulIdentifier","src":"5939:5:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5932:3:14"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5908:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5918:3:14","type":""}],"src":"5875:75:14"},{"body":{"nodeType":"YulBlock","src":"6032:193:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6042:63:14","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"6097:7:14"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6066:30:14"},"nodeType":"YulFunctionCall","src":"6066:39:14"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"6046:16:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6121:4:14"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6161:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6155:5:14"},"nodeType":"YulFunctionCall","src":"6155:11:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6168:6:14"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"6200:16:14"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"6176:23:14"},"nodeType":"YulFunctionCall","src":"6176:41:14"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"6127:27:14"},"nodeType":"YulFunctionCall","src":"6127:91:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6114:6:14"},"nodeType":"YulFunctionCall","src":"6114:105:14"},"nodeType":"YulExpressionStatement","src":"6114:105:14"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"6009:4:14","type":""},{"name":"offset","nodeType":"YulTypedName","src":"6015:6:14","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"6023:7:14","type":""}],"src":"5956:269:14"},{"body":{"nodeType":"YulBlock","src":"6280:24:14","statements":[{"nodeType":"YulAssignment","src":"6290:8:14","value":{"kind":"number","nodeType":"YulLiteral","src":"6297:1:14","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6290:3:14"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6276:3:14","type":""}],"src":"6231:73:14"},{"body":{"nodeType":"YulBlock","src":"6363:136:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6373:46:14","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"6387:30:14"},"nodeType":"YulFunctionCall","src":"6387:32:14"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"6377:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6472:4:14"},{"name":"offset","nodeType":"YulIdentifier","src":"6478:6:14"},{"name":"zero_0","nodeType":"YulIdentifier","src":"6486:6:14"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6428:43:14"},"nodeType":"YulFunctionCall","src":"6428:65:14"},"nodeType":"YulExpressionStatement","src":"6428:65:14"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"6349:4:14","type":""},{"name":"offset","nodeType":"YulTypedName","src":"6355:6:14","type":""}],"src":"6310:189:14"},{"body":{"nodeType":"YulBlock","src":"6555:136:14","statements":[{"body":{"nodeType":"YulBlock","src":"6622:63:14","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"6666:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"6673:1:14","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"6636:29:14"},"nodeType":"YulFunctionCall","src":"6636:39:14"},"nodeType":"YulExpressionStatement","src":"6636:39:14"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"6575:5:14"},{"name":"end","nodeType":"YulIdentifier","src":"6582:3:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6572:2:14"},"nodeType":"YulFunctionCall","src":"6572:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6587:26:14","statements":[{"nodeType":"YulAssignment","src":"6589:22:14","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"6602:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"6609:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6598:3:14"},"nodeType":"YulFunctionCall","src":"6598:13:14"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"6589:5:14"}]}]},"pre":{"nodeType":"YulBlock","src":"6569:2:14","statements":[]},"src":"6565:120:14"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"6543:5:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"6550:3:14","type":""}],"src":"6505:186:14"},{"body":{"nodeType":"YulBlock","src":"6776:464:14","statements":[{"body":{"nodeType":"YulBlock","src":"6802:431:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6816:54:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6864:5:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6832:31:14"},"nodeType":"YulFunctionCall","src":"6832:38:14"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"6820:8:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6883:63:14","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6906:8:14"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6934:10:14"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6916:17:14"},"nodeType":"YulFunctionCall","src":"6916:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6902:3:14"},"nodeType":"YulFunctionCall","src":"6902:44:14"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6887:11:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7103:27:14","statements":[{"nodeType":"YulAssignment","src":"7105:23:14","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"7120:8:14"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"7105:11:14"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"7087:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"7099:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7084:2:14"},"nodeType":"YulFunctionCall","src":"7084:18:14"},"nodeType":"YulIf","src":"7081:49:14"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"7172:11:14"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"7189:8:14"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"7217:3:14"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"7199:17:14"},"nodeType":"YulFunctionCall","src":"7199:22:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7185:3:14"},"nodeType":"YulFunctionCall","src":"7185:37:14"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"7143:28:14"},"nodeType":"YulFunctionCall","src":"7143:80:14"},"nodeType":"YulExpressionStatement","src":"7143:80:14"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6793:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"6798:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6790:2:14"},"nodeType":"YulFunctionCall","src":"6790:11:14"},"nodeType":"YulIf","src":"6787:446:14"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6752:5:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"6759:3:14","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6764:10:14","type":""}],"src":"6697:543:14"},{"body":{"nodeType":"YulBlock","src":"7309:54:14","statements":[{"nodeType":"YulAssignment","src":"7319:37:14","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"7344:4:14"},{"name":"value","nodeType":"YulIdentifier","src":"7350:5:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7340:3:14"},"nodeType":"YulFunctionCall","src":"7340:16:14"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"7319:8:14"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"7284:4:14","type":""},{"name":"value","nodeType":"YulTypedName","src":"7290:5:14","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"7300:8:14","type":""}],"src":"7246:117:14"},{"body":{"nodeType":"YulBlock","src":"7420:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7430:68:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7479:1:14","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"7482:5:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7475:3:14"},"nodeType":"YulFunctionCall","src":"7475:13:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7494:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7490:3:14"},"nodeType":"YulFunctionCall","src":"7490:6:14"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"7446:28:14"},"nodeType":"YulFunctionCall","src":"7446:51:14"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7442:3:14"},"nodeType":"YulFunctionCall","src":"7442:56:14"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"7434:4:14","type":""}]},{"nodeType":"YulAssignment","src":"7507:25:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7521:4:14"},{"name":"mask","nodeType":"YulIdentifier","src":"7527:4:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7517:3:14"},"nodeType":"YulFunctionCall","src":"7517:15:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7507:6:14"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"7397:4:14","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"7403:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7413:6:14","type":""}],"src":"7369:169:14"},{"body":{"nodeType":"YulBlock","src":"7624:214:14","statements":[{"nodeType":"YulAssignment","src":"7757:37:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7784:4:14"},{"name":"len","nodeType":"YulIdentifier","src":"7790:3:14"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7765:18:14"},"nodeType":"YulFunctionCall","src":"7765:29:14"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7757:4:14"}]},{"nodeType":"YulAssignment","src":"7803:29:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7814:4:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7824:1:14","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"7827:3:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7820:3:14"},"nodeType":"YulFunctionCall","src":"7820:11:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7811:2:14"},"nodeType":"YulFunctionCall","src":"7811:21:14"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7803:4:14"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"7605:4:14","type":""},{"name":"len","nodeType":"YulTypedName","src":"7611:3:14","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"7619:4:14","type":""}],"src":"7543:295:14"},{"body":{"nodeType":"YulBlock","src":"7935:1303:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7946:51:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7993:3:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7960:32:14"},"nodeType":"YulFunctionCall","src":"7960:37:14"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"7950:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"8082:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8084:16:14"},"nodeType":"YulFunctionCall","src":"8084:18:14"},"nodeType":"YulExpressionStatement","src":"8084:18:14"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8054:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8062:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8051:2:14"},"nodeType":"YulFunctionCall","src":"8051:30:14"},"nodeType":"YulIf","src":"8048:56:14"},{"nodeType":"YulVariableDeclaration","src":"8114:52:14","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8160:4:14"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8154:5:14"},"nodeType":"YulFunctionCall","src":"8154:11:14"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"8128:25:14"},"nodeType":"YulFunctionCall","src":"8128:38:14"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"8118:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8259:4:14"},{"name":"oldLen","nodeType":"YulIdentifier","src":"8265:6:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"8273:6:14"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"8213:45:14"},"nodeType":"YulFunctionCall","src":"8213:67:14"},"nodeType":"YulExpressionStatement","src":"8213:67:14"},{"nodeType":"YulVariableDeclaration","src":"8290:18:14","value":{"kind":"number","nodeType":"YulLiteral","src":"8307:1:14","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"8294:9:14","type":""}]},{"nodeType":"YulAssignment","src":"8318:17:14","value":{"kind":"number","nodeType":"YulLiteral","src":"8331:4:14","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8318:9:14"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"8382:611:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8396:37:14","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8415:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8427:4:14","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8423:3:14"},"nodeType":"YulFunctionCall","src":"8423:9:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8411:3:14"},"nodeType":"YulFunctionCall","src":"8411:22:14"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"8400:7:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8447:51:14","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8493:4:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"8461:31:14"},"nodeType":"YulFunctionCall","src":"8461:37:14"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"8451:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8511:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"8520:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8515:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"8579:163:14","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8604:6:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8622:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8627:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8618:3:14"},"nodeType":"YulFunctionCall","src":"8618:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8612:5:14"},"nodeType":"YulFunctionCall","src":"8612:26:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8597:6:14"},"nodeType":"YulFunctionCall","src":"8597:42:14"},"nodeType":"YulExpressionStatement","src":"8597:42:14"},{"nodeType":"YulAssignment","src":"8656:24:14","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8670:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8678:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8666:3:14"},"nodeType":"YulFunctionCall","src":"8666:14:14"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8656:6:14"}]},{"nodeType":"YulAssignment","src":"8697:31:14","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8714:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8725:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8710:3:14"},"nodeType":"YulFunctionCall","src":"8710:18:14"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8697:9:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8545:1:14"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"8548:7:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8542:2:14"},"nodeType":"YulFunctionCall","src":"8542:14:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8557:21:14","statements":[{"nodeType":"YulAssignment","src":"8559:17:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8568:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"8571:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8564:3:14"},"nodeType":"YulFunctionCall","src":"8564:12:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8559:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"8538:3:14","statements":[]},"src":"8534:208:14"},{"body":{"nodeType":"YulBlock","src":"8778:156:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8796:43:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8823:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8828:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8819:3:14"},"nodeType":"YulFunctionCall","src":"8819:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8813:5:14"},"nodeType":"YulFunctionCall","src":"8813:26:14"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8800:9:14","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8863:6:14"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8890:9:14"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8905:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8913:4:14","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8901:3:14"},"nodeType":"YulFunctionCall","src":"8901:17:14"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"8871:18:14"},"nodeType":"YulFunctionCall","src":"8871:48:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8856:6:14"},"nodeType":"YulFunctionCall","src":"8856:64:14"},"nodeType":"YulExpressionStatement","src":"8856:64:14"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8761:7:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"8770:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8758:2:14"},"nodeType":"YulFunctionCall","src":"8758:19:14"},"nodeType":"YulIf","src":"8755:179:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8954:4:14"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8968:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8976:1:14","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8964:3:14"},"nodeType":"YulFunctionCall","src":"8964:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"8980:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8960:3:14"},"nodeType":"YulFunctionCall","src":"8960:22:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8947:6:14"},"nodeType":"YulFunctionCall","src":"8947:36:14"},"nodeType":"YulExpressionStatement","src":"8947:36:14"}]},"nodeType":"YulCase","src":"8375:618:14","value":{"kind":"number","nodeType":"YulLiteral","src":"8380:1:14","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"9010:222:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9024:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9037:1:14","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9028:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"9061:67:14","statements":[{"nodeType":"YulAssignment","src":"9079:35:14","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9098:3:14"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"9103:9:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9094:3:14"},"nodeType":"YulFunctionCall","src":"9094:19:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9088:5:14"},"nodeType":"YulFunctionCall","src":"9088:26:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9079:5:14"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"9054:6:14"},"nodeType":"YulIf","src":"9051:77:14"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9148:4:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9207:5:14"},{"name":"newLen","nodeType":"YulIdentifier","src":"9214:6:14"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"9154:52:14"},"nodeType":"YulFunctionCall","src":"9154:67:14"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9141:6:14"},"nodeType":"YulFunctionCall","src":"9141:81:14"},"nodeType":"YulExpressionStatement","src":"9141:81:14"}]},"nodeType":"YulCase","src":"9002:230:14","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8355:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"8363:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8352:2:14"},"nodeType":"YulFunctionCall","src":"8352:14:14"},"nodeType":"YulSwitch","src":"8345:887:14"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7924:4:14","type":""},{"name":"src","nodeType":"YulTypedName","src":"7930:3:14","type":""}],"src":"7843:1395:14"},{"body":{"nodeType":"YulBlock","src":"9358:34:14","statements":[{"nodeType":"YulAssignment","src":"9368:18:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"9383:3:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9368:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9330:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"9335:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9346:11:14","type":""}],"src":"9244:148:14"},{"body":{"nodeType":"YulBlock","src":"9508:280:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9518:53:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9565:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9532:32:14"},"nodeType":"YulFunctionCall","src":"9532:39:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9522:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9580:96:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9664:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"9669:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9587:76:14"},"nodeType":"YulFunctionCall","src":"9587:89:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9580:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9724:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"9731:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9720:3:14"},"nodeType":"YulFunctionCall","src":"9720:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"9738:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"9743:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9685:34:14"},"nodeType":"YulFunctionCall","src":"9685:65:14"},"nodeType":"YulExpressionStatement","src":"9685:65:14"},{"nodeType":"YulAssignment","src":"9759:23:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9770:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"9775:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9766:3:14"},"nodeType":"YulFunctionCall","src":"9766:16:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9759:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9489:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9496:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9504:3:14","type":""}],"src":"9398:390:14"},{"body":{"nodeType":"YulBlock","src":"9930:139:14","statements":[{"nodeType":"YulAssignment","src":"9941:102:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10030:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"10039:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9948:81:14"},"nodeType":"YulFunctionCall","src":"9948:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9941:3:14"}]},{"nodeType":"YulAssignment","src":"10053:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"10060:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10053:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9909:3:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9915:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9926:3:14","type":""}],"src":"9794:275:14"},{"body":{"nodeType":"YulBlock","src":"10259:251:14","statements":[{"nodeType":"YulAssignment","src":"10270:102:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10359:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"10368:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10277:81:14"},"nodeType":"YulFunctionCall","src":"10277:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10270:3:14"}]},{"nodeType":"YulAssignment","src":"10382:102:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10471:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"10480:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10389:81:14"},"nodeType":"YulFunctionCall","src":"10389:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10382:3:14"}]},{"nodeType":"YulAssignment","src":"10494:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"10501:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10494:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10230:3:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10236:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10244:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10255:3:14","type":""}],"src":"10075:435:14"},{"body":{"nodeType":"YulBlock","src":"10544:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10561:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10564:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10554:6:14"},"nodeType":"YulFunctionCall","src":"10554:88:14"},"nodeType":"YulExpressionStatement","src":"10554:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10658:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10661:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10651:6:14"},"nodeType":"YulFunctionCall","src":"10651:15:14"},"nodeType":"YulExpressionStatement","src":"10651:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10682:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10685:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10675:6:14"},"nodeType":"YulFunctionCall","src":"10675:15:14"},"nodeType":"YulExpressionStatement","src":"10675:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10516:180:14"},{"body":{"nodeType":"YulBlock","src":"10746:147:14","statements":[{"nodeType":"YulAssignment","src":"10756:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10779:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10761:17:14"},"nodeType":"YulFunctionCall","src":"10761:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10756:1:14"}]},{"nodeType":"YulAssignment","src":"10790:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10813:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10795:17:14"},"nodeType":"YulFunctionCall","src":"10795:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10790:1:14"}]},{"nodeType":"YulAssignment","src":"10824:16:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10835:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"10838:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10831:3:14"},"nodeType":"YulFunctionCall","src":"10831:9:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10824:3:14"}]},{"body":{"nodeType":"YulBlock","src":"10864:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10866:16:14"},"nodeType":"YulFunctionCall","src":"10866:18:14"},"nodeType":"YulExpressionStatement","src":"10866:18:14"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10856:1:14"},{"name":"sum","nodeType":"YulIdentifier","src":"10859:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10853:2:14"},"nodeType":"YulFunctionCall","src":"10853:10:14"},"nodeType":"YulIf","src":"10850:36:14"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10733:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"10736:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10742:3:14","type":""}],"src":"10702:191:14"},{"body":{"nodeType":"YulBlock","src":"10927:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10944:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10947:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10937:6:14"},"nodeType":"YulFunctionCall","src":"10937:88:14"},"nodeType":"YulExpressionStatement","src":"10937:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11041:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11044:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11034:6:14"},"nodeType":"YulFunctionCall","src":"11034:15:14"},"nodeType":"YulExpressionStatement","src":"11034:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11065:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11068:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11058:6:14"},"nodeType":"YulFunctionCall","src":"11058:15:14"},"nodeType":"YulExpressionStatement","src":"11058:15:14"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"10899:180:14"},{"body":{"nodeType":"YulBlock","src":"11127:143:14","statements":[{"nodeType":"YulAssignment","src":"11137:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11160:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11142:17:14"},"nodeType":"YulFunctionCall","src":"11142:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11137:1:14"}]},{"nodeType":"YulAssignment","src":"11171:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11194:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11176:17:14"},"nodeType":"YulFunctionCall","src":"11176:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11171:1:14"}]},{"body":{"nodeType":"YulBlock","src":"11218:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"11220:16:14"},"nodeType":"YulFunctionCall","src":"11220:18:14"},"nodeType":"YulExpressionStatement","src":"11220:18:14"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11215:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11208:6:14"},"nodeType":"YulFunctionCall","src":"11208:9:14"},"nodeType":"YulIf","src":"11205:35:14"},{"nodeType":"YulAssignment","src":"11250:14:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11259:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"11262:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11255:3:14"},"nodeType":"YulFunctionCall","src":"11255:9:14"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"11250:1:14"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11116:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"11119:1:14","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"11125:1:14","type":""}],"src":"11085:185:14"},{"body":{"nodeType":"YulBlock","src":"11324:362:14","statements":[{"nodeType":"YulAssignment","src":"11334:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11357:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11339:17:14"},"nodeType":"YulFunctionCall","src":"11339:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11334:1:14"}]},{"nodeType":"YulAssignment","src":"11368:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11391:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11373:17:14"},"nodeType":"YulFunctionCall","src":"11373:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11368:1:14"}]},{"nodeType":"YulVariableDeclaration","src":"11402:28:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11425:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"11428:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11421:3:14"},"nodeType":"YulFunctionCall","src":"11421:9:14"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"11406:11:14","type":""}]},{"nodeType":"YulAssignment","src":"11439:41:14","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"11468:11:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11450:17:14"},"nodeType":"YulFunctionCall","src":"11450:30:14"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"11439:7:14"}]},{"body":{"nodeType":"YulBlock","src":"11657:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11659:16:14"},"nodeType":"YulFunctionCall","src":"11659:18:14"},"nodeType":"YulExpressionStatement","src":"11659:18:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11590:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11583:6:14"},"nodeType":"YulFunctionCall","src":"11583:9:14"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11613:1:14"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"11620:7:14"},{"name":"x","nodeType":"YulIdentifier","src":"11629:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11616:3:14"},"nodeType":"YulFunctionCall","src":"11616:15:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11610:2:14"},"nodeType":"YulFunctionCall","src":"11610:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11563:2:14"},"nodeType":"YulFunctionCall","src":"11563:83:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11543:6:14"},"nodeType":"YulFunctionCall","src":"11543:113:14"},"nodeType":"YulIf","src":"11540:139:14"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11307:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"11310:1:14","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"11316:7:14","type":""}],"src":"11276:410:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b506040516200328838038062003288833981810160405281019062000037919062000570565b6040518060400160405280600f81526020017f44796e616d696320535647204e465400000000000000000000000000000000008152506040518060400160405280600381526020017f44534e00000000000000000000000000000000000000000000000000000000008152508160009081620000b4919062000855565b508060019081620000c6919062000855565b5050506000600681905550620000e2826200015260201b60201c565b60079081620000f2919062000855565b5062000104816200015260201b60201c565b6008908162000114919062000855565b508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505062000adb565b6060600062000188836040516020016200016d91906200097e565b604051602081830303815290604052620001eb60201b60201c565b90506040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525081604051602001620001d492919062000997565b604051602081830303815290604052915050919050565b606060008251036200020f5760405180602001604052806000815250905062000373565b6000604051806060016040528060408152602001620032486040913990506000600360028551620002419190620009ee565b6200024d919062000a58565b60046200025b919062000a90565b905060006020826200026e9190620009ee565b67ffffffffffffffff8111156200028a57620002896200040c565b5b6040519080825280601f01601f191660200182016040528015620002bd5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156200032e576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050620002d1565b6003895106600181146200034b57600281146200035c5762000367565b613d3d60f01b600283035262000367565b603d60f81b60018303525b50505050508093505050505b919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003b9826200038c565b9050919050565b620003cb81620003ac565b8114620003d757600080fd5b50565b600081519050620003eb81620003c0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200044682620003fb565b810181811067ffffffffffffffff821117156200046857620004676200040c565b5b80604052505050565b60006200047d62000378565b90506200048b82826200043b565b919050565b600067ffffffffffffffff821115620004ae57620004ad6200040c565b5b620004b982620003fb565b9050602081019050919050565b60005b83811015620004e6578082015181840152602081019050620004c9565b60008484015250505050565b600062000509620005038462000490565b62000471565b905082815260208101848484011115620005285762000527620003f6565b5b62000535848285620004c6565b509392505050565b600082601f830112620005555762000554620003f1565b5b815162000567848260208601620004f2565b91505092915050565b6000806000606084860312156200058c576200058b62000382565b5b60006200059c86828701620003da565b935050602084015167ffffffffffffffff811115620005c057620005bf62000387565b5b620005ce868287016200053d565b925050604084015167ffffffffffffffff811115620005f257620005f162000387565b5b62000600868287016200053d565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200065d57607f821691505b60208210810362000673576200067262000615565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006dd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200069e565b620006e986836200069e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000736620007306200072a8462000701565b6200070b565b62000701565b9050919050565b6000819050919050565b620007528362000715565b6200076a62000761826200073d565b848454620006ab565b825550505050565b600090565b6200078162000772565b6200078e81848462000747565b505050565b5b81811015620007b657620007aa60008262000777565b60018101905062000794565b5050565b601f8211156200080557620007cf8162000679565b620007da846200068e565b81016020851015620007ea578190505b62000802620007f9856200068e565b83018262000793565b50505b505050565b600082821c905092915050565b60006200082a600019846008026200080a565b1980831691505092915050565b600062000845838362000817565b9150826002028217905092915050565b62000860826200060a565b67ffffffffffffffff8111156200087c576200087b6200040c565b5b62000888825462000644565b62000895828285620007ba565b600060209050601f831160018114620008cd5760008415620008b8578287015190505b620008c4858262000837565b86555062000934565b601f198416620008dd8662000679565b60005b828110156200090757848901518255600182019150602085019450602081019050620008e0565b8683101562000927578489015162000923601f89168262000817565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600062000954826200060a565b6200096081856200093c565b935062000972818560208601620004c6565b80840191505092915050565b60006200098c828462000947565b915081905092915050565b6000620009a5828562000947565b9150620009b3828462000947565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620009fb8262000701565b915062000a088362000701565b925082820190508082111562000a235762000a22620009bf565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000a658262000701565b915062000a728362000701565b92508262000a855762000a8462000a29565b5b828204905092915050565b600062000a9d8262000701565b915062000aaa8362000701565b925082820262000aba8162000701565b9150828204841483151762000ad45762000ad3620009bf565b5b5092915050565b60805161275162000af760003960006108d301526127516000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063c87b56dd11610066578063c87b56dd146102bd578063e2ed50cb146102ed578063e425aded14610309578063e985e9c51461033957610100565b806370a082311461023757806395d89b4114610267578063a22cb46514610285578063b88d4fde146102a157610100565b806323b872dd116100d357806323b872dd1461019f57806330d871c6146101bb57806342842e0e146101eb5780636352211e1461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a919061198c565b610369565b60405161012c91906119d4565b60405180910390f35b61013d61044b565b60405161014a9190611a7f565b60405180910390f35b61016d60048036038101906101689190611ad7565b6104dd565b60405161017a9190611b45565b60405180910390f35b61019d60048036038101906101989190611b8c565b6104f9565b005b6101b960048036038101906101b49190611bcc565b61050f565b005b6101d560048036038101906101d09190611d54565b610611565b6040516101e29190611a7f565b60405180910390f35b61020560048036038101906102009190611bcc565b61069e565b005b610221600480360381019061021c9190611ad7565b6106be565b60405161022e9190611b45565b60405180910390f35b610251600480360381019061024c9190611d9d565b6106d0565b60405161025e9190611dd9565b60405180910390f35b61026f61078a565b60405161027c9190611a7f565b60405180910390f35b61029f600480360381019061029a9190611e20565b61081c565b005b6102bb60048036038101906102b69190611f01565b610832565b005b6102d760048036038101906102d29190611ad7565b61084f565b6040516102e49190611a7f565b60405180910390f35b61030760048036038101906103029190611fba565b610aff565b005b610323600480360381019061031e9190611ad7565b610b7c565b6040516103309190611ff6565b60405180910390f35b610353600480360381019061034e9190612011565b610b94565b60405161036091906119d4565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061043457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610444575061044382610c28565b5b9050919050565b60606000805461045a90612080565b80601f016020809104026020016040519081016040528092919081815260200182805461048690612080565b80156104d35780601f106104a8576101008083540402835291602001916104d3565b820191906000526020600020905b8154815290600101906020018083116104b657829003601f168201915b5050505050905090565b60006104e882610c92565b506104f282610d1a565b9050919050565b61050b8282610506610d57565b610d5f565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105815760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105789190611b45565b60405180910390fd5b60006105958383610590610d57565b610d71565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060b578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610602939291906120b1565b60405180910390fd5b50505050565b6060600061063d836040516020016106299190612124565b604051602081830303815290604052610f8b565b90506040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152508160405160200161068792919061213b565b604051602081830303815290604052915050919050565b6106b983838360405180602001604052806000815250610832565b505050565b60006106c982610c92565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107435760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161073a9190611b45565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461079990612080565b80601f01602080910402602001604051908101604052809291908181526020018280546107c590612080565b80156108125780601f106107e757610100808354040283529160200191610812565b820191906000526020600020905b8154815290600101906020018083116107f557829003601f168201915b5050505050905090565b61082e610827610d57565b8383611103565b5050565b61083d84848461050f565b61084984848484611272565b50505050565b606061085a82611429565b73ffffffffffffffffffffffffffffffffffffffff1661087983610c92565b73ffffffffffffffffffffffffffffffffffffffff16146108cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c6906121ab565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190612237565b50505091505060006007805461097590612080565b80601f01602080910402602001604051908101604052809291908181526020018280546109a190612080565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905060096000858152602001908152602001600020548212610a9d5760088054610a1c90612080565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4890612080565b8015610a955780601f10610a6a57610100808354040283529160200191610a95565b820191906000526020600020905b815481529060010190602001808311610a7857829003601f168201915b505050505090505b610aa5611466565b610ad6610ab061044b565b83604051602001610ac292919061247a565b604051602081830303815290604052610f8b565b604051602001610ae792919061213b565b60405160208183030381529060405292505050919050565b8060096000600654815260200190815260200160002081905550600160066000828254610b2c91906124f9565b92505081905550610b3f336006546114a3565b6006547f882d3b5a729a8bb95cf6c0083c99b42ecd9637123d4425bd7b768877fd8af8b082604051610b719190611ff6565b60405180910390a250565b60096020528060005260406000206000915090505481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080610c9e83611429565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d1157826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610d089190611dd9565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610d6c83838360016114c1565b505050565b600080610d7d84611429565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610dbf57610dbe818486611686565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e5057610e016000856000806114c1565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610ed3576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b60606000825103610fad576040518060200160405280600081525090506110fe565b60006040518060600160405280604081526020016126dc6040913990506000600360028551610fdc91906124f9565b610fe6919061255c565b6004610ff2919061258d565b9050600060208261100391906124f9565b67ffffffffffffffff81111561101c5761101b611c29565b5b6040519080825280601f01601f19166020018201604052801561104e5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156110bd576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611062565b6003895106600181146110d757600281146110e7576110f2565b613d3d60f01b60028303526110f2565b603d60f81b60018303525b50505050508093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361117457816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161116b9190611b45565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161126591906119d4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611423578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026112b6610d57565b8685856040518563ffffffff1660e01b81526004016112d89493929190612624565b6020604051808303816000875af192505050801561131457506040513d601f19601f820116820180604052508101906113119190612685565b60015b611398573d8060008114611344576040519150601f19603f3d011682016040523d82523d6000602084013e611349565b606091505b50600081510361139057836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113879190611b45565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461142157836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016114189190611b45565b60405180910390fd5b505b50505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6114bd82826040518060200160405280600081525061174a565b5050565b80806114fa5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561162e57600061150a84610c92565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561157557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561158857506115868184610b94565b155b156115ca57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016115c19190611b45565b60405180910390fd5b811561162c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611691838383611766565b61174557600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361170657806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016116fd9190611dd9565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161173c9291906126b2565b60405180910390fd5b505050565b6117548383611827565b6117616000848484611272565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561181e57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117df57506117de8484610b94565b5b8061181d57508273ffffffffffffffffffffffffffffffffffffffff1661180583610d1a565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118995760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118909190611b45565b60405180910390fd5b60006118a783836000610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461191b5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016119129190611b45565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61196981611934565b811461197457600080fd5b50565b60008135905061198681611960565b92915050565b6000602082840312156119a2576119a161192a565b5b60006119b084828501611977565b91505092915050565b60008115159050919050565b6119ce816119b9565b82525050565b60006020820190506119e960008301846119c5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a29578082015181840152602081019050611a0e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a51826119ef565b611a5b81856119fa565b9350611a6b818560208601611a0b565b611a7481611a35565b840191505092915050565b60006020820190508181036000830152611a998184611a46565b905092915050565b6000819050919050565b611ab481611aa1565b8114611abf57600080fd5b50565b600081359050611ad181611aab565b92915050565b600060208284031215611aed57611aec61192a565b5b6000611afb84828501611ac2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2f82611b04565b9050919050565b611b3f81611b24565b82525050565b6000602082019050611b5a6000830184611b36565b92915050565b611b6981611b24565b8114611b7457600080fd5b50565b600081359050611b8681611b60565b92915050565b60008060408385031215611ba357611ba261192a565b5b6000611bb185828601611b77565b9250506020611bc285828601611ac2565b9150509250929050565b600080600060608486031215611be557611be461192a565b5b6000611bf386828701611b77565b9350506020611c0486828701611b77565b9250506040611c1586828701611ac2565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c6182611a35565b810181811067ffffffffffffffff82111715611c8057611c7f611c29565b5b80604052505050565b6000611c93611920565b9050611c9f8282611c58565b919050565b600067ffffffffffffffff821115611cbf57611cbe611c29565b5b611cc882611a35565b9050602081019050919050565b82818337600083830152505050565b6000611cf7611cf284611ca4565b611c89565b905082815260208101848484011115611d1357611d12611c24565b5b611d1e848285611cd5565b509392505050565b600082601f830112611d3b57611d3a611c1f565b5b8135611d4b848260208601611ce4565b91505092915050565b600060208284031215611d6a57611d6961192a565b5b600082013567ffffffffffffffff811115611d8857611d8761192f565b5b611d9484828501611d26565b91505092915050565b600060208284031215611db357611db261192a565b5b6000611dc184828501611b77565b91505092915050565b611dd381611aa1565b82525050565b6000602082019050611dee6000830184611dca565b92915050565b611dfd816119b9565b8114611e0857600080fd5b50565b600081359050611e1a81611df4565b92915050565b60008060408385031215611e3757611e3661192a565b5b6000611e4585828601611b77565b9250506020611e5685828601611e0b565b9150509250929050565b600067ffffffffffffffff821115611e7b57611e7a611c29565b5b611e8482611a35565b9050602081019050919050565b6000611ea4611e9f84611e60565b611c89565b905082815260208101848484011115611ec057611ebf611c24565b5b611ecb848285611cd5565b509392505050565b600082601f830112611ee857611ee7611c1f565b5b8135611ef8848260208601611e91565b91505092915050565b60008060008060808587031215611f1b57611f1a61192a565b5b6000611f2987828801611b77565b9450506020611f3a87828801611b77565b9350506040611f4b87828801611ac2565b925050606085013567ffffffffffffffff811115611f6c57611f6b61192f565b5b611f7887828801611ed3565b91505092959194509250565b6000819050919050565b611f9781611f84565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b600060208284031215611fd057611fcf61192a565b5b6000611fde84828501611fa5565b91505092915050565b611ff081611f84565b82525050565b600060208201905061200b6000830184611fe7565b92915050565b600080604083850312156120285761202761192a565b5b600061203685828601611b77565b925050602061204785828601611b77565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061209857607f821691505b6020821081036120ab576120aa612051565b5b50919050565b60006060820190506120c66000830186611b36565b6120d36020830185611dca565b6120e06040830184611b36565b949350505050565b600081905092915050565b60006120fe826119ef565b61210881856120e8565b9350612118818560208601611a0b565b80840191505092915050565b600061213082846120f3565b915081905092915050565b600061214782856120f3565b915061215382846120f3565b91508190509392505050565b7f55524920517565727920666f72206e6f6e6578697374656e7420746f6b656e00600082015250565b6000612195601f836119fa565b91506121a08261215f565b602082019050919050565b600060208201905081810360008301526121c481612188565b9050919050565b600069ffffffffffffffffffff82169050919050565b6121ea816121cb565b81146121f557600080fd5b50565b600081519050612207816121e1565b92915050565b60008151905061221c81611f8e565b92915050565b60008151905061223181611aab565b92915050565b600080600080600060a086880312156122535761225261192a565b5b6000612261888289016121f8565b95505060206122728882890161220d565b945050604061228388828901612222565b935050606061229488828901612222565b92505060806122a5888289016121f8565b9150509295509295909350565b7f207b226e616d65223a2200000000000000000000000000000000000000000000600082015250565b60006122e8600a836120e8565b91506122f3826122b2565b600a82019050919050565b7f222c20226465736372697074696f6e223a2022416e204e46542074686174206360008201527f68616e676573206261736564206f6e2074686520436861696e6c696e6b20466560208201527f6564222c00000000000000000000000000000000000000000000000000000000604082015250565b60006123806044836120e8565b915061238b826122fe565b604482019050919050565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a202200000000000000000000000000000000000000000000000000000000604082015250565b60006124186044836120e8565b915061242382612396565b604482019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006124646002836120e8565b915061246f8261242e565b600282019050919050565b6000612485826122db565b915061249182856120f3565b915061249c82612373565b91506124a78261240b565b91506124b382846120f3565b91506124be82612457565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061250482611aa1565b915061250f83611aa1565b9250828201905080821115612527576125266124ca565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061256782611aa1565b915061257283611aa1565b9250826125825761258161252d565b5b828204905092915050565b600061259882611aa1565b91506125a383611aa1565b92508282026125b181611aa1565b915082820484148315176125c8576125c76124ca565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b60006125f6826125cf565b61260081856125da565b9350612610818560208601611a0b565b61261981611a35565b840191505092915050565b60006080820190506126396000830187611b36565b6126466020830186611b36565b6126536040830185611dca565b818103606083015261266581846125eb565b905095945050505050565b60008151905061267f81611960565b92915050565b60006020828403121561269b5761269a61192a565b5b60006126a984828501612670565b91505092915050565b60006040820190506126c76000830185611b36565b6126d46020830184611dca565b939250505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d42edc2714f2566ef37671b1460f34c2a53bd5dfbbe242974b227d4156535bb164736f6c634300081400334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3288 CODESIZE SUB DUP1 PUSH3 0x3288 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x570 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x44796E616D696320535647204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x44534E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0xB4 SWAP2 SWAP1 PUSH3 0x855 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xC6 SWAP2 SWAP1 PUSH3 0x855 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH3 0xE2 DUP3 PUSH3 0x152 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x7 SWAP1 DUP2 PUSH3 0xF2 SWAP2 SWAP1 PUSH3 0x855 JUMP JUMPDEST POP PUSH3 0x104 DUP2 PUSH3 0x152 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x8 SWAP1 DUP2 PUSH3 0x114 SWAP2 SWAP1 PUSH3 0x855 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP PUSH3 0xADB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH3 0x188 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x16D SWAP2 SWAP1 PUSH3 0x97E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH3 0x1EB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1D4 SWAP3 SWAP2 SWAP1 PUSH3 0x997 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SUB PUSH3 0x20F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH3 0x373 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x3248 PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x2 DUP6 MLOAD PUSH3 0x241 SWAP2 SWAP1 PUSH3 0x9EE JUMP JUMPDEST PUSH3 0x24D SWAP2 SWAP1 PUSH3 0xA58 JUMP JUMPDEST PUSH1 0x4 PUSH3 0x25B SWAP2 SWAP1 PUSH3 0xA90 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP3 PUSH3 0x26E SWAP2 SWAP1 PUSH3 0x9EE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x28A JUMPI PUSH3 0x289 PUSH3 0x40C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x2BD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD DUP6 DUP7 MLOAD DUP2 ADD PUSH1 0x20 DUP5 ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH3 0x32E JUMPI PUSH1 0x3 DUP4 ADD SWAP3 POP DUP3 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP POP PUSH3 0x2D1 JUMP JUMPDEST PUSH1 0x3 DUP10 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH3 0x34B JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x35C JUMPI PUSH3 0x367 JUMP JUMPDEST PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x2 DUP4 SUB MSTORE PUSH3 0x367 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x1 DUP4 SUB MSTORE JUMPDEST POP POP POP POP POP DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3B9 DUP3 PUSH3 0x38C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3CB DUP2 PUSH3 0x3AC JUMP JUMPDEST DUP2 EQ PUSH3 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x3EB DUP2 PUSH3 0x3C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x446 DUP3 PUSH3 0x3FB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x468 JUMPI PUSH3 0x467 PUSH3 0x40C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x47D PUSH3 0x378 JUMP JUMPDEST SWAP1 POP PUSH3 0x48B DUP3 DUP3 PUSH3 0x43B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x4AE JUMPI PUSH3 0x4AD PUSH3 0x40C JUMP JUMPDEST JUMPDEST PUSH3 0x4B9 DUP3 PUSH3 0x3FB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x4E6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4C9 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x509 PUSH3 0x503 DUP5 PUSH3 0x490 JUMP JUMPDEST PUSH3 0x471 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x528 JUMPI PUSH3 0x527 PUSH3 0x3F6 JUMP JUMPDEST JUMPDEST PUSH3 0x535 DUP5 DUP3 DUP6 PUSH3 0x4C6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x555 JUMPI PUSH3 0x554 PUSH3 0x3F1 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x567 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x4F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x58C JUMPI PUSH3 0x58B PUSH3 0x382 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x59C DUP7 DUP3 DUP8 ADD PUSH3 0x3DA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5C0 JUMPI PUSH3 0x5BF PUSH3 0x387 JUMP JUMPDEST JUMPDEST PUSH3 0x5CE DUP7 DUP3 DUP8 ADD PUSH3 0x53D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F2 JUMPI PUSH3 0x5F1 PUSH3 0x387 JUMP JUMPDEST JUMPDEST PUSH3 0x600 DUP7 DUP3 DUP8 ADD PUSH3 0x53D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x65D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x673 JUMPI PUSH3 0x672 PUSH3 0x615 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x6DD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x69E JUMP JUMPDEST PUSH3 0x6E9 DUP7 DUP4 PUSH3 0x69E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x736 PUSH3 0x730 PUSH3 0x72A DUP5 PUSH3 0x701 JUMP JUMPDEST PUSH3 0x70B JUMP JUMPDEST PUSH3 0x701 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x752 DUP4 PUSH3 0x715 JUMP JUMPDEST PUSH3 0x76A PUSH3 0x761 DUP3 PUSH3 0x73D JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x6AB JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x781 PUSH3 0x772 JUMP JUMPDEST PUSH3 0x78E DUP2 DUP5 DUP5 PUSH3 0x747 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x7B6 JUMPI PUSH3 0x7AA PUSH1 0x0 DUP3 PUSH3 0x777 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x794 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x805 JUMPI PUSH3 0x7CF DUP2 PUSH3 0x679 JUMP JUMPDEST PUSH3 0x7DA DUP5 PUSH3 0x68E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x7EA JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x802 PUSH3 0x7F9 DUP6 PUSH3 0x68E JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x793 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x82A PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x80A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x845 DUP4 DUP4 PUSH3 0x817 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x860 DUP3 PUSH3 0x60A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x87C JUMPI PUSH3 0x87B PUSH3 0x40C JUMP JUMPDEST JUMPDEST PUSH3 0x888 DUP3 SLOAD PUSH3 0x644 JUMP JUMPDEST PUSH3 0x895 DUP3 DUP3 DUP6 PUSH3 0x7BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x8CD JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x8B8 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x8C4 DUP6 DUP3 PUSH3 0x837 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x934 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x8DD DUP7 PUSH3 0x679 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x907 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x8E0 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x927 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x923 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x817 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x954 DUP3 PUSH3 0x60A JUMP JUMPDEST PUSH3 0x960 DUP2 DUP6 PUSH3 0x93C JUMP JUMPDEST SWAP4 POP PUSH3 0x972 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x4C6 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x98C DUP3 DUP5 PUSH3 0x947 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9A5 DUP3 DUP6 PUSH3 0x947 JUMP JUMPDEST SWAP2 POP PUSH3 0x9B3 DUP3 DUP5 PUSH3 0x947 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x9FB DUP3 PUSH3 0x701 JUMP JUMPDEST SWAP2 POP PUSH3 0xA08 DUP4 PUSH3 0x701 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0xA23 JUMPI PUSH3 0xA22 PUSH3 0x9BF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xA65 DUP3 PUSH3 0x701 JUMP JUMPDEST SWAP2 POP PUSH3 0xA72 DUP4 PUSH3 0x701 JUMP JUMPDEST SWAP3 POP DUP3 PUSH3 0xA85 JUMPI PUSH3 0xA84 PUSH3 0xA29 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xA9D DUP3 PUSH3 0x701 JUMP JUMPDEST SWAP2 POP PUSH3 0xAAA DUP4 PUSH3 0x701 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH3 0xABA DUP2 PUSH3 0x701 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH3 0xAD4 JUMPI PUSH3 0xAD3 PUSH3 0x9BF JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2751 PUSH3 0xAF7 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x8D3 ADD MSTORE PUSH2 0x2751 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xE2ED50CB EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xE425ADED EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x339 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2A1 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x30D871C6 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x207 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x183 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x198C JUMP JUMPDEST PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x19D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH2 0x44B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0x4DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x1B8C JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B4 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x50F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x1D54 JUMP JUMPDEST PUSH2 0x611 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x200 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x69E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22E SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x251 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x1D9D JUMP JUMPDEST PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26F PUSH2 0x78A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29A SWAP2 SWAP1 PUSH2 0x1E20 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x832 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D2 SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0x84F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x302 SWAP2 SWAP1 PUSH2 0x1FBA JUMP JUMPDEST PUSH2 0xAFF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x323 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31E SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x353 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0x2011 JUMP JUMPDEST PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x360 SWAP2 SWAP1 PUSH2 0x19D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x434 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x444 JUMPI POP PUSH2 0x443 DUP3 PUSH2 0xC28 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x45A SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x486 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4D3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4A8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4D3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4B6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8 DUP3 PUSH2 0xC92 JUMP JUMPDEST POP PUSH2 0x4F2 DUP3 PUSH2 0xD1A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x50B DUP3 DUP3 PUSH2 0x506 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0xD5F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x581 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x595 DUP4 DUP4 PUSH2 0x590 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0xD71 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60B JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x602 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x63D DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x629 SWAP2 SWAP1 PUSH2 0x2124 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xF8B JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x687 SWAP3 SWAP2 SWAP1 PUSH2 0x213B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6B9 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x832 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C9 DUP3 PUSH2 0xC92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x743 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73A SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x799 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7C5 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x812 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x812 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x82E PUSH2 0x827 PUSH2 0xD57 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1103 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x83D DUP5 DUP5 DUP5 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x849 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1272 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85A DUP3 PUSH2 0x1429 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x879 DUP4 PUSH2 0xC92 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C6 SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x93C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x960 SWAP2 SWAP1 PUSH2 0x2237 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x7 DUP1 SLOAD PUSH2 0x975 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9A1 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 SLT PUSH2 0xA9D JUMPI PUSH1 0x8 DUP1 SLOAD PUSH2 0xA1C SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA48 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA95 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA6A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA95 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA78 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST PUSH2 0xAA5 PUSH2 0x1466 JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0xAB0 PUSH2 0x44B JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAC2 SWAP3 SWAP2 SWAP1 PUSH2 0x247A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xF8B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAE7 SWAP3 SWAP2 SWAP1 PUSH2 0x213B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x9 PUSH1 0x0 PUSH1 0x6 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB2C SWAP2 SWAP1 PUSH2 0x24F9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xB3F CALLER PUSH1 0x6 SLOAD PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH32 0x882D3B5A729A8BB95CF6C0083C99B42ECD9637123D4425BD7B768877FD8AF8B0 DUP3 PUSH1 0x40 MLOAD PUSH2 0xB71 SWAP2 SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC9E DUP4 PUSH2 0x1429 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD11 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD08 SWAP2 SWAP1 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD6C DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14C1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD7D DUP5 PUSH2 0x1429 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDBF JUMPI PUSH2 0xDBE DUP2 DUP5 DUP7 PUSH2 0x1686 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE50 JUMPI PUSH2 0xE01 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x14C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xED3 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SUB PUSH2 0xFAD JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH2 0x10FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26DC PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x2 DUP6 MLOAD PUSH2 0xFDC SWAP2 SWAP1 PUSH2 0x24F9 JUMP JUMPDEST PUSH2 0xFE6 SWAP2 SWAP1 PUSH2 0x255C JUMP JUMPDEST PUSH1 0x4 PUSH2 0xFF2 SWAP2 SWAP1 PUSH2 0x258D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP3 PUSH2 0x1003 SWAP2 SWAP1 PUSH2 0x24F9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x101C JUMPI PUSH2 0x101B PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x104E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD DUP6 DUP7 MLOAD DUP2 ADD PUSH1 0x20 DUP5 ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x10BD JUMPI PUSH1 0x3 DUP4 ADD SWAP3 POP DUP3 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP POP PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x3 DUP10 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x10D7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x10E7 JUMPI PUSH2 0x10F2 JUMP JUMPDEST PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x2 DUP4 SUB MSTORE PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x1 DUP4 SUB MSTORE JUMPDEST POP POP POP POP POP DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1174 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x116B SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1265 SWAP2 SWAP1 PUSH2 0x19D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1423 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x12B6 PUSH2 0xD57 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2624 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1314 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1311 SWAP2 SWAP1 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1398 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1344 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1390 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1387 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x1421 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1418 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x14BD DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x174A JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x14FA JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x162E JUMPI PUSH1 0x0 PUSH2 0x150A DUP5 PUSH2 0xC92 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1575 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1588 JUMPI POP PUSH2 0x1586 DUP2 DUP5 PUSH2 0xB94 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x15CA JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C1 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x162C JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1691 DUP4 DUP4 DUP4 PUSH2 0x1766 JUMP JUMPDEST PUSH2 0x1745 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1706 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16FD SWAP2 SWAP1 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x173C SWAP3 SWAP2 SWAP1 PUSH2 0x26B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1754 DUP4 DUP4 PUSH2 0x1827 JUMP JUMPDEST PUSH2 0x1761 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1272 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x181E JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x17DF JUMPI POP PUSH2 0x17DE DUP5 DUP5 PUSH2 0xB94 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x181D JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1805 DUP4 PUSH2 0xD1A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1899 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1890 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18A7 DUP4 DUP4 PUSH1 0x0 PUSH2 0xD71 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x191B JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1912 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1969 DUP2 PUSH2 0x1934 JUMP JUMPDEST DUP2 EQ PUSH2 0x1974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1986 DUP2 PUSH2 0x1960 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A2 JUMPI PUSH2 0x19A1 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19B0 DUP5 DUP3 DUP6 ADD PUSH2 0x1977 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19CE DUP2 PUSH2 0x19B9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x19E9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19C5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A29 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A0E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A51 DUP3 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x1A5B DUP2 DUP6 PUSH2 0x19FA JUMP JUMPDEST SWAP4 POP PUSH2 0x1A6B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A0B JUMP JUMPDEST PUSH2 0x1A74 DUP2 PUSH2 0x1A35 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A99 DUP2 DUP5 PUSH2 0x1A46 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AB4 DUP2 PUSH2 0x1AA1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AD1 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AED JUMPI PUSH2 0x1AEC PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AFB DUP5 DUP3 DUP6 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B2F DUP3 PUSH2 0x1B04 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B3F DUP2 PUSH2 0x1B24 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B5A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B69 DUP2 PUSH2 0x1B24 JUMP JUMPDEST DUP2 EQ PUSH2 0x1B74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B86 DUP2 PUSH2 0x1B60 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BA3 JUMPI PUSH2 0x1BA2 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BB1 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1BC2 DUP6 DUP3 DUP7 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BE5 JUMPI PUSH2 0x1BE4 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BF3 DUP7 DUP3 DUP8 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C04 DUP7 DUP3 DUP8 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C15 DUP7 DUP3 DUP8 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C61 DUP3 PUSH2 0x1A35 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1C80 JUMPI PUSH2 0x1C7F PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C93 PUSH2 0x1920 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C9F DUP3 DUP3 PUSH2 0x1C58 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CBF JUMPI PUSH2 0x1CBE PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST PUSH2 0x1CC8 DUP3 PUSH2 0x1A35 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF7 PUSH2 0x1CF2 DUP5 PUSH2 0x1CA4 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D13 JUMPI PUSH2 0x1D12 PUSH2 0x1C24 JUMP JUMPDEST JUMPDEST PUSH2 0x1D1E DUP5 DUP3 DUP6 PUSH2 0x1CD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D3B JUMPI PUSH2 0x1D3A PUSH2 0x1C1F JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D4B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D6A JUMPI PUSH2 0x1D69 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D88 JUMPI PUSH2 0x1D87 PUSH2 0x192F JUMP JUMPDEST JUMPDEST PUSH2 0x1D94 DUP5 DUP3 DUP6 ADD PUSH2 0x1D26 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB3 JUMPI PUSH2 0x1DB2 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DC1 DUP5 DUP3 DUP6 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DD3 DUP2 PUSH2 0x1AA1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1DCA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DFD DUP2 PUSH2 0x19B9 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E1A DUP2 PUSH2 0x1DF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E37 JUMPI PUSH2 0x1E36 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E45 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E56 DUP6 DUP3 DUP7 ADD PUSH2 0x1E0B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E7B JUMPI PUSH2 0x1E7A PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST PUSH2 0x1E84 DUP3 PUSH2 0x1A35 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH2 0x1E9F DUP5 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1EC0 JUMPI PUSH2 0x1EBF PUSH2 0x1C24 JUMP JUMPDEST JUMPDEST PUSH2 0x1ECB DUP5 DUP3 DUP6 PUSH2 0x1CD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1EE8 JUMPI PUSH2 0x1EE7 PUSH2 0x1C1F JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1EF8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1E91 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F1B JUMPI PUSH2 0x1F1A PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F29 DUP8 DUP3 DUP9 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1F3A DUP8 DUP3 DUP9 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1F4B DUP8 DUP3 DUP9 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F6C JUMPI PUSH2 0x1F6B PUSH2 0x192F JUMP JUMPDEST JUMPDEST PUSH2 0x1F78 DUP8 DUP3 DUP9 ADD PUSH2 0x1ED3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F97 DUP2 PUSH2 0x1F84 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FB4 DUP2 PUSH2 0x1F8E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FD0 JUMPI PUSH2 0x1FCF PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FDE DUP5 DUP3 DUP6 ADD PUSH2 0x1FA5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1FF0 DUP2 PUSH2 0x1F84 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x200B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1FE7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2028 JUMPI PUSH2 0x2027 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2036 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2047 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2098 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x20AB JUMPI PUSH2 0x20AA PUSH2 0x2051 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x20C6 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x20D3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1DCA JUMP JUMPDEST PUSH2 0x20E0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20FE DUP3 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x2108 DUP2 DUP6 PUSH2 0x20E8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2118 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A0B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2130 DUP3 DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2147 DUP3 DUP6 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2153 DUP3 DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x55524920517565727920666F72206E6F6E6578697374656E7420746F6B656E00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2195 PUSH1 0x1F DUP4 PUSH2 0x19FA JUMP JUMPDEST SWAP2 POP PUSH2 0x21A0 DUP3 PUSH2 0x215F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21C4 DUP2 PUSH2 0x2188 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21EA DUP2 PUSH2 0x21CB JUMP JUMPDEST DUP2 EQ PUSH2 0x21F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2207 DUP2 PUSH2 0x21E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x221C DUP2 PUSH2 0x1F8E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2231 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2253 JUMPI PUSH2 0x2252 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2261 DUP9 DUP3 DUP10 ADD PUSH2 0x21F8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2272 DUP9 DUP3 DUP10 ADD PUSH2 0x220D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2283 DUP9 DUP3 DUP10 ADD PUSH2 0x2222 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x2294 DUP9 DUP3 DUP10 ADD PUSH2 0x2222 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x22A5 DUP9 DUP3 DUP10 ADD PUSH2 0x21F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x207B226E616D65223A2200000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22E8 PUSH1 0xA DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x22F3 DUP3 PUSH2 0x22B2 JUMP JUMPDEST PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x222C20226465736372697074696F6E223A2022416E204E465420746861742063 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x68616E676573206261736564206F6E2074686520436861696E6C696E6B204665 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6564222C00000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2380 PUSH1 0x44 DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x238B DUP3 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x44 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2261747472696275746573223A205B7B2274726169745F74797065223A202263 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6F6C6E657373222C202276616C7565223A203130307D5D2C2022696D616765 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x223A202200000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2418 PUSH1 0x44 DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2423 DUP3 PUSH2 0x2396 JUMP JUMPDEST PUSH1 0x44 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x227D000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2464 PUSH1 0x2 DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x246F DUP3 PUSH2 0x242E JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2485 DUP3 PUSH2 0x22DB JUMP JUMPDEST SWAP2 POP PUSH2 0x2491 DUP3 DUP6 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x249C DUP3 PUSH2 0x2373 JUMP JUMPDEST SWAP2 POP PUSH2 0x24A7 DUP3 PUSH2 0x240B JUMP JUMPDEST SWAP2 POP PUSH2 0x24B3 DUP3 DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x24BE DUP3 PUSH2 0x2457 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2504 DUP3 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x250F DUP4 PUSH2 0x1AA1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2527 JUMPI PUSH2 0x2526 PUSH2 0x24CA JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2567 DUP3 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2572 DUP4 PUSH2 0x1AA1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2582 JUMPI PUSH2 0x2581 PUSH2 0x252D JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2598 DUP3 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x25A3 DUP4 PUSH2 0x1AA1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x25B1 DUP2 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x25C8 JUMPI PUSH2 0x25C7 PUSH2 0x24CA JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25F6 DUP3 PUSH2 0x25CF JUMP JUMPDEST PUSH2 0x2600 DUP2 DUP6 PUSH2 0x25DA JUMP JUMPDEST SWAP4 POP PUSH2 0x2610 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A0B JUMP JUMPDEST PUSH2 0x2619 DUP2 PUSH2 0x1A35 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2639 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2646 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2653 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1DCA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2665 DUP2 DUP5 PUSH2 0x25EB JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x267F DUP2 PUSH2 0x1960 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x269B JUMPI PUSH2 0x269A PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26A9 DUP5 DUP3 DUP6 ADD PUSH2 0x2670 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x26C7 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x26D4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1DCA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID COINBASE TIMESTAMP NUMBER PREVRANDAO GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2FA2646970667358 0x22 SLT KECCAK256 0xD4 0x2E 0xDC 0x27 EQ CALLCODE JUMP PUSH15 0xF37671B1460F34C2A53BD5DFBBE242 SWAP8 0x4B 0x22 PUSH30 0x4156535BB164736F6C634300081400334142434445464748494A4B4C4D4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2F00000000000000 ","sourceMap":"225:2664:13:-:0;;;759:340;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1381:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1455:5;1447;:13;;;;;;:::i;:::-;;1480:7;1470;:17;;;;;;:::i;:::-;;1381:113;;932:1:13::1;915:14;:18;;;;959:21;973:6;959:13;;;:21;;:::i;:::-;943:13;:37;;;;;;:::i;:::-;;1007:22;1021:7;1007:13;;;:22;;:::i;:::-;990:14;:39;;;;;;:::i;:::-;;1075:16;1039:53;;;;;;;;::::0;::::1;759:340:::0;;;225:2664;;1105:310;1182:13;1207:30;1240:73;1297:3;1280:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;1240:13;;;:73;;:::i;:::-;1207:106;;1366:22;;;;;;;;;;;;;;;;;1390:16;1349:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1323:85;;;1105:310;;;:::o;777:1861:12:-;835:13;879:1;864:4;:11;:16;860:31;;882:9;;;;;;;;;;;;;;;;860:31;940:19;962:12;;;;;;;;;;;;;;;;;940:34;;1023:18;1069:1;1064;1050:4;:11;:15;;;;:::i;:::-;1049:21;;;;:::i;:::-;1044:1;:27;;;;:::i;:::-;1023:48;;1151:20;1198:2;1185:10;:15;;;;:::i;:::-;1174:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1151:50;;1294:10;1286:6;1279:26;1386:1;1379:5;1375:13;1442:4;1492;1486:11;1477:7;1473:25;1585:2;1577:6;1573:15;1655:739;1674:6;1665:7;1662:19;1655:739;;;1771:1;1762:7;1758:15;1747:26;;1809:7;1803:14;1932:4;1924:5;1920:2;1916:14;1912:25;1902:8;1898:40;1892:47;1881:9;1873:67;1985:1;1974:9;1970:17;1957:30;;2063:4;2055:5;2051:2;2047:14;2043:25;2033:8;2029:40;2023:47;2012:9;2004:67;2116:1;2105:9;2101:17;2088:30;;2194:4;2186:5;2183:1;2178:14;2174:25;2164:8;2160:40;2154:47;2143:9;2135:67;2247:1;2236:9;2232:17;2219:30;;2325:4;2317:5;2305:25;2295:8;2291:40;2285:47;2274:9;2266:67;2378:1;2367:9;2363:17;2350:30;;1697:697;1655:739;;;2464:1;2457:4;2451:11;2447:19;2484:1;2479:54;;;;2551:1;2546:52;;;;2440:158;;2479:54;2523:6;2518:3;2514:16;2510:1;2499:9;2495:17;2488:43;2479:54;;2546:52;2590:4;2585:3;2581:14;2577:1;2566:9;2562:17;2555:41;2440:158;;1221:1387;;;;2625:6;2618:13;;;;;777:1861;;;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:117::-;954:1;951;944:12;968:117;1077:1;1074;1067:12;1091:102;1132:6;1183:2;1179:7;1174:2;1167:5;1163:14;1159:28;1149:38;;1091:102;;;:::o;1199:180::-;1247:77;1244:1;1237:88;1344:4;1341:1;1334:15;1368:4;1365:1;1358:15;1385:281;1468:27;1490:4;1468:27;:::i;:::-;1460:6;1456:40;1598:6;1586:10;1583:22;1562:18;1550:10;1547:34;1544:62;1541:88;;;1609:18;;:::i;:::-;1541:88;1649:10;1645:2;1638:22;1428:238;1385:281;;:::o;1672:129::-;1706:6;1733:20;;:::i;:::-;1723:30;;1762:33;1790:4;1782:6;1762:33;:::i;:::-;1672:129;;;:::o;1807:308::-;1869:4;1959:18;1951:6;1948:30;1945:56;;;1981:18;;:::i;:::-;1945:56;2019:29;2041:6;2019:29;:::i;:::-;2011:37;;2103:4;2097;2093:15;2085:23;;1807:308;;;:::o;2121:246::-;2202:1;2212:113;2226:6;2223:1;2220:13;2212:113;;;2311:1;2306:3;2302:11;2296:18;2292:1;2287:3;2283:11;2276:39;2248:2;2245:1;2241:10;2236:15;;2212:113;;;2359:1;2350:6;2345:3;2341:16;2334:27;2183:184;2121:246;;;:::o;2373:434::-;2462:5;2487:66;2503:49;2545:6;2503:49;:::i;:::-;2487:66;:::i;:::-;2478:75;;2576:6;2569:5;2562:21;2614:4;2607:5;2603:16;2652:3;2643:6;2638:3;2634:16;2631:25;2628:112;;;2659:79;;:::i;:::-;2628:112;2749:52;2794:6;2789:3;2784;2749:52;:::i;:::-;2468:339;2373:434;;;;;:::o;2827:355::-;2894:5;2943:3;2936:4;2928:6;2924:17;2920:27;2910:122;;2951:79;;:::i;:::-;2910:122;3061:6;3055:13;3086:90;3172:3;3164:6;3157:4;3149:6;3145:17;3086:90;:::i;:::-;3077:99;;2900:282;2827:355;;;;:::o;3188:1009::-;3296:6;3304;3312;3361:2;3349:9;3340:7;3336:23;3332:32;3329:119;;;3367:79;;:::i;:::-;3329:119;3487:1;3512:64;3568:7;3559:6;3548:9;3544:22;3512:64;:::i;:::-;3502:74;;3458:128;3646:2;3635:9;3631:18;3625:25;3677:18;3669:6;3666:30;3663:117;;;3699:79;;:::i;:::-;3663:117;3804:74;3870:7;3861:6;3850:9;3846:22;3804:74;:::i;:::-;3794:84;;3596:292;3948:2;3937:9;3933:18;3927:25;3979:18;3971:6;3968:30;3965:117;;;4001:79;;:::i;:::-;3965:117;4106:74;4172:7;4163:6;4152:9;4148:22;4106:74;:::i;:::-;4096:84;;3898:292;3188:1009;;;;;:::o;4203:99::-;4255:6;4289:5;4283:12;4273:22;;4203:99;;;:::o;4308:180::-;4356:77;4353:1;4346:88;4453:4;4450:1;4443:15;4477:4;4474:1;4467:15;4494:320;4538:6;4575:1;4569:4;4565:12;4555:22;;4622:1;4616:4;4612:12;4643:18;4633:81;;4699:4;4691:6;4687:17;4677:27;;4633:81;4761:2;4753:6;4750:14;4730:18;4727:38;4724:84;;4780:18;;:::i;:::-;4724:84;4545:269;4494:320;;;:::o;4820:141::-;4869:4;4892:3;4884:11;;4915:3;4912:1;4905:14;4949:4;4946:1;4936:18;4928:26;;4820:141;;;:::o;4967:93::-;5004:6;5051:2;5046;5039:5;5035:14;5031:23;5021:33;;4967:93;;;:::o;5066:107::-;5110:8;5160:5;5154:4;5150:16;5129:37;;5066:107;;;;:::o;5179:393::-;5248:6;5298:1;5286:10;5282:18;5321:97;5351:66;5340:9;5321:97;:::i;:::-;5439:39;5469:8;5458:9;5439:39;:::i;:::-;5427:51;;5511:4;5507:9;5500:5;5496:21;5487:30;;5560:4;5550:8;5546:19;5539:5;5536:30;5526:40;;5255:317;;5179:393;;;;;:::o;5578:77::-;5615:7;5644:5;5633:16;;5578:77;;;:::o;5661:60::-;5689:3;5710:5;5703:12;;5661:60;;;:::o;5727:142::-;5777:9;5810:53;5828:34;5837:24;5855:5;5837:24;:::i;:::-;5828:34;:::i;:::-;5810:53;:::i;:::-;5797:66;;5727:142;;;:::o;5875:75::-;5918:3;5939:5;5932:12;;5875:75;;;:::o;5956:269::-;6066:39;6097:7;6066:39;:::i;:::-;6127:91;6176:41;6200:16;6176:41;:::i;:::-;6168:6;6161:4;6155:11;6127:91;:::i;:::-;6121:4;6114:105;6032:193;5956:269;;;:::o;6231:73::-;6276:3;6231:73;:::o;6310:189::-;6387:32;;:::i;:::-;6428:65;6486:6;6478;6472:4;6428:65;:::i;:::-;6363:136;6310:189;;:::o;6505:186::-;6565:120;6582:3;6575:5;6572:14;6565:120;;;6636:39;6673:1;6666:5;6636:39;:::i;:::-;6609:1;6602:5;6598:13;6589:22;;6565:120;;;6505:186;;:::o;6697:543::-;6798:2;6793:3;6790:11;6787:446;;;6832:38;6864:5;6832:38;:::i;:::-;6916:29;6934:10;6916:29;:::i;:::-;6906:8;6902:44;7099:2;7087:10;7084:18;7081:49;;;7120:8;7105:23;;7081:49;7143:80;7199:22;7217:3;7199:22;:::i;:::-;7189:8;7185:37;7172:11;7143:80;:::i;:::-;6802:431;;6787:446;6697:543;;;:::o;7246:117::-;7300:8;7350:5;7344:4;7340:16;7319:37;;7246:117;;;;:::o;7369:169::-;7413:6;7446:51;7494:1;7490:6;7482:5;7479:1;7475:13;7446:51;:::i;:::-;7442:56;7527:4;7521;7517:15;7507:25;;7420:118;7369:169;;;;:::o;7543:295::-;7619:4;7765:29;7790:3;7784:4;7765:29;:::i;:::-;7757:37;;7827:3;7824:1;7820:11;7814:4;7811:21;7803:29;;7543:295;;;;:::o;7843:1395::-;7960:37;7993:3;7960:37;:::i;:::-;8062:18;8054:6;8051:30;8048:56;;;8084:18;;:::i;:::-;8048:56;8128:38;8160:4;8154:11;8128:38;:::i;:::-;8213:67;8273:6;8265;8259:4;8213:67;:::i;:::-;8307:1;8331:4;8318:17;;8363:2;8355:6;8352:14;8380:1;8375:618;;;;9037:1;9054:6;9051:77;;;9103:9;9098:3;9094:19;9088:26;9079:35;;9051:77;9154:67;9214:6;9207:5;9154:67;:::i;:::-;9148:4;9141:81;9010:222;8345:887;;8375:618;8427:4;8423:9;8415:6;8411:22;8461:37;8493:4;8461:37;:::i;:::-;8520:1;8534:208;8548:7;8545:1;8542:14;8534:208;;;8627:9;8622:3;8618:19;8612:26;8604:6;8597:42;8678:1;8670:6;8666:14;8656:24;;8725:2;8714:9;8710:18;8697:31;;8571:4;8568:1;8564:12;8559:17;;8534:208;;;8770:6;8761:7;8758:19;8755:179;;;8828:9;8823:3;8819:19;8813:26;8871:48;8913:4;8905:6;8901:17;8890:9;8871:48;:::i;:::-;8863:6;8856:64;8778:156;8755:179;8980:1;8976;8968:6;8964:14;8960:22;8954:4;8947:36;8382:611;;;8345:887;;7935:1303;;;7843:1395;;:::o;9244:148::-;9346:11;9383:3;9368:18;;9244:148;;;;:::o;9398:390::-;9504:3;9532:39;9565:5;9532:39;:::i;:::-;9587:89;9669:6;9664:3;9587:89;:::i;:::-;9580:96;;9685:65;9743:6;9738:3;9731:4;9724:5;9720:16;9685:65;:::i;:::-;9775:6;9770:3;9766:16;9759:23;;9508:280;9398:390;;;;:::o;9794:275::-;9926:3;9948:95;10039:3;10030:6;9948:95;:::i;:::-;9941:102;;10060:3;10053:10;;9794:275;;;;:::o;10075:435::-;10255:3;10277:95;10368:3;10359:6;10277:95;:::i;:::-;10270:102;;10389:95;10480:3;10471:6;10389:95;:::i;:::-;10382:102;;10501:3;10494:10;;10075:435;;;;;:::o;10516:180::-;10564:77;10561:1;10554:88;10661:4;10658:1;10651:15;10685:4;10682:1;10675:15;10702:191;10742:3;10761:20;10779:1;10761:20;:::i;:::-;10756:25;;10795:20;10813:1;10795:20;:::i;:::-;10790:25;;10838:1;10835;10831:9;10824:16;;10859:3;10856:1;10853:10;10850:36;;;10866:18;;:::i;:::-;10850:36;10702:191;;;;:::o;10899:180::-;10947:77;10944:1;10937:88;11044:4;11041:1;11034:15;11068:4;11065:1;11058:15;11085:185;11125:1;11142:20;11160:1;11142:20;:::i;:::-;11137:25;;11176:20;11194:1;11176:20;:::i;:::-;11171:25;;11215:1;11205:35;;11220:18;;:::i;:::-;11205:35;11262:1;11259;11255:9;11250:14;;11085:185;;;;:::o;11276:410::-;11316:7;11339:20;11357:1;11339:20;:::i;:::-;11334:25;;11373:20;11391:1;11373:20;:::i;:::-;11368:25;;11428:1;11425;11421:9;11450:30;11468:11;11450:30;:::i;:::-;11439:41;;11629:1;11620:7;11616:15;11613:1;11610:22;11590:1;11583:9;11563:83;11540:139;;11659:18;;:::i;:::-;11540:139;11324:362;11276:410;;;;:::o;225:2664:13:-;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_1060":{"entryPoint":5313,"id":1060,"parameterSlots":4,"returnSlots":0},"@_approve_994":{"entryPoint":3423,"id":994,"parameterSlots":3,"returnSlots":0},"@_baseURI_3075":{"entryPoint":5222,"id":3075,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_642":{"entryPoint":5766,"id":642,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_1190":{"entryPoint":4722,"id":1190,"parameterSlots":4,"returnSlots":0},"@_getApproved_569":{"entryPoint":3354,"id":569,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_605":{"entryPoint":5990,"id":605,"parameterSlots":3,"returnSlots":1},"@_mint_798":{"entryPoint":6183,"id":798,"parameterSlots":2,"returnSlots":0},"@_msgSender_1366":{"entryPoint":3415,"id":1366,"parameterSlots":0,"returnSlots":1},"@_ownerOf_556":{"entryPoint":5161,"id":556,"parameterSlots":1,"returnSlots":1},"@_requireOwned_1126":{"entryPoint":3218,"id":1126,"parameterSlots":1,"returnSlots":1},"@_safeMint_813":{"entryPoint":5283,"id":813,"parameterSlots":2,"returnSlots":0},"@_safeMint_839":{"entryPoint":5962,"id":839,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_1097":{"entryPoint":4355,"id":1097,"parameterSlots":3,"returnSlots":0},"@_update_748":{"entryPoint":3441,"id":748,"parameterSlots":3,"returnSlots":1},"@approve_403":{"entryPoint":1273,"id":403,"parameterSlots":2,"returnSlots":0},"@balanceOf_311":{"entryPoint":1744,"id":311,"parameterSlots":1,"returnSlots":1},"@encode_2879":{"entryPoint":3979,"id":2879,"parameterSlots":1,"returnSlots":1},"@getApproved_420":{"entryPoint":1245,"id":420,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_453":{"entryPoint":2964,"id":453,"parameterSlots":2,"returnSlots":1},"@mintNFT_3066":{"entryPoint":2815,"id":3066,"parameterSlots":1,"returnSlots":0},"@name_333":{"entryPoint":1099,"id":333,"parameterSlots":0,"returnSlots":1},"@ownerOf_324":{"entryPoint":1726,"id":324,"parameterSlots":1,"returnSlots":1},"@s_tokenIdToHighValue_2964":{"entryPoint":2940,"id":2964,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_517":{"entryPoint":1694,"id":517,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_543":{"entryPoint":2098,"id":543,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_436":{"entryPoint":2076,"id":436,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1654":{"entryPoint":3112,"id":1654,"parameterSlots":1,"returnSlots":1},"@supportsInterface_283":{"entryPoint":873,"id":283,"parameterSlots":1,"returnSlots":1},"@svgToImageURI_3039":{"entryPoint":1553,"id":3039,"parameterSlots":1,"returnSlots":1},"@symbol_342":{"entryPoint":1930,"id":342,"parameterSlots":0,"returnSlots":1},"@tokenURI_3138":{"entryPoint":2127,"id":3138,"parameterSlots":1,"returnSlots":1},"@transferFrom_499":{"entryPoint":1295,"id":499,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":7825,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":7396,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":7031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":7691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":6519,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":9840,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":7891,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_int256":{"entryPoint":8101,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_int256_fromMemory":{"entryPoint":8717,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":7462,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":6850,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":8738,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint80_fromMemory":{"entryPoint":8696,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7581,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8209,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7116,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7937,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7712,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7052,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6540,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_int256":{"entryPoint":8122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":7508,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6871,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory":{"entryPoint":8759,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6966,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6597,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":9707,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_int256_to_t_int256_fromStack":{"entryPoint":8167,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6726,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":9227,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":9303,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8923,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30_to_t_string_memory_ptr_fromStack":{"entryPoint":8584,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":9075,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":7626,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8484,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8507,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_t_string_memory_ptr_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_t_string_memory_ptr_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9338,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6981,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9764,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":9906,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":8369,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":6612,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed":{"entryPoint":8182,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6783,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8619,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7641,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7305,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":6432,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7776,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":7332,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":9679,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":6639,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":9690,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6650,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8424,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9465,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9564,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9613,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6948,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":6585,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":6452,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_int256":{"entryPoint":8068,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6916,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":6817,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint80":{"entryPoint":8651,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":7381,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":6667,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8320,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7256,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":9418,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9517,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":8273,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7209,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":7199,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":7204,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":6447,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":6442,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":6709,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d":{"entryPoint":9110,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475":{"entryPoint":9262,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6":{"entryPoint":8882,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30":{"entryPoint":8543,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d":{"entryPoint":8958,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":7008,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7668,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":6496,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_int256":{"entryPoint":8078,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":6827,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint80":{"entryPoint":8673,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:25696:14","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:14","statements":[{"nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:14"},"nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:14"},"nodeType":"YulFunctionCall","src":"187:12:14"},"nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:14"},"nodeType":"YulFunctionCall","src":"310:12:14"},"nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nodeType":"YulBlock","src":"378:105:14","statements":[{"nodeType":"YulAssignment","src":"388:89:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:14","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:14"},"nodeType":"YulFunctionCall","src":"399:78:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:14"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:14","type":""}],"src":"334:149:14"},{"body":{"nodeType":"YulBlock","src":"531:78:14","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:14"},"nodeType":"YulFunctionCall","src":"589:12:14"},"nodeType":"YulExpressionStatement","src":"589:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:14"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:14"},"nodeType":"YulFunctionCall","src":"561:23:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:14"},"nodeType":"YulFunctionCall","src":"551:34:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:14"},"nodeType":"YulFunctionCall","src":"544:42:14"},"nodeType":"YulIf","src":"541:62:14"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:14","type":""}],"src":"489:120:14"},{"body":{"nodeType":"YulBlock","src":"666:86:14","statements":[{"nodeType":"YulAssignment","src":"676:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:14"},"nodeType":"YulFunctionCall","src":"685:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:14"},"nodeType":"YulFunctionCall","src":"714:32:14"},"nodeType":"YulExpressionStatement","src":"714:32:14"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:14","type":""}],"src":"615:137:14"},{"body":{"nodeType":"YulBlock","src":"823:262:14","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:14"},"nodeType":"YulFunctionCall","src":"871:79:14"},"nodeType":"YulExpressionStatement","src":"871:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:14"},"nodeType":"YulFunctionCall","src":"840:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:14"},"nodeType":"YulFunctionCall","src":"836:32:14"},"nodeType":"YulIf","src":"833:119:14"},{"nodeType":"YulBlock","src":"962:116:14","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:14","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:14"},"nodeType":"YulFunctionCall","src":"1036:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:14"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:14"},"nodeType":"YulFunctionCall","src":"1016:52:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:14","type":""}],"src":"758:327:14"},{"body":{"nodeType":"YulBlock","src":"1133:48:14","statements":[{"nodeType":"YulAssignment","src":"1143:32:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:14"},"nodeType":"YulFunctionCall","src":"1161:13:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:14"},"nodeType":"YulFunctionCall","src":"1154:21:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:14"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:14","type":""}],"src":"1091:90:14"},{"body":{"nodeType":"YulBlock","src":"1246:50:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:14"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:14"},"nodeType":"YulFunctionCall","src":"1268:21:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:14"},"nodeType":"YulFunctionCall","src":"1256:34:14"},"nodeType":"YulExpressionStatement","src":"1256:34:14"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:14","type":""}],"src":"1187:109:14"},{"body":{"nodeType":"YulBlock","src":"1394:118:14","statements":[{"nodeType":"YulAssignment","src":"1404:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:14"},"nodeType":"YulFunctionCall","src":"1412:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:14"},"nodeType":"YulFunctionCall","src":"1487:17:14"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:14"},"nodeType":"YulFunctionCall","src":"1440:65:14"},"nodeType":"YulExpressionStatement","src":"1440:65:14"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:14","type":""}],"src":"1302:210:14"},{"body":{"nodeType":"YulBlock","src":"1577:40:14","statements":[{"nodeType":"YulAssignment","src":"1588:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:14"},"nodeType":"YulFunctionCall","src":"1598:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:14","type":""}],"src":"1518:99:14"},{"body":{"nodeType":"YulBlock","src":"1719:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:14"},"nodeType":"YulFunctionCall","src":"1729:19:14"},"nodeType":"YulExpressionStatement","src":"1729:19:14"},{"nodeType":"YulAssignment","src":"1757:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:14"},"nodeType":"YulFunctionCall","src":"1772:14:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:14","type":""}],"src":"1623:169:14"},{"body":{"nodeType":"YulBlock","src":"1860:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:14"},"nodeType":"YulFunctionCall","src":"1960:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:14"},"nodeType":"YulFunctionCall","src":"1979:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:14"},"nodeType":"YulFunctionCall","src":"1973:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:14"},"nodeType":"YulFunctionCall","src":"1953:39:14"},"nodeType":"YulExpressionStatement","src":"1953:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:14"},"nodeType":"YulFunctionCall","src":"1897:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:14","statements":[{"nodeType":"YulAssignment","src":"1913:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:14"},"nodeType":"YulFunctionCall","src":"1918:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:14","statements":[]},"src":"1889:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:14"},"nodeType":"YulFunctionCall","src":"2018:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:14"},"nodeType":"YulFunctionCall","src":"2011:27:14"},"nodeType":"YulExpressionStatement","src":"2011:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:14","type":""}],"src":"1798:246:14"},{"body":{"nodeType":"YulBlock","src":"2098:54:14","statements":[{"nodeType":"YulAssignment","src":"2108:38:14","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:14"},"nodeType":"YulFunctionCall","src":"2122:14:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:14"},"nodeType":"YulFunctionCall","src":"2138:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:14"},"nodeType":"YulFunctionCall","src":"2118:28:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:14"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:14","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:14","type":""}],"src":"2050:102:14"},{"body":{"nodeType":"YulBlock","src":"2250:285:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:14"},"nodeType":"YulFunctionCall","src":"2274:39:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:14","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:14"},"nodeType":"YulFunctionCall","src":"2329:71:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:14"},"nodeType":"YulFunctionCall","src":"2444:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:14"},"nodeType":"YulFunctionCall","src":"2409:65:14"},"nodeType":"YulExpressionStatement","src":"2409:65:14"},{"nodeType":"YulAssignment","src":"2483:46:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:14"},"nodeType":"YulFunctionCall","src":"2499:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:14"},"nodeType":"YulFunctionCall","src":"2490:39:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:14","type":""}],"src":"2158:377:14"},{"body":{"nodeType":"YulBlock","src":"2659:195:14","statements":[{"nodeType":"YulAssignment","src":"2669:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:14"},"nodeType":"YulFunctionCall","src":"2677:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:14"},"nodeType":"YulFunctionCall","src":"2712:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:14"},"nodeType":"YulFunctionCall","src":"2731:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:14"},"nodeType":"YulFunctionCall","src":"2705:47:14"},"nodeType":"YulExpressionStatement","src":"2705:47:14"},{"nodeType":"YulAssignment","src":"2761:86:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:14"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:14"},"nodeType":"YulFunctionCall","src":"2769:78:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:14","type":""}],"src":"2541:313:14"},{"body":{"nodeType":"YulBlock","src":"2905:32:14","statements":[{"nodeType":"YulAssignment","src":"2915:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:14"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:14","type":""}],"src":"2860:77:14"},{"body":{"nodeType":"YulBlock","src":"2986:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:14"},"nodeType":"YulFunctionCall","src":"3045:12:14"},"nodeType":"YulExpressionStatement","src":"3045:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:14"},"nodeType":"YulFunctionCall","src":"3016:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:14"},"nodeType":"YulFunctionCall","src":"3006:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:14"},"nodeType":"YulFunctionCall","src":"2999:43:14"},"nodeType":"YulIf","src":"2996:63:14"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:14","type":""}],"src":"2943:122:14"},{"body":{"nodeType":"YulBlock","src":"3123:87:14","statements":[{"nodeType":"YulAssignment","src":"3133:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:14"},"nodeType":"YulFunctionCall","src":"3142:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:14"},"nodeType":"YulFunctionCall","src":"3171:33:14"},"nodeType":"YulExpressionStatement","src":"3171:33:14"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:14","type":""}],"src":"3071:139:14"},{"body":{"nodeType":"YulBlock","src":"3282:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:14"},"nodeType":"YulFunctionCall","src":"3330:79:14"},"nodeType":"YulExpressionStatement","src":"3330:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:14"},"nodeType":"YulFunctionCall","src":"3299:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:14"},"nodeType":"YulFunctionCall","src":"3295:32:14"},"nodeType":"YulIf","src":"3292:119:14"},{"nodeType":"YulBlock","src":"3421:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:14","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:14"},"nodeType":"YulFunctionCall","src":"3496:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:14"},"nodeType":"YulFunctionCall","src":"3475:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:14","type":""}],"src":"3216:329:14"},{"body":{"nodeType":"YulBlock","src":"3596:81:14","statements":[{"nodeType":"YulAssignment","src":"3606:65:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:14"},"nodeType":"YulFunctionCall","src":"3617:54:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:14"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:14","type":""}],"src":"3551:126:14"},{"body":{"nodeType":"YulBlock","src":"3728:51:14","statements":[{"nodeType":"YulAssignment","src":"3738:35:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:14"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:14"},"nodeType":"YulFunctionCall","src":"3749:24:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:14"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:14","type":""}],"src":"3683:96:14"},{"body":{"nodeType":"YulBlock","src":"3850:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:14"},"nodeType":"YulFunctionCall","src":"3872:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:14"},"nodeType":"YulFunctionCall","src":"3860:37:14"},"nodeType":"YulExpressionStatement","src":"3860:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:14","type":""}],"src":"3785:118:14"},{"body":{"nodeType":"YulBlock","src":"4007:124:14","statements":[{"nodeType":"YulAssignment","src":"4017:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:14"},"nodeType":"YulFunctionCall","src":"4025:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:14"},"nodeType":"YulFunctionCall","src":"4106:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:14"},"nodeType":"YulFunctionCall","src":"4053:71:14"},"nodeType":"YulExpressionStatement","src":"4053:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:14","type":""}],"src":"3909:222:14"},{"body":{"nodeType":"YulBlock","src":"4180:79:14","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:14"},"nodeType":"YulFunctionCall","src":"4239:12:14"},"nodeType":"YulExpressionStatement","src":"4239:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:14"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:14"},"nodeType":"YulFunctionCall","src":"4210:24:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:14"},"nodeType":"YulFunctionCall","src":"4200:35:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:14"},"nodeType":"YulFunctionCall","src":"4193:43:14"},"nodeType":"YulIf","src":"4190:63:14"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:14","type":""}],"src":"4137:122:14"},{"body":{"nodeType":"YulBlock","src":"4317:87:14","statements":[{"nodeType":"YulAssignment","src":"4327:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:14"},"nodeType":"YulFunctionCall","src":"4336:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:14"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:14"},"nodeType":"YulFunctionCall","src":"4365:33:14"},"nodeType":"YulExpressionStatement","src":"4365:33:14"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:14","type":""}],"src":"4265:139:14"},{"body":{"nodeType":"YulBlock","src":"4493:391:14","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:14"},"nodeType":"YulFunctionCall","src":"4541:79:14"},"nodeType":"YulExpressionStatement","src":"4541:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:14"},"nodeType":"YulFunctionCall","src":"4510:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:14"},"nodeType":"YulFunctionCall","src":"4506:32:14"},"nodeType":"YulIf","src":"4503:119:14"},{"nodeType":"YulBlock","src":"4632:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:14","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:14"},"nodeType":"YulFunctionCall","src":"4707:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:14"},"nodeType":"YulFunctionCall","src":"4686:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:14"}]}]},{"nodeType":"YulBlock","src":"4759:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:14","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:14"},"nodeType":"YulFunctionCall","src":"4835:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:14"},"nodeType":"YulFunctionCall","src":"4814:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:14","type":""}],"src":"4410:474:14"},{"body":{"nodeType":"YulBlock","src":"4990:519:14","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:14"},"nodeType":"YulFunctionCall","src":"5038:79:14"},"nodeType":"YulExpressionStatement","src":"5038:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:14"},"nodeType":"YulFunctionCall","src":"5007:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:14"},"nodeType":"YulFunctionCall","src":"5003:32:14"},"nodeType":"YulIf","src":"5000:119:14"},{"nodeType":"YulBlock","src":"5129:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:14"},"nodeType":"YulFunctionCall","src":"5204:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:14"},"nodeType":"YulFunctionCall","src":"5183:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:14"}]}]},{"nodeType":"YulBlock","src":"5256:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:14"},"nodeType":"YulFunctionCall","src":"5332:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:14"},"nodeType":"YulFunctionCall","src":"5311:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:14"}]}]},{"nodeType":"YulBlock","src":"5384:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:14","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:14"},"nodeType":"YulFunctionCall","src":"5460:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:14"},"nodeType":"YulFunctionCall","src":"5439:53:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:14","type":""}],"src":"4890:619:14"},{"body":{"nodeType":"YulBlock","src":"5604:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5621:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5624:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5614:6:14"},"nodeType":"YulFunctionCall","src":"5614:12:14"},"nodeType":"YulExpressionStatement","src":"5614:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5515:117:14"},{"body":{"nodeType":"YulBlock","src":"5727:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5744:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5747:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5737:6:14"},"nodeType":"YulFunctionCall","src":"5737:12:14"},"nodeType":"YulExpressionStatement","src":"5737:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"5638:117:14"},{"body":{"nodeType":"YulBlock","src":"5789:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5806:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5809:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5799:6:14"},"nodeType":"YulFunctionCall","src":"5799:88:14"},"nodeType":"YulExpressionStatement","src":"5799:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5903:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5906:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5896:6:14"},"nodeType":"YulFunctionCall","src":"5896:15:14"},"nodeType":"YulExpressionStatement","src":"5896:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5927:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5930:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5920:6:14"},"nodeType":"YulFunctionCall","src":"5920:15:14"},"nodeType":"YulExpressionStatement","src":"5920:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5761:180:14"},{"body":{"nodeType":"YulBlock","src":"5990:238:14","statements":[{"nodeType":"YulVariableDeclaration","src":"6000:58:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6022:6:14"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6052:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6030:21:14"},"nodeType":"YulFunctionCall","src":"6030:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6018:3:14"},"nodeType":"YulFunctionCall","src":"6018:40:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6004:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"6169:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6171:16:14"},"nodeType":"YulFunctionCall","src":"6171:18:14"},"nodeType":"YulExpressionStatement","src":"6171:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6112:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"6124:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6109:2:14"},"nodeType":"YulFunctionCall","src":"6109:34:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6148:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6160:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6145:2:14"},"nodeType":"YulFunctionCall","src":"6145:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6106:2:14"},"nodeType":"YulFunctionCall","src":"6106:62:14"},"nodeType":"YulIf","src":"6103:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6207:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6211:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6200:6:14"},"nodeType":"YulFunctionCall","src":"6200:22:14"},"nodeType":"YulExpressionStatement","src":"6200:22:14"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5976:6:14","type":""},{"name":"size","nodeType":"YulTypedName","src":"5984:4:14","type":""}],"src":"5947:281:14"},{"body":{"nodeType":"YulBlock","src":"6275:88:14","statements":[{"nodeType":"YulAssignment","src":"6285:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"6295:18:14"},"nodeType":"YulFunctionCall","src":"6295:20:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6285:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6344:6:14"},{"name":"size","nodeType":"YulIdentifier","src":"6352:4:14"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6324:19:14"},"nodeType":"YulFunctionCall","src":"6324:33:14"},"nodeType":"YulExpressionStatement","src":"6324:33:14"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"6259:4:14","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6268:6:14","type":""}],"src":"6234:129:14"},{"body":{"nodeType":"YulBlock","src":"6436:241:14","statements":[{"body":{"nodeType":"YulBlock","src":"6541:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6543:16:14"},"nodeType":"YulFunctionCall","src":"6543:18:14"},"nodeType":"YulExpressionStatement","src":"6543:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6513:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"6521:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6510:2:14"},"nodeType":"YulFunctionCall","src":"6510:30:14"},"nodeType":"YulIf","src":"6507:56:14"},{"nodeType":"YulAssignment","src":"6573:37:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6603:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6581:21:14"},"nodeType":"YulFunctionCall","src":"6581:29:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6573:4:14"}]},{"nodeType":"YulAssignment","src":"6647:23:14","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6659:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"6665:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6655:3:14"},"nodeType":"YulFunctionCall","src":"6655:15:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6647:4:14"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6420:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6431:4:14","type":""}],"src":"6369:308:14"},{"body":{"nodeType":"YulBlock","src":"6747:82:14","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6770:3:14"},{"name":"src","nodeType":"YulIdentifier","src":"6775:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"6780:6:14"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"6757:12:14"},"nodeType":"YulFunctionCall","src":"6757:30:14"},"nodeType":"YulExpressionStatement","src":"6757:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6807:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"6812:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6803:3:14"},"nodeType":"YulFunctionCall","src":"6803:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"6821:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6796:6:14"},"nodeType":"YulFunctionCall","src":"6796:27:14"},"nodeType":"YulExpressionStatement","src":"6796:27:14"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6729:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6734:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"6739:6:14","type":""}],"src":"6683:146:14"},{"body":{"nodeType":"YulBlock","src":"6919:341:14","statements":[{"nodeType":"YulAssignment","src":"6929:75:14","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6996:6:14"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6954:41:14"},"nodeType":"YulFunctionCall","src":"6954:49:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6938:15:14"},"nodeType":"YulFunctionCall","src":"6938:66:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6929:5:14"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7020:5:14"},{"name":"length","nodeType":"YulIdentifier","src":"7027:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7013:6:14"},"nodeType":"YulFunctionCall","src":"7013:21:14"},"nodeType":"YulExpressionStatement","src":"7013:21:14"},{"nodeType":"YulVariableDeclaration","src":"7043:27:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7058:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"7065:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7054:3:14"},"nodeType":"YulFunctionCall","src":"7054:16:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7047:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7108:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"7110:77:14"},"nodeType":"YulFunctionCall","src":"7110:79:14"},"nodeType":"YulExpressionStatement","src":"7110:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7089:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"7094:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7085:3:14"},"nodeType":"YulFunctionCall","src":"7085:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"7103:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7082:2:14"},"nodeType":"YulFunctionCall","src":"7082:25:14"},"nodeType":"YulIf","src":"7079:112:14"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7237:3:14"},{"name":"dst","nodeType":"YulIdentifier","src":"7242:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"7247:6:14"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7200:36:14"},"nodeType":"YulFunctionCall","src":"7200:54:14"},"nodeType":"YulExpressionStatement","src":"7200:54:14"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6892:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"6897:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"6905:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6913:5:14","type":""}],"src":"6835:425:14"},{"body":{"nodeType":"YulBlock","src":"7342:278:14","statements":[{"body":{"nodeType":"YulBlock","src":"7391:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"7393:77:14"},"nodeType":"YulFunctionCall","src":"7393:79:14"},"nodeType":"YulExpressionStatement","src":"7393:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7370:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7378:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7366:3:14"},"nodeType":"YulFunctionCall","src":"7366:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"7385:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7362:3:14"},"nodeType":"YulFunctionCall","src":"7362:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7355:6:14"},"nodeType":"YulFunctionCall","src":"7355:35:14"},"nodeType":"YulIf","src":"7352:122:14"},{"nodeType":"YulVariableDeclaration","src":"7483:34:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7510:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7497:12:14"},"nodeType":"YulFunctionCall","src":"7497:20:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7487:6:14","type":""}]},{"nodeType":"YulAssignment","src":"7526:88:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7587:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7595:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7583:3:14"},"nodeType":"YulFunctionCall","src":"7583:17:14"},{"name":"length","nodeType":"YulIdentifier","src":"7602:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"7610:3:14"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7535:47:14"},"nodeType":"YulFunctionCall","src":"7535:79:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7526:5:14"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7320:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"7328:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7336:5:14","type":""}],"src":"7280:340:14"},{"body":{"nodeType":"YulBlock","src":"7702:433:14","statements":[{"body":{"nodeType":"YulBlock","src":"7748:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7750:77:14"},"nodeType":"YulFunctionCall","src":"7750:79:14"},"nodeType":"YulExpressionStatement","src":"7750:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7723:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"7732:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7719:3:14"},"nodeType":"YulFunctionCall","src":"7719:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"7744:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7715:3:14"},"nodeType":"YulFunctionCall","src":"7715:32:14"},"nodeType":"YulIf","src":"7712:119:14"},{"nodeType":"YulBlock","src":"7841:287:14","statements":[{"nodeType":"YulVariableDeclaration","src":"7856:45:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7887:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7898:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7883:3:14"},"nodeType":"YulFunctionCall","src":"7883:17:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7870:12:14"},"nodeType":"YulFunctionCall","src":"7870:31:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7860:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7948:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7950:77:14"},"nodeType":"YulFunctionCall","src":"7950:79:14"},"nodeType":"YulExpressionStatement","src":"7950:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7920:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"7928:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7917:2:14"},"nodeType":"YulFunctionCall","src":"7917:30:14"},"nodeType":"YulIf","src":"7914:117:14"},{"nodeType":"YulAssignment","src":"8045:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8090:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"8101:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8086:3:14"},"nodeType":"YulFunctionCall","src":"8086:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8110:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8055:30:14"},"nodeType":"YulFunctionCall","src":"8055:63:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8045:6:14"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7672:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7683:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7695:6:14","type":""}],"src":"7626:509:14"},{"body":{"nodeType":"YulBlock","src":"8207:263:14","statements":[{"body":{"nodeType":"YulBlock","src":"8253:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8255:77:14"},"nodeType":"YulFunctionCall","src":"8255:79:14"},"nodeType":"YulExpressionStatement","src":"8255:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8228:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"8237:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8224:3:14"},"nodeType":"YulFunctionCall","src":"8224:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"8249:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8220:3:14"},"nodeType":"YulFunctionCall","src":"8220:32:14"},"nodeType":"YulIf","src":"8217:119:14"},{"nodeType":"YulBlock","src":"8346:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8361:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"8375:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8365:6:14","type":""}]},{"nodeType":"YulAssignment","src":"8390:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8425:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"8436:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8421:3:14"},"nodeType":"YulFunctionCall","src":"8421:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8445:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8400:20:14"},"nodeType":"YulFunctionCall","src":"8400:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8390:6:14"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8177:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8188:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8200:6:14","type":""}],"src":"8141:329:14"},{"body":{"nodeType":"YulBlock","src":"8541:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8558:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8581:5:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8563:17:14"},"nodeType":"YulFunctionCall","src":"8563:24:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8551:6:14"},"nodeType":"YulFunctionCall","src":"8551:37:14"},"nodeType":"YulExpressionStatement","src":"8551:37:14"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8529:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8536:3:14","type":""}],"src":"8476:118:14"},{"body":{"nodeType":"YulBlock","src":"8698:124:14","statements":[{"nodeType":"YulAssignment","src":"8708:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8720:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8731:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8716:3:14"},"nodeType":"YulFunctionCall","src":"8716:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8708:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8788:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8801:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8812:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8797:3:14"},"nodeType":"YulFunctionCall","src":"8797:17:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8744:43:14"},"nodeType":"YulFunctionCall","src":"8744:71:14"},"nodeType":"YulExpressionStatement","src":"8744:71:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8670:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8682:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8693:4:14","type":""}],"src":"8600:222:14"},{"body":{"nodeType":"YulBlock","src":"8868:76:14","statements":[{"body":{"nodeType":"YulBlock","src":"8922:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8931:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8934:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8924:6:14"},"nodeType":"YulFunctionCall","src":"8924:12:14"},"nodeType":"YulExpressionStatement","src":"8924:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8891:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8913:5:14"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"8898:14:14"},"nodeType":"YulFunctionCall","src":"8898:21:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8888:2:14"},"nodeType":"YulFunctionCall","src":"8888:32:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8881:6:14"},"nodeType":"YulFunctionCall","src":"8881:40:14"},"nodeType":"YulIf","src":"8878:60:14"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8861:5:14","type":""}],"src":"8828:116:14"},{"body":{"nodeType":"YulBlock","src":"8999:84:14","statements":[{"nodeType":"YulAssignment","src":"9009:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9031:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9018:12:14"},"nodeType":"YulFunctionCall","src":"9018:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9009:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9071:5:14"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"9047:23:14"},"nodeType":"YulFunctionCall","src":"9047:30:14"},"nodeType":"YulExpressionStatement","src":"9047:30:14"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8977:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"8985:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8993:5:14","type":""}],"src":"8950:133:14"},{"body":{"nodeType":"YulBlock","src":"9169:388:14","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:14"},"nodeType":"YulFunctionCall","src":"9217:79:14"},"nodeType":"YulExpressionStatement","src":"9217:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9190:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"9199:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9186:3:14"},"nodeType":"YulFunctionCall","src":"9186:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"9211:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9182:3:14"},"nodeType":"YulFunctionCall","src":"9182:32:14"},"nodeType":"YulIf","src":"9179:119:14"},{"nodeType":"YulBlock","src":"9308:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:14"},"nodeType":"YulFunctionCall","src":"9383:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:14"},"nodeType":"YulFunctionCall","src":"9362:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:14"}]}]},{"nodeType":"YulBlock","src":"9435:115:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:14","type":""}]},{"nodeType":"YulAssignment","src":"9480:60:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9512:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"9523:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9508:3:14"},"nodeType":"YulFunctionCall","src":"9508:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9532:7:14"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"9490:17:14"},"nodeType":"YulFunctionCall","src":"9490:50:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9131:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9142:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9154:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9162:6:14","type":""}],"src":"9089:468:14"},{"body":{"nodeType":"YulBlock","src":"9629:241:14","statements":[{"body":{"nodeType":"YulBlock","src":"9734:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9736:16:14"},"nodeType":"YulFunctionCall","src":"9736:18:14"},"nodeType":"YulExpressionStatement","src":"9736:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9706:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"9714:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9703:2:14"},"nodeType":"YulFunctionCall","src":"9703:30:14"},"nodeType":"YulIf","src":"9700:56:14"},{"nodeType":"YulAssignment","src":"9766:37:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9796:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9774:21:14"},"nodeType":"YulFunctionCall","src":"9774:29:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9766:4:14"}]},{"nodeType":"YulAssignment","src":"9840:23:14","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9852:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"9858:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9848:3:14"},"nodeType":"YulFunctionCall","src":"9848:15:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9840:4:14"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9613:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9624:4:14","type":""}],"src":"9563:307:14"},{"body":{"nodeType":"YulBlock","src":"9959:340:14","statements":[{"nodeType":"YulAssignment","src":"9969:74:14","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10035:6:14"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9994:40:14"},"nodeType":"YulFunctionCall","src":"9994:48:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9978:15:14"},"nodeType":"YulFunctionCall","src":"9978:65:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"9969:5:14"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10059:5:14"},{"name":"length","nodeType":"YulIdentifier","src":"10066:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10052:6:14"},"nodeType":"YulFunctionCall","src":"10052:21:14"},"nodeType":"YulExpressionStatement","src":"10052:21:14"},{"nodeType":"YulVariableDeclaration","src":"10082:27:14","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10097:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"10104:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10093:3:14"},"nodeType":"YulFunctionCall","src":"10093:16:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"10086:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"10147:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"10149:77:14"},"nodeType":"YulFunctionCall","src":"10149:79:14"},"nodeType":"YulExpressionStatement","src":"10149:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10128:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"10133:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10124:3:14"},"nodeType":"YulFunctionCall","src":"10124:16:14"},{"name":"end","nodeType":"YulIdentifier","src":"10142:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10121:2:14"},"nodeType":"YulFunctionCall","src":"10121:25:14"},"nodeType":"YulIf","src":"10118:112:14"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10276:3:14"},{"name":"dst","nodeType":"YulIdentifier","src":"10281:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"10286:6:14"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10239:36:14"},"nodeType":"YulFunctionCall","src":"10239:54:14"},"nodeType":"YulExpressionStatement","src":"10239:54:14"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9932:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"9937:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"9945:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"9953:5:14","type":""}],"src":"9876:423:14"},{"body":{"nodeType":"YulBlock","src":"10379:277:14","statements":[{"body":{"nodeType":"YulBlock","src":"10428:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"10430:77:14"},"nodeType":"YulFunctionCall","src":"10430:79:14"},"nodeType":"YulExpressionStatement","src":"10430:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10407:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"10415:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10403:3:14"},"nodeType":"YulFunctionCall","src":"10403:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"10422:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10399:3:14"},"nodeType":"YulFunctionCall","src":"10399:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10392:6:14"},"nodeType":"YulFunctionCall","src":"10392:35:14"},"nodeType":"YulIf","src":"10389:122:14"},{"nodeType":"YulVariableDeclaration","src":"10520:34:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10547:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10534:12:14"},"nodeType":"YulFunctionCall","src":"10534:20:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10524:6:14","type":""}]},{"nodeType":"YulAssignment","src":"10563:87:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10623:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"10631:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10619:3:14"},"nodeType":"YulFunctionCall","src":"10619:17:14"},{"name":"length","nodeType":"YulIdentifier","src":"10638:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"10646:3:14"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"10572:46:14"},"nodeType":"YulFunctionCall","src":"10572:78:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10563:5:14"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10357:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"10365:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10373:5:14","type":""}],"src":"10318:338:14"},{"body":{"nodeType":"YulBlock","src":"10788:817:14","statements":[{"body":{"nodeType":"YulBlock","src":"10835:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10837:77:14"},"nodeType":"YulFunctionCall","src":"10837:79:14"},"nodeType":"YulExpressionStatement","src":"10837:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10809:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"10818:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10805:3:14"},"nodeType":"YulFunctionCall","src":"10805:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"10830:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10801:3:14"},"nodeType":"YulFunctionCall","src":"10801:33:14"},"nodeType":"YulIf","src":"10798:120:14"},{"nodeType":"YulBlock","src":"10928:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"10943:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10957:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10947:6:14","type":""}]},{"nodeType":"YulAssignment","src":"10972:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11007:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"11018:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11003:3:14"},"nodeType":"YulFunctionCall","src":"11003:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11027:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10982:20:14"},"nodeType":"YulFunctionCall","src":"10982:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10972:6:14"}]}]},{"nodeType":"YulBlock","src":"11055:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"11070:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"11084:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11074:6:14","type":""}]},{"nodeType":"YulAssignment","src":"11100:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11135:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"11146:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11131:3:14"},"nodeType":"YulFunctionCall","src":"11131:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11155:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11110:20:14"},"nodeType":"YulFunctionCall","src":"11110:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11100:6:14"}]}]},{"nodeType":"YulBlock","src":"11183:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"11198:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"11212:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11202:6:14","type":""}]},{"nodeType":"YulAssignment","src":"11228:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11263:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"11274:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11259:3:14"},"nodeType":"YulFunctionCall","src":"11259:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11283:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11238:20:14"},"nodeType":"YulFunctionCall","src":"11238:53:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11228:6:14"}]}]},{"nodeType":"YulBlock","src":"11311:287:14","statements":[{"nodeType":"YulVariableDeclaration","src":"11326:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11357:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11368:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11353:3:14"},"nodeType":"YulFunctionCall","src":"11353:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11340:12:14"},"nodeType":"YulFunctionCall","src":"11340:32:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11330:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"11419:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"11421:77:14"},"nodeType":"YulFunctionCall","src":"11421:79:14"},"nodeType":"YulExpressionStatement","src":"11421:79:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11391:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"11399:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11388:2:14"},"nodeType":"YulFunctionCall","src":"11388:30:14"},"nodeType":"YulIf","src":"11385:117:14"},{"nodeType":"YulAssignment","src":"11516:72:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11560:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"11571:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11556:3:14"},"nodeType":"YulFunctionCall","src":"11556:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11580:7:14"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"11526:29:14"},"nodeType":"YulFunctionCall","src":"11526:62:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11516:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10734:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10745:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10757:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10765:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10773:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10781:6:14","type":""}],"src":"10662:943:14"},{"body":{"nodeType":"YulBlock","src":"11655:32:14","statements":[{"nodeType":"YulAssignment","src":"11665:16:14","value":{"name":"value","nodeType":"YulIdentifier","src":"11676:5:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11665:7:14"}]}]},"name":"cleanup_t_int256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11637:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11647:7:14","type":""}],"src":"11611:76:14"},{"body":{"nodeType":"YulBlock","src":"11735:78:14","statements":[{"body":{"nodeType":"YulBlock","src":"11791:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11800:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11803:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11793:6:14"},"nodeType":"YulFunctionCall","src":"11793:12:14"},"nodeType":"YulExpressionStatement","src":"11793:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11758:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11782:5:14"}],"functionName":{"name":"cleanup_t_int256","nodeType":"YulIdentifier","src":"11765:16:14"},"nodeType":"YulFunctionCall","src":"11765:23:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11755:2:14"},"nodeType":"YulFunctionCall","src":"11755:34:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11748:6:14"},"nodeType":"YulFunctionCall","src":"11748:42:14"},"nodeType":"YulIf","src":"11745:62:14"}]},"name":"validator_revert_t_int256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11728:5:14","type":""}],"src":"11693:120:14"},{"body":{"nodeType":"YulBlock","src":"11870:86:14","statements":[{"nodeType":"YulAssignment","src":"11880:29:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11902:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11889:12:14"},"nodeType":"YulFunctionCall","src":"11889:20:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11880:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11944:5:14"}],"functionName":{"name":"validator_revert_t_int256","nodeType":"YulIdentifier","src":"11918:25:14"},"nodeType":"YulFunctionCall","src":"11918:32:14"},"nodeType":"YulExpressionStatement","src":"11918:32:14"}]},"name":"abi_decode_t_int256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11848:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"11856:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"11864:5:14","type":""}],"src":"11819:137:14"},{"body":{"nodeType":"YulBlock","src":"12027:262:14","statements":[{"body":{"nodeType":"YulBlock","src":"12073:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12075:77:14"},"nodeType":"YulFunctionCall","src":"12075:79:14"},"nodeType":"YulExpressionStatement","src":"12075:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12048:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"12057:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12044:3:14"},"nodeType":"YulFunctionCall","src":"12044:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"12069:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12040:3:14"},"nodeType":"YulFunctionCall","src":"12040:32:14"},"nodeType":"YulIf","src":"12037:119:14"},{"nodeType":"YulBlock","src":"12166:116:14","statements":[{"nodeType":"YulVariableDeclaration","src":"12181:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"12195:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12185:6:14","type":""}]},{"nodeType":"YulAssignment","src":"12210:62:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12244:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"12255:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12240:3:14"},"nodeType":"YulFunctionCall","src":"12240:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12264:7:14"}],"functionName":{"name":"abi_decode_t_int256","nodeType":"YulIdentifier","src":"12220:19:14"},"nodeType":"YulFunctionCall","src":"12220:52:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12210:6:14"}]}]}]},"name":"abi_decode_tuple_t_int256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11997:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12008:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12020:6:14","type":""}],"src":"11962:327:14"},{"body":{"nodeType":"YulBlock","src":"12358:52:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12375:3:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12397:5:14"}],"functionName":{"name":"cleanup_t_int256","nodeType":"YulIdentifier","src":"12380:16:14"},"nodeType":"YulFunctionCall","src":"12380:23:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12368:6:14"},"nodeType":"YulFunctionCall","src":"12368:36:14"},"nodeType":"YulExpressionStatement","src":"12368:36:14"}]},"name":"abi_encode_t_int256_to_t_int256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12346:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12353:3:14","type":""}],"src":"12295:115:14"},{"body":{"nodeType":"YulBlock","src":"12512:122:14","statements":[{"nodeType":"YulAssignment","src":"12522:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12534:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12545:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12530:3:14"},"nodeType":"YulFunctionCall","src":"12530:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12522:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12600:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12613:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12624:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12609:3:14"},"nodeType":"YulFunctionCall","src":"12609:17:14"}],"functionName":{"name":"abi_encode_t_int256_to_t_int256_fromStack","nodeType":"YulIdentifier","src":"12558:41:14"},"nodeType":"YulFunctionCall","src":"12558:69:14"},"nodeType":"YulExpressionStatement","src":"12558:69:14"}]},"name":"abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12484:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12496:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12507:4:14","type":""}],"src":"12416:218:14"},{"body":{"nodeType":"YulBlock","src":"12723:391:14","statements":[{"body":{"nodeType":"YulBlock","src":"12769:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12771:77:14"},"nodeType":"YulFunctionCall","src":"12771:79:14"},"nodeType":"YulExpressionStatement","src":"12771:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12744:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"12753:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12740:3:14"},"nodeType":"YulFunctionCall","src":"12740:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"12765:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12736:3:14"},"nodeType":"YulFunctionCall","src":"12736:32:14"},"nodeType":"YulIf","src":"12733:119:14"},{"nodeType":"YulBlock","src":"12862:117:14","statements":[{"nodeType":"YulVariableDeclaration","src":"12877:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"12891:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12881:6:14","type":""}]},{"nodeType":"YulAssignment","src":"12906:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12941:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"12952:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12937:3:14"},"nodeType":"YulFunctionCall","src":"12937:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12961:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12916:20:14"},"nodeType":"YulFunctionCall","src":"12916:53:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12906:6:14"}]}]},{"nodeType":"YulBlock","src":"12989:118:14","statements":[{"nodeType":"YulVariableDeclaration","src":"13004:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"13018:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13008:6:14","type":""}]},{"nodeType":"YulAssignment","src":"13034:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13069:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"13080:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13065:3:14"},"nodeType":"YulFunctionCall","src":"13065:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13089:7:14"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13044:20:14"},"nodeType":"YulFunctionCall","src":"13044:53:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13034:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12685:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12696:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12708:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12716:6:14","type":""}],"src":"12640:474:14"},{"body":{"nodeType":"YulBlock","src":"13148:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13165:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13168:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13158:6:14"},"nodeType":"YulFunctionCall","src":"13158:88:14"},"nodeType":"YulExpressionStatement","src":"13158:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13262:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13265:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13255:6:14"},"nodeType":"YulFunctionCall","src":"13255:15:14"},"nodeType":"YulExpressionStatement","src":"13255:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13286:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13289:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13279:6:14"},"nodeType":"YulFunctionCall","src":"13279:15:14"},"nodeType":"YulExpressionStatement","src":"13279:15:14"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"13120:180:14"},{"body":{"nodeType":"YulBlock","src":"13357:269:14","statements":[{"nodeType":"YulAssignment","src":"13367:22:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13381:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"13387:1:14","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13377:3:14"},"nodeType":"YulFunctionCall","src":"13377:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13367:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"13398:38:14","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13428:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"13434:1:14","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13424:3:14"},"nodeType":"YulFunctionCall","src":"13424:12:14"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"13402:18:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"13475:51:14","statements":[{"nodeType":"YulAssignment","src":"13489:27:14","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13503:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"13511:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13499:3:14"},"nodeType":"YulFunctionCall","src":"13499:17:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13489:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"13455:18:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13448:6:14"},"nodeType":"YulFunctionCall","src":"13448:26:14"},"nodeType":"YulIf","src":"13445:81:14"},{"body":{"nodeType":"YulBlock","src":"13578:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"13592:16:14"},"nodeType":"YulFunctionCall","src":"13592:18:14"},"nodeType":"YulExpressionStatement","src":"13592:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"13542:18:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13565:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"13573:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13562:2:14"},"nodeType":"YulFunctionCall","src":"13562:14:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13539:2:14"},"nodeType":"YulFunctionCall","src":"13539:38:14"},"nodeType":"YulIf","src":"13536:84:14"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"13341:4:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13350:6:14","type":""}],"src":"13306:320:14"},{"body":{"nodeType":"YulBlock","src":"13786:288:14","statements":[{"nodeType":"YulAssignment","src":"13796:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13808:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13819:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13804:3:14"},"nodeType":"YulFunctionCall","src":"13804:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13796:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13876:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13889:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13900:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13885:3:14"},"nodeType":"YulFunctionCall","src":"13885:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13832:43:14"},"nodeType":"YulFunctionCall","src":"13832:71:14"},"nodeType":"YulExpressionStatement","src":"13832:71:14"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13957:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13970:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"13981:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13966:3:14"},"nodeType":"YulFunctionCall","src":"13966:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13913:43:14"},"nodeType":"YulFunctionCall","src":"13913:72:14"},"nodeType":"YulExpressionStatement","src":"13913:72:14"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14039:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14052:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"14063:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14048:3:14"},"nodeType":"YulFunctionCall","src":"14048:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13995:43:14"},"nodeType":"YulFunctionCall","src":"13995:72:14"},"nodeType":"YulExpressionStatement","src":"13995:72:14"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13742:9:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13754:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13762:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13770:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13781:4:14","type":""}],"src":"13632:442:14"},{"body":{"nodeType":"YulBlock","src":"14194:34:14","statements":[{"nodeType":"YulAssignment","src":"14204:18:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"14219:3:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14204:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14166:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"14171:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14182:11:14","type":""}],"src":"14080:148:14"},{"body":{"nodeType":"YulBlock","src":"14344:280:14","statements":[{"nodeType":"YulVariableDeclaration","src":"14354:53:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14401:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14368:32:14"},"nodeType":"YulFunctionCall","src":"14368:39:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14358:6:14","type":""}]},{"nodeType":"YulAssignment","src":"14416:96:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14500:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"14505:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"14423:76:14"},"nodeType":"YulFunctionCall","src":"14423:89:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14416:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14560:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"14567:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14556:3:14"},"nodeType":"YulFunctionCall","src":"14556:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"14574:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"14579:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14521:34:14"},"nodeType":"YulFunctionCall","src":"14521:65:14"},"nodeType":"YulExpressionStatement","src":"14521:65:14"},{"nodeType":"YulAssignment","src":"14595:23:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14606:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"14611:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14602:3:14"},"nodeType":"YulFunctionCall","src":"14602:16:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14595:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14325:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14332:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14340:3:14","type":""}],"src":"14234:390:14"},{"body":{"nodeType":"YulBlock","src":"14766:139:14","statements":[{"nodeType":"YulAssignment","src":"14777:102:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14866:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"14875:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"14784:81:14"},"nodeType":"YulFunctionCall","src":"14784:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14777:3:14"}]},{"nodeType":"YulAssignment","src":"14889:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"14896:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14889:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14745:3:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14751:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14762:3:14","type":""}],"src":"14630:275:14"},{"body":{"nodeType":"YulBlock","src":"15095:251:14","statements":[{"nodeType":"YulAssignment","src":"15106:102:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15195:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"15204:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15113:81:14"},"nodeType":"YulFunctionCall","src":"15113:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15106:3:14"}]},{"nodeType":"YulAssignment","src":"15218:102:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15307:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"15316:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15225:81:14"},"nodeType":"YulFunctionCall","src":"15225:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15218:3:14"}]},{"nodeType":"YulAssignment","src":"15330:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"15337:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15330:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15066:3:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15072:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15080:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15091:3:14","type":""}],"src":"14911:435:14"},{"body":{"nodeType":"YulBlock","src":"15458:75:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15480:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"15488:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15476:3:14"},"nodeType":"YulFunctionCall","src":"15476:14:14"},{"hexValue":"55524920517565727920666f72206e6f6e6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"15492:33:14","type":"","value":"URI Query for nonexistent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15469:6:14"},"nodeType":"YulFunctionCall","src":"15469:57:14"},"nodeType":"YulExpressionStatement","src":"15469:57:14"}]},"name":"store_literal_in_memory_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15450:6:14","type":""}],"src":"15352:181:14"},{"body":{"nodeType":"YulBlock","src":"15685:220:14","statements":[{"nodeType":"YulAssignment","src":"15695:74:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15761:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"15766:2:14","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15702:58:14"},"nodeType":"YulFunctionCall","src":"15702:67:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15695:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15867:3:14"}],"functionName":{"name":"store_literal_in_memory_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30","nodeType":"YulIdentifier","src":"15778:88:14"},"nodeType":"YulFunctionCall","src":"15778:93:14"},"nodeType":"YulExpressionStatement","src":"15778:93:14"},{"nodeType":"YulAssignment","src":"15880:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15891:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"15896:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15887:3:14"},"nodeType":"YulFunctionCall","src":"15887:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15880:3:14"}]}]},"name":"abi_encode_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15673:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15681:3:14","type":""}],"src":"15539:366:14"},{"body":{"nodeType":"YulBlock","src":"16082:248:14","statements":[{"nodeType":"YulAssignment","src":"16092:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16104:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16115:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16100:3:14"},"nodeType":"YulFunctionCall","src":"16100:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16092:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16139:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"16150:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16135:3:14"},"nodeType":"YulFunctionCall","src":"16135:17:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16158:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"16164:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16154:3:14"},"nodeType":"YulFunctionCall","src":"16154:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16128:6:14"},"nodeType":"YulFunctionCall","src":"16128:47:14"},"nodeType":"YulExpressionStatement","src":"16128:47:14"},{"nodeType":"YulAssignment","src":"16184:139:14","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16318:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16192:124:14"},"nodeType":"YulFunctionCall","src":"16192:131:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16184:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16062:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16077:4:14","type":""}],"src":"15911:419:14"},{"body":{"nodeType":"YulBlock","src":"16380:61:14","statements":[{"nodeType":"YulAssignment","src":"16390:45:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16405:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"16412:22:14","type":"","value":"0xffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16401:3:14"},"nodeType":"YulFunctionCall","src":"16401:34:14"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"16390:7:14"}]}]},"name":"cleanup_t_uint80","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16362:5:14","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"16372:7:14","type":""}],"src":"16336:105:14"},{"body":{"nodeType":"YulBlock","src":"16489:78:14","statements":[{"body":{"nodeType":"YulBlock","src":"16545:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16554:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16557:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16547:6:14"},"nodeType":"YulFunctionCall","src":"16547:12:14"},"nodeType":"YulExpressionStatement","src":"16547:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16512:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16536:5:14"}],"functionName":{"name":"cleanup_t_uint80","nodeType":"YulIdentifier","src":"16519:16:14"},"nodeType":"YulFunctionCall","src":"16519:23:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16509:2:14"},"nodeType":"YulFunctionCall","src":"16509:34:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16502:6:14"},"nodeType":"YulFunctionCall","src":"16502:42:14"},"nodeType":"YulIf","src":"16499:62:14"}]},"name":"validator_revert_t_uint80","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16482:5:14","type":""}],"src":"16447:120:14"},{"body":{"nodeType":"YulBlock","src":"16635:79:14","statements":[{"nodeType":"YulAssignment","src":"16645:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16660:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16654:5:14"},"nodeType":"YulFunctionCall","src":"16654:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16645:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16702:5:14"}],"functionName":{"name":"validator_revert_t_uint80","nodeType":"YulIdentifier","src":"16676:25:14"},"nodeType":"YulFunctionCall","src":"16676:32:14"},"nodeType":"YulExpressionStatement","src":"16676:32:14"}]},"name":"abi_decode_t_uint80_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16613:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"16621:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16629:5:14","type":""}],"src":"16573:141:14"},{"body":{"nodeType":"YulBlock","src":"16782:79:14","statements":[{"nodeType":"YulAssignment","src":"16792:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16807:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16801:5:14"},"nodeType":"YulFunctionCall","src":"16801:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16792:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16849:5:14"}],"functionName":{"name":"validator_revert_t_int256","nodeType":"YulIdentifier","src":"16823:25:14"},"nodeType":"YulFunctionCall","src":"16823:32:14"},"nodeType":"YulExpressionStatement","src":"16823:32:14"}]},"name":"abi_decode_t_int256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16760:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"16768:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16776:5:14","type":""}],"src":"16720:141:14"},{"body":{"nodeType":"YulBlock","src":"16930:80:14","statements":[{"nodeType":"YulAssignment","src":"16940:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16955:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16949:5:14"},"nodeType":"YulFunctionCall","src":"16949:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16940:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16998:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"16971:26:14"},"nodeType":"YulFunctionCall","src":"16971:33:14"},"nodeType":"YulExpressionStatement","src":"16971:33:14"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16908:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"16916:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16924:5:14","type":""}],"src":"16867:143:14"},{"body":{"nodeType":"YulBlock","src":"17158:829:14","statements":[{"body":{"nodeType":"YulBlock","src":"17205:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17207:77:14"},"nodeType":"YulFunctionCall","src":"17207:79:14"},"nodeType":"YulExpressionStatement","src":"17207:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17179:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"17188:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17175:3:14"},"nodeType":"YulFunctionCall","src":"17175:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"17200:3:14","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17171:3:14"},"nodeType":"YulFunctionCall","src":"17171:33:14"},"nodeType":"YulIf","src":"17168:120:14"},{"nodeType":"YulBlock","src":"17298:127:14","statements":[{"nodeType":"YulVariableDeclaration","src":"17313:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17327:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17317:6:14","type":""}]},{"nodeType":"YulAssignment","src":"17342:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17387:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"17398:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17383:3:14"},"nodeType":"YulFunctionCall","src":"17383:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17407:7:14"}],"functionName":{"name":"abi_decode_t_uint80_fromMemory","nodeType":"YulIdentifier","src":"17352:30:14"},"nodeType":"YulFunctionCall","src":"17352:63:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17342:6:14"}]}]},{"nodeType":"YulBlock","src":"17435:128:14","statements":[{"nodeType":"YulVariableDeclaration","src":"17450:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17464:2:14","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17454:6:14","type":""}]},{"nodeType":"YulAssignment","src":"17480:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17525:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"17536:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17521:3:14"},"nodeType":"YulFunctionCall","src":"17521:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17545:7:14"}],"functionName":{"name":"abi_decode_t_int256_fromMemory","nodeType":"YulIdentifier","src":"17490:30:14"},"nodeType":"YulFunctionCall","src":"17490:63:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17480:6:14"}]}]},{"nodeType":"YulBlock","src":"17573:129:14","statements":[{"nodeType":"YulVariableDeclaration","src":"17588:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17602:2:14","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17592:6:14","type":""}]},{"nodeType":"YulAssignment","src":"17618:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17664:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"17675:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17660:3:14"},"nodeType":"YulFunctionCall","src":"17660:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17684:7:14"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"17628:31:14"},"nodeType":"YulFunctionCall","src":"17628:64:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"17618:6:14"}]}]},{"nodeType":"YulBlock","src":"17712:129:14","statements":[{"nodeType":"YulVariableDeclaration","src":"17727:16:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17741:2:14","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17731:6:14","type":""}]},{"nodeType":"YulAssignment","src":"17757:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17803:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"17814:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17799:3:14"},"nodeType":"YulFunctionCall","src":"17799:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17823:7:14"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"17767:31:14"},"nodeType":"YulFunctionCall","src":"17767:64:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"17757:6:14"}]}]},{"nodeType":"YulBlock","src":"17851:129:14","statements":[{"nodeType":"YulVariableDeclaration","src":"17866:17:14","value":{"kind":"number","nodeType":"YulLiteral","src":"17880:3:14","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17870:6:14","type":""}]},{"nodeType":"YulAssignment","src":"17897:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17942:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"17953:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17938:3:14"},"nodeType":"YulFunctionCall","src":"17938:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17962:7:14"}],"functionName":{"name":"abi_decode_t_uint80_fromMemory","nodeType":"YulIdentifier","src":"17907:30:14"},"nodeType":"YulFunctionCall","src":"17907:63:14"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"17897:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17096:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17107:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17119:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17127:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17135:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17143:6:14","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17151:6:14","type":""}],"src":"17016:971:14"},{"body":{"nodeType":"YulBlock","src":"18099:108:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18121:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18129:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18117:3:14"},"nodeType":"YulFunctionCall","src":"18117:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"18133:66:14","type":"","value":"0x207b226e616d65223a2200000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18110:6:14"},"nodeType":"YulFunctionCall","src":"18110:90:14"},"nodeType":"YulExpressionStatement","src":"18110:90:14"}]},"name":"store_literal_in_memory_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18091:6:14","type":""}],"src":"17993:214:14"},{"body":{"nodeType":"YulBlock","src":"18377:238:14","statements":[{"nodeType":"YulAssignment","src":"18387:92:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18471:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"18476:2:14","type":"","value":"10"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18394:76:14"},"nodeType":"YulFunctionCall","src":"18394:85:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18387:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18577:3:14"}],"functionName":{"name":"store_literal_in_memory_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6","nodeType":"YulIdentifier","src":"18488:88:14"},"nodeType":"YulFunctionCall","src":"18488:93:14"},"nodeType":"YulExpressionStatement","src":"18488:93:14"},{"nodeType":"YulAssignment","src":"18590:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18601:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"18606:2:14","type":"","value":"10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18597:3:14"},"nodeType":"YulFunctionCall","src":"18597:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18590:3:14"}]}]},"name":"abi_encode_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18365:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18373:3:14","type":""}],"src":"18213:402:14"},{"body":{"nodeType":"YulBlock","src":"18727:278:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18749:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18757:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18745:3:14"},"nodeType":"YulFunctionCall","src":"18745:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"18761:66:14","type":"","value":"0x222c20226465736372697074696f6e223a2022416e204e465420746861742063"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18738:6:14"},"nodeType":"YulFunctionCall","src":"18738:90:14"},"nodeType":"YulExpressionStatement","src":"18738:90:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18849:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18857:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18845:3:14"},"nodeType":"YulFunctionCall","src":"18845:15:14"},{"hexValue":"68616e676573206261736564206f6e2074686520436861696e6c696e6b204665","kind":"string","nodeType":"YulLiteral","src":"18862:34:14","type":"","value":"hanges based on the Chainlink Fe"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18838:6:14"},"nodeType":"YulFunctionCall","src":"18838:59:14"},"nodeType":"YulExpressionStatement","src":"18838:59:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18918:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"18926:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18914:3:14"},"nodeType":"YulFunctionCall","src":"18914:15:14"},{"kind":"number","nodeType":"YulLiteral","src":"18931:66:14","type":"","value":"0x6564222c00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18907:6:14"},"nodeType":"YulFunctionCall","src":"18907:91:14"},"nodeType":"YulExpressionStatement","src":"18907:91:14"}]},"name":"store_literal_in_memory_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18719:6:14","type":""}],"src":"18621:384:14"},{"body":{"nodeType":"YulBlock","src":"19175:238:14","statements":[{"nodeType":"YulAssignment","src":"19185:92:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19269:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"19274:2:14","type":"","value":"68"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19192:76:14"},"nodeType":"YulFunctionCall","src":"19192:85:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19185:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19375:3:14"}],"functionName":{"name":"store_literal_in_memory_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d","nodeType":"YulIdentifier","src":"19286:88:14"},"nodeType":"YulFunctionCall","src":"19286:93:14"},"nodeType":"YulExpressionStatement","src":"19286:93:14"},{"nodeType":"YulAssignment","src":"19388:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19399:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"19404:2:14","type":"","value":"68"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19395:3:14"},"nodeType":"YulFunctionCall","src":"19395:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19388:3:14"}]}]},"name":"abi_encode_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19163:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19171:3:14","type":""}],"src":"19011:402:14"},{"body":{"nodeType":"YulBlock","src":"19525:310:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19547:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"19555:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19543:3:14"},"nodeType":"YulFunctionCall","src":"19543:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"19559:66:14","type":"","value":"0x2261747472696275746573223a205b7b2274726169745f74797065223a202263"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19536:6:14"},"nodeType":"YulFunctionCall","src":"19536:90:14"},"nodeType":"YulExpressionStatement","src":"19536:90:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19647:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"19655:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19643:3:14"},"nodeType":"YulFunctionCall","src":"19643:15:14"},{"kind":"number","nodeType":"YulLiteral","src":"19660:66:14","type":"","value":"0x6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d616765"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19636:6:14"},"nodeType":"YulFunctionCall","src":"19636:91:14"},"nodeType":"YulExpressionStatement","src":"19636:91:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19748:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"19756:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19744:3:14"},"nodeType":"YulFunctionCall","src":"19744:15:14"},{"kind":"number","nodeType":"YulLiteral","src":"19761:66:14","type":"","value":"0x223a202200000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19737:6:14"},"nodeType":"YulFunctionCall","src":"19737:91:14"},"nodeType":"YulExpressionStatement","src":"19737:91:14"}]},"name":"store_literal_in_memory_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19517:6:14","type":""}],"src":"19419:416:14"},{"body":{"nodeType":"YulBlock","src":"20005:238:14","statements":[{"nodeType":"YulAssignment","src":"20015:92:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20099:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20104:2:14","type":"","value":"68"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20022:76:14"},"nodeType":"YulFunctionCall","src":"20022:85:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20015:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20205:3:14"}],"functionName":{"name":"store_literal_in_memory_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d","nodeType":"YulIdentifier","src":"20116:88:14"},"nodeType":"YulFunctionCall","src":"20116:93:14"},"nodeType":"YulExpressionStatement","src":"20116:93:14"},{"nodeType":"YulAssignment","src":"20218:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20229:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20234:2:14","type":"","value":"68"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20225:3:14"},"nodeType":"YulFunctionCall","src":"20225:12:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20218:3:14"}]}]},"name":"abi_encode_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19993:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20001:3:14","type":""}],"src":"19841:402:14"},{"body":{"nodeType":"YulBlock","src":"20355:108:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20377:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"20385:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20373:3:14"},"nodeType":"YulFunctionCall","src":"20373:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"20389:66:14","type":"","value":"0x227d000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20366:6:14"},"nodeType":"YulFunctionCall","src":"20366:90:14"},"nodeType":"YulExpressionStatement","src":"20366:90:14"}]},"name":"store_literal_in_memory_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20347:6:14","type":""}],"src":"20249:214:14"},{"body":{"nodeType":"YulBlock","src":"20633:236:14","statements":[{"nodeType":"YulAssignment","src":"20643:91:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20727:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20732:1:14","type":"","value":"2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20650:76:14"},"nodeType":"YulFunctionCall","src":"20650:84:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20643:3:14"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20832:3:14"}],"functionName":{"name":"store_literal_in_memory_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475","nodeType":"YulIdentifier","src":"20743:88:14"},"nodeType":"YulFunctionCall","src":"20743:93:14"},"nodeType":"YulExpressionStatement","src":"20743:93:14"},{"nodeType":"YulAssignment","src":"20845:18:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20856:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"20861:1:14","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20852:3:14"},"nodeType":"YulFunctionCall","src":"20852:11:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20845:3:14"}]}]},"name":"abi_encode_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20621:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20629:3:14","type":""}],"src":"20469:400:14"},{"body":{"nodeType":"YulBlock","src":"21463:911:14","statements":[{"nodeType":"YulAssignment","src":"21474:155:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21625:3:14"}],"functionName":{"name":"abi_encode_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21481:142:14"},"nodeType":"YulFunctionCall","src":"21481:148:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21474:3:14"}]},{"nodeType":"YulAssignment","src":"21639:102:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21728:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"21737:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21646:81:14"},"nodeType":"YulFunctionCall","src":"21646:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21639:3:14"}]},{"nodeType":"YulAssignment","src":"21751:155:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21902:3:14"}],"functionName":{"name":"abi_encode_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21758:142:14"},"nodeType":"YulFunctionCall","src":"21758:148:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21751:3:14"}]},{"nodeType":"YulAssignment","src":"21916:155:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22067:3:14"}],"functionName":{"name":"abi_encode_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21923:142:14"},"nodeType":"YulFunctionCall","src":"21923:148:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21916:3:14"}]},{"nodeType":"YulAssignment","src":"22081:102:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22170:6:14"},{"name":"pos","nodeType":"YulIdentifier","src":"22179:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22088:81:14"},"nodeType":"YulFunctionCall","src":"22088:95:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22081:3:14"}]},{"nodeType":"YulAssignment","src":"22193:155:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22344:3:14"}],"functionName":{"name":"abi_encode_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22200:142:14"},"nodeType":"YulFunctionCall","src":"22200:148:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22193:3:14"}]},{"nodeType":"YulAssignment","src":"22358:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"22365:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22358:3:14"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_t_string_memory_ptr_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_t_string_memory_ptr_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21434:3:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21440:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21448:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21459:3:14","type":""}],"src":"20875:1499:14"},{"body":{"nodeType":"YulBlock","src":"22408:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22425:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22428:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22418:6:14"},"nodeType":"YulFunctionCall","src":"22418:88:14"},"nodeType":"YulExpressionStatement","src":"22418:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22522:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22525:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22515:6:14"},"nodeType":"YulFunctionCall","src":"22515:15:14"},"nodeType":"YulExpressionStatement","src":"22515:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22546:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22549:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22539:6:14"},"nodeType":"YulFunctionCall","src":"22539:15:14"},"nodeType":"YulExpressionStatement","src":"22539:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"22380:180:14"},{"body":{"nodeType":"YulBlock","src":"22610:147:14","statements":[{"nodeType":"YulAssignment","src":"22620:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22643:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22625:17:14"},"nodeType":"YulFunctionCall","src":"22625:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"22620:1:14"}]},{"nodeType":"YulAssignment","src":"22654:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22677:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22659:17:14"},"nodeType":"YulFunctionCall","src":"22659:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"22654:1:14"}]},{"nodeType":"YulAssignment","src":"22688:16:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22699:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"22702:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22695:3:14"},"nodeType":"YulFunctionCall","src":"22695:9:14"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22688:3:14"}]},{"body":{"nodeType":"YulBlock","src":"22728:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22730:16:14"},"nodeType":"YulFunctionCall","src":"22730:18:14"},"nodeType":"YulExpressionStatement","src":"22730:18:14"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22720:1:14"},{"name":"sum","nodeType":"YulIdentifier","src":"22723:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22717:2:14"},"nodeType":"YulFunctionCall","src":"22717:10:14"},"nodeType":"YulIf","src":"22714:36:14"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22597:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"22600:1:14","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"22606:3:14","type":""}],"src":"22566:191:14"},{"body":{"nodeType":"YulBlock","src":"22791:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22808:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22811:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22801:6:14"},"nodeType":"YulFunctionCall","src":"22801:88:14"},"nodeType":"YulExpressionStatement","src":"22801:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22905:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22908:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22898:6:14"},"nodeType":"YulFunctionCall","src":"22898:15:14"},"nodeType":"YulExpressionStatement","src":"22898:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22929:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22932:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22922:6:14"},"nodeType":"YulFunctionCall","src":"22922:15:14"},"nodeType":"YulExpressionStatement","src":"22922:15:14"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"22763:180:14"},{"body":{"nodeType":"YulBlock","src":"22991:143:14","statements":[{"nodeType":"YulAssignment","src":"23001:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23024:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23006:17:14"},"nodeType":"YulFunctionCall","src":"23006:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"23001:1:14"}]},{"nodeType":"YulAssignment","src":"23035:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23058:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23040:17:14"},"nodeType":"YulFunctionCall","src":"23040:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"23035:1:14"}]},{"body":{"nodeType":"YulBlock","src":"23082:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"23084:16:14"},"nodeType":"YulFunctionCall","src":"23084:18:14"},"nodeType":"YulExpressionStatement","src":"23084:18:14"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23079:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23072:6:14"},"nodeType":"YulFunctionCall","src":"23072:9:14"},"nodeType":"YulIf","src":"23069:35:14"},{"nodeType":"YulAssignment","src":"23114:14:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23123:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"23126:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"23119:3:14"},"nodeType":"YulFunctionCall","src":"23119:9:14"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"23114:1:14"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22980:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"22983:1:14","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"22989:1:14","type":""}],"src":"22949:185:14"},{"body":{"nodeType":"YulBlock","src":"23188:362:14","statements":[{"nodeType":"YulAssignment","src":"23198:25:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23221:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23203:17:14"},"nodeType":"YulFunctionCall","src":"23203:20:14"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"23198:1:14"}]},{"nodeType":"YulAssignment","src":"23232:25:14","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23255:1:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23237:17:14"},"nodeType":"YulFunctionCall","src":"23237:20:14"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"23232:1:14"}]},{"nodeType":"YulVariableDeclaration","src":"23266:28:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23289:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"23292:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23285:3:14"},"nodeType":"YulFunctionCall","src":"23285:9:14"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"23270:11:14","type":""}]},{"nodeType":"YulAssignment","src":"23303:41:14","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"23332:11:14"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23314:17:14"},"nodeType":"YulFunctionCall","src":"23314:30:14"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"23303:7:14"}]},{"body":{"nodeType":"YulBlock","src":"23521:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23523:16:14"},"nodeType":"YulFunctionCall","src":"23523:18:14"},"nodeType":"YulExpressionStatement","src":"23523:18:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23454:1:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23447:6:14"},"nodeType":"YulFunctionCall","src":"23447:9:14"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23477:1:14"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"23484:7:14"},{"name":"x","nodeType":"YulIdentifier","src":"23493:1:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"23480:3:14"},"nodeType":"YulFunctionCall","src":"23480:15:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23474:2:14"},"nodeType":"YulFunctionCall","src":"23474:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"23427:2:14"},"nodeType":"YulFunctionCall","src":"23427:83:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23407:6:14"},"nodeType":"YulFunctionCall","src":"23407:113:14"},"nodeType":"YulIf","src":"23404:139:14"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23171:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"23174:1:14","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"23180:7:14","type":""}],"src":"23140:410:14"},{"body":{"nodeType":"YulBlock","src":"23614:40:14","statements":[{"nodeType":"YulAssignment","src":"23625:22:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23641:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23635:5:14"},"nodeType":"YulFunctionCall","src":"23635:12:14"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23625:6:14"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23597:5:14","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23607:6:14","type":""}],"src":"23556:98:14"},{"body":{"nodeType":"YulBlock","src":"23755:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23772:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"23777:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23765:6:14"},"nodeType":"YulFunctionCall","src":"23765:19:14"},"nodeType":"YulExpressionStatement","src":"23765:19:14"},{"nodeType":"YulAssignment","src":"23793:29:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23812:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"23817:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23808:3:14"},"nodeType":"YulFunctionCall","src":"23808:14:14"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23793:11:14"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23727:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"23732:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"23743:11:14","type":""}],"src":"23660:168:14"},{"body":{"nodeType":"YulBlock","src":"23924:283:14","statements":[{"nodeType":"YulVariableDeclaration","src":"23934:52:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23980:5:14"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"23948:31:14"},"nodeType":"YulFunctionCall","src":"23948:38:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"23938:6:14","type":""}]},{"nodeType":"YulAssignment","src":"23995:77:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24060:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"24065:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24002:57:14"},"nodeType":"YulFunctionCall","src":"24002:70:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23995:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24120:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"24127:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24116:3:14"},"nodeType":"YulFunctionCall","src":"24116:16:14"},{"name":"pos","nodeType":"YulIdentifier","src":"24134:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"24139:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24081:34:14"},"nodeType":"YulFunctionCall","src":"24081:65:14"},"nodeType":"YulExpressionStatement","src":"24081:65:14"},{"nodeType":"YulAssignment","src":"24155:46:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24166:3:14"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24193:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"24171:21:14"},"nodeType":"YulFunctionCall","src":"24171:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24162:3:14"},"nodeType":"YulFunctionCall","src":"24162:39:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24155:3:14"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23905:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23912:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23920:3:14","type":""}],"src":"23834:373:14"},{"body":{"nodeType":"YulBlock","src":"24413:440:14","statements":[{"nodeType":"YulAssignment","src":"24423:27:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24435:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24446:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24431:3:14"},"nodeType":"YulFunctionCall","src":"24431:19:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24423:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24504:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24517:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24528:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24513:3:14"},"nodeType":"YulFunctionCall","src":"24513:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24460:43:14"},"nodeType":"YulFunctionCall","src":"24460:71:14"},"nodeType":"YulExpressionStatement","src":"24460:71:14"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24585:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24598:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24609:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24594:3:14"},"nodeType":"YulFunctionCall","src":"24594:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24541:43:14"},"nodeType":"YulFunctionCall","src":"24541:72:14"},"nodeType":"YulExpressionStatement","src":"24541:72:14"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24667:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24680:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24691:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24676:3:14"},"nodeType":"YulFunctionCall","src":"24676:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24623:43:14"},"nodeType":"YulFunctionCall","src":"24623:72:14"},"nodeType":"YulExpressionStatement","src":"24623:72:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24716:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"24727:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24712:3:14"},"nodeType":"YulFunctionCall","src":"24712:18:14"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24736:4:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"24742:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24732:3:14"},"nodeType":"YulFunctionCall","src":"24732:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24705:6:14"},"nodeType":"YulFunctionCall","src":"24705:48:14"},"nodeType":"YulExpressionStatement","src":"24705:48:14"},{"nodeType":"YulAssignment","src":"24762:84:14","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"24832:6:14"},{"name":"tail","nodeType":"YulIdentifier","src":"24841:4:14"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24770:61:14"},"nodeType":"YulFunctionCall","src":"24770:76:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24762:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24361:9:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"24373:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24381:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24389:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24397:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24408:4:14","type":""}],"src":"24213:640:14"},{"body":{"nodeType":"YulBlock","src":"24921:79:14","statements":[{"nodeType":"YulAssignment","src":"24931:22:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24946:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24940:5:14"},"nodeType":"YulFunctionCall","src":"24940:13:14"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24931:5:14"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24988:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"24962:25:14"},"nodeType":"YulFunctionCall","src":"24962:32:14"},"nodeType":"YulExpressionStatement","src":"24962:32:14"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24899:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"24907:3:14","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24915:5:14","type":""}],"src":"24859:141:14"},{"body":{"nodeType":"YulBlock","src":"25082:273:14","statements":[{"body":{"nodeType":"YulBlock","src":"25128:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"25130:77:14"},"nodeType":"YulFunctionCall","src":"25130:79:14"},"nodeType":"YulExpressionStatement","src":"25130:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"25103:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"25112:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25099:3:14"},"nodeType":"YulFunctionCall","src":"25099:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"25124:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25095:3:14"},"nodeType":"YulFunctionCall","src":"25095:32:14"},"nodeType":"YulIf","src":"25092:119:14"},{"nodeType":"YulBlock","src":"25221:127:14","statements":[{"nodeType":"YulVariableDeclaration","src":"25236:15:14","value":{"kind":"number","nodeType":"YulLiteral","src":"25250:1:14","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25240:6:14","type":""}]},{"nodeType":"YulAssignment","src":"25265:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25310:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"25321:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25306:3:14"},"nodeType":"YulFunctionCall","src":"25306:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25330:7:14"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"25275:30:14"},"nodeType":"YulFunctionCall","src":"25275:63:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"25265:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25052:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"25063:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"25075:6:14","type":""}],"src":"25006:349:14"},{"body":{"nodeType":"YulBlock","src":"25487:206:14","statements":[{"nodeType":"YulAssignment","src":"25497:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25509:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"25520:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25505:3:14"},"nodeType":"YulFunctionCall","src":"25505:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25497:4:14"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25577:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25590:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"25601:1:14","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25586:3:14"},"nodeType":"YulFunctionCall","src":"25586:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25533:43:14"},"nodeType":"YulFunctionCall","src":"25533:71:14"},"nodeType":"YulExpressionStatement","src":"25533:71:14"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25658:6:14"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25671:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"25682:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25667:3:14"},"nodeType":"YulFunctionCall","src":"25667:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25614:43:14"},"nodeType":"YulFunctionCall","src":"25614:72:14"},"nodeType":"YulExpressionStatement","src":"25614:72:14"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25451:9:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25463:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25471:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25482:4:14","type":""}],"src":"25361:332:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_int256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_int256(value) {\n        if iszero(eq(value, cleanup_t_int256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_int256(value)\n    }\n\n    function abi_decode_tuple_t_int256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_int256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_int256_to_t_int256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_int256(value))\n    }\n\n    function abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_int256_to_t_int256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30(memPtr) {\n\n        mstore(add(memPtr, 0), \"URI Query for nonexistent token\")\n\n    }\n\n    function abi_encode_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e3c2f48b528752f34e1c72b197dea3968e0a211eedde5e2726a8a7928b77ef30_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint80(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint80(value) {\n        if iszero(eq(value, cleanup_t_uint80(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint80_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint80(value)\n    }\n\n    function abi_decode_t_int256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint80_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint80_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6(memPtr) {\n\n        mstore(add(memPtr, 0), 0x207b226e616d65223a2200000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 10)\n        store_literal_in_memory_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6(pos)\n        end := add(pos, 10)\n    }\n\n    function store_literal_in_memory_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d(memPtr) {\n\n        mstore(add(memPtr, 0), 0x222c20226465736372697074696f6e223a2022416e204e465420746861742063)\n\n        mstore(add(memPtr, 32), \"hanges based on the Chainlink Fe\")\n\n        mstore(add(memPtr, 64), 0x6564222c00000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 68)\n        store_literal_in_memory_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d(pos)\n        end := add(pos, 68)\n    }\n\n    function store_literal_in_memory_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d(memPtr) {\n\n        mstore(add(memPtr, 0), 0x2261747472696275746573223a205b7b2274726169745f74797065223a202263)\n\n        mstore(add(memPtr, 32), 0x6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d616765)\n\n        mstore(add(memPtr, 64), 0x223a202200000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 68)\n        store_literal_in_memory_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d(pos)\n        end := add(pos, 68)\n    }\n\n    function store_literal_in_memory_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475(memPtr) {\n\n        mstore(add(memPtr, 0), 0x227d000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475(pos)\n        end := add(pos, 2)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_t_string_memory_ptr_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_t_string_memory_ptr_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_9717d5490fb4c212504dad5df66901444391c205c4054e1128086a30ea9af5c6_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_e522eec1a8eb0e6dcb0fbe1f09eb19c980be590bca0360dd6c3f1712bf0e651d_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_stringliteral_0d914628bb31cd9bba025be63e0136b709fe32e7644c39c6608b46e7c6a2512d_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2960":[{"length":32,"start":2259}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063c87b56dd11610066578063c87b56dd146102bd578063e2ed50cb146102ed578063e425aded14610309578063e985e9c51461033957610100565b806370a082311461023757806395d89b4114610267578063a22cb46514610285578063b88d4fde146102a157610100565b806323b872dd116100d357806323b872dd1461019f57806330d871c6146101bb57806342842e0e146101eb5780636352211e1461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a919061198c565b610369565b60405161012c91906119d4565b60405180910390f35b61013d61044b565b60405161014a9190611a7f565b60405180910390f35b61016d60048036038101906101689190611ad7565b6104dd565b60405161017a9190611b45565b60405180910390f35b61019d60048036038101906101989190611b8c565b6104f9565b005b6101b960048036038101906101b49190611bcc565b61050f565b005b6101d560048036038101906101d09190611d54565b610611565b6040516101e29190611a7f565b60405180910390f35b61020560048036038101906102009190611bcc565b61069e565b005b610221600480360381019061021c9190611ad7565b6106be565b60405161022e9190611b45565b60405180910390f35b610251600480360381019061024c9190611d9d565b6106d0565b60405161025e9190611dd9565b60405180910390f35b61026f61078a565b60405161027c9190611a7f565b60405180910390f35b61029f600480360381019061029a9190611e20565b61081c565b005b6102bb60048036038101906102b69190611f01565b610832565b005b6102d760048036038101906102d29190611ad7565b61084f565b6040516102e49190611a7f565b60405180910390f35b61030760048036038101906103029190611fba565b610aff565b005b610323600480360381019061031e9190611ad7565b610b7c565b6040516103309190611ff6565b60405180910390f35b610353600480360381019061034e9190612011565b610b94565b60405161036091906119d4565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061043457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610444575061044382610c28565b5b9050919050565b60606000805461045a90612080565b80601f016020809104026020016040519081016040528092919081815260200182805461048690612080565b80156104d35780601f106104a8576101008083540402835291602001916104d3565b820191906000526020600020905b8154815290600101906020018083116104b657829003601f168201915b5050505050905090565b60006104e882610c92565b506104f282610d1a565b9050919050565b61050b8282610506610d57565b610d5f565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105815760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105789190611b45565b60405180910390fd5b60006105958383610590610d57565b610d71565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060b578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610602939291906120b1565b60405180910390fd5b50505050565b6060600061063d836040516020016106299190612124565b604051602081830303815290604052610f8b565b90506040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152508160405160200161068792919061213b565b604051602081830303815290604052915050919050565b6106b983838360405180602001604052806000815250610832565b505050565b60006106c982610c92565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107435760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161073a9190611b45565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461079990612080565b80601f01602080910402602001604051908101604052809291908181526020018280546107c590612080565b80156108125780601f106107e757610100808354040283529160200191610812565b820191906000526020600020905b8154815290600101906020018083116107f557829003601f168201915b5050505050905090565b61082e610827610d57565b8383611103565b5050565b61083d84848461050f565b61084984848484611272565b50505050565b606061085a82611429565b73ffffffffffffffffffffffffffffffffffffffff1661087983610c92565b73ffffffffffffffffffffffffffffffffffffffff16146108cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c6906121ab565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190612237565b50505091505060006007805461097590612080565b80601f01602080910402602001604051908101604052809291908181526020018280546109a190612080565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905060096000858152602001908152602001600020548212610a9d5760088054610a1c90612080565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4890612080565b8015610a955780601f10610a6a57610100808354040283529160200191610a95565b820191906000526020600020905b815481529060010190602001808311610a7857829003601f168201915b505050505090505b610aa5611466565b610ad6610ab061044b565b83604051602001610ac292919061247a565b604051602081830303815290604052610f8b565b604051602001610ae792919061213b565b60405160208183030381529060405292505050919050565b8060096000600654815260200190815260200160002081905550600160066000828254610b2c91906124f9565b92505081905550610b3f336006546114a3565b6006547f882d3b5a729a8bb95cf6c0083c99b42ecd9637123d4425bd7b768877fd8af8b082604051610b719190611ff6565b60405180910390a250565b60096020528060005260406000206000915090505481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080610c9e83611429565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d1157826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610d089190611dd9565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610d6c83838360016114c1565b505050565b600080610d7d84611429565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610dbf57610dbe818486611686565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e5057610e016000856000806114c1565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610ed3576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b60606000825103610fad576040518060200160405280600081525090506110fe565b60006040518060600160405280604081526020016126dc6040913990506000600360028551610fdc91906124f9565b610fe6919061255c565b6004610ff2919061258d565b9050600060208261100391906124f9565b67ffffffffffffffff81111561101c5761101b611c29565b5b6040519080825280601f01601f19166020018201604052801561104e5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156110bd576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611062565b6003895106600181146110d757600281146110e7576110f2565b613d3d60f01b60028303526110f2565b603d60f81b60018303525b50505050508093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361117457816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161116b9190611b45565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161126591906119d4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611423578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026112b6610d57565b8685856040518563ffffffff1660e01b81526004016112d89493929190612624565b6020604051808303816000875af192505050801561131457506040513d601f19601f820116820180604052508101906113119190612685565b60015b611398573d8060008114611344576040519150601f19603f3d011682016040523d82523d6000602084013e611349565b606091505b50600081510361139057836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113879190611b45565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461142157836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016114189190611b45565b60405180910390fd5b505b50505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6114bd82826040518060200160405280600081525061174a565b5050565b80806114fa5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561162e57600061150a84610c92565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561157557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561158857506115868184610b94565b155b156115ca57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016115c19190611b45565b60405180910390fd5b811561162c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611691838383611766565b61174557600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361170657806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016116fd9190611dd9565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161173c9291906126b2565b60405180910390fd5b505050565b6117548383611827565b6117616000848484611272565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561181e57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117df57506117de8484610b94565b5b8061181d57508273ffffffffffffffffffffffffffffffffffffffff1661180583610d1a565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118995760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118909190611b45565b60405180910390fd5b60006118a783836000610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461191b5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016119129190611b45565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61196981611934565b811461197457600080fd5b50565b60008135905061198681611960565b92915050565b6000602082840312156119a2576119a161192a565b5b60006119b084828501611977565b91505092915050565b60008115159050919050565b6119ce816119b9565b82525050565b60006020820190506119e960008301846119c5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a29578082015181840152602081019050611a0e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a51826119ef565b611a5b81856119fa565b9350611a6b818560208601611a0b565b611a7481611a35565b840191505092915050565b60006020820190508181036000830152611a998184611a46565b905092915050565b6000819050919050565b611ab481611aa1565b8114611abf57600080fd5b50565b600081359050611ad181611aab565b92915050565b600060208284031215611aed57611aec61192a565b5b6000611afb84828501611ac2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2f82611b04565b9050919050565b611b3f81611b24565b82525050565b6000602082019050611b5a6000830184611b36565b92915050565b611b6981611b24565b8114611b7457600080fd5b50565b600081359050611b8681611b60565b92915050565b60008060408385031215611ba357611ba261192a565b5b6000611bb185828601611b77565b9250506020611bc285828601611ac2565b9150509250929050565b600080600060608486031215611be557611be461192a565b5b6000611bf386828701611b77565b9350506020611c0486828701611b77565b9250506040611c1586828701611ac2565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c6182611a35565b810181811067ffffffffffffffff82111715611c8057611c7f611c29565b5b80604052505050565b6000611c93611920565b9050611c9f8282611c58565b919050565b600067ffffffffffffffff821115611cbf57611cbe611c29565b5b611cc882611a35565b9050602081019050919050565b82818337600083830152505050565b6000611cf7611cf284611ca4565b611c89565b905082815260208101848484011115611d1357611d12611c24565b5b611d1e848285611cd5565b509392505050565b600082601f830112611d3b57611d3a611c1f565b5b8135611d4b848260208601611ce4565b91505092915050565b600060208284031215611d6a57611d6961192a565b5b600082013567ffffffffffffffff811115611d8857611d8761192f565b5b611d9484828501611d26565b91505092915050565b600060208284031215611db357611db261192a565b5b6000611dc184828501611b77565b91505092915050565b611dd381611aa1565b82525050565b6000602082019050611dee6000830184611dca565b92915050565b611dfd816119b9565b8114611e0857600080fd5b50565b600081359050611e1a81611df4565b92915050565b60008060408385031215611e3757611e3661192a565b5b6000611e4585828601611b77565b9250506020611e5685828601611e0b565b9150509250929050565b600067ffffffffffffffff821115611e7b57611e7a611c29565b5b611e8482611a35565b9050602081019050919050565b6000611ea4611e9f84611e60565b611c89565b905082815260208101848484011115611ec057611ebf611c24565b5b611ecb848285611cd5565b509392505050565b600082601f830112611ee857611ee7611c1f565b5b8135611ef8848260208601611e91565b91505092915050565b60008060008060808587031215611f1b57611f1a61192a565b5b6000611f2987828801611b77565b9450506020611f3a87828801611b77565b9350506040611f4b87828801611ac2565b925050606085013567ffffffffffffffff811115611f6c57611f6b61192f565b5b611f7887828801611ed3565b91505092959194509250565b6000819050919050565b611f9781611f84565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b600060208284031215611fd057611fcf61192a565b5b6000611fde84828501611fa5565b91505092915050565b611ff081611f84565b82525050565b600060208201905061200b6000830184611fe7565b92915050565b600080604083850312156120285761202761192a565b5b600061203685828601611b77565b925050602061204785828601611b77565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061209857607f821691505b6020821081036120ab576120aa612051565b5b50919050565b60006060820190506120c66000830186611b36565b6120d36020830185611dca565b6120e06040830184611b36565b949350505050565b600081905092915050565b60006120fe826119ef565b61210881856120e8565b9350612118818560208601611a0b565b80840191505092915050565b600061213082846120f3565b915081905092915050565b600061214782856120f3565b915061215382846120f3565b91508190509392505050565b7f55524920517565727920666f72206e6f6e6578697374656e7420746f6b656e00600082015250565b6000612195601f836119fa565b91506121a08261215f565b602082019050919050565b600060208201905081810360008301526121c481612188565b9050919050565b600069ffffffffffffffffffff82169050919050565b6121ea816121cb565b81146121f557600080fd5b50565b600081519050612207816121e1565b92915050565b60008151905061221c81611f8e565b92915050565b60008151905061223181611aab565b92915050565b600080600080600060a086880312156122535761225261192a565b5b6000612261888289016121f8565b95505060206122728882890161220d565b945050604061228388828901612222565b935050606061229488828901612222565b92505060806122a5888289016121f8565b9150509295509295909350565b7f207b226e616d65223a2200000000000000000000000000000000000000000000600082015250565b60006122e8600a836120e8565b91506122f3826122b2565b600a82019050919050565b7f222c20226465736372697074696f6e223a2022416e204e46542074686174206360008201527f68616e676573206261736564206f6e2074686520436861696e6c696e6b20466560208201527f6564222c00000000000000000000000000000000000000000000000000000000604082015250565b60006123806044836120e8565b915061238b826122fe565b604482019050919050565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a202200000000000000000000000000000000000000000000000000000000604082015250565b60006124186044836120e8565b915061242382612396565b604482019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006124646002836120e8565b915061246f8261242e565b600282019050919050565b6000612485826122db565b915061249182856120f3565b915061249c82612373565b91506124a78261240b565b91506124b382846120f3565b91506124be82612457565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061250482611aa1565b915061250f83611aa1565b9250828201905080821115612527576125266124ca565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061256782611aa1565b915061257283611aa1565b9250826125825761258161252d565b5b828204905092915050565b600061259882611aa1565b91506125a383611aa1565b92508282026125b181611aa1565b915082820484148315176125c8576125c76124ca565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b60006125f6826125cf565b61260081856125da565b9350612610818560208601611a0b565b61261981611a35565b840191505092915050565b60006080820190506126396000830187611b36565b6126466020830186611b36565b6126536040830185611dca565b818103606083015261266581846125eb565b905095945050505050565b60008151905061267f81611960565b92915050565b60006020828403121561269b5761269a61192a565b5b60006126a984828501612670565b91505092915050565b60006040820190506126c76000830185611b36565b6126d46020830184611dca565b939250505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d42edc2714f2566ef37671b1460f34c2a53bd5dfbbe242974b227d4156535bb164736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xE2ED50CB EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xE425ADED EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x339 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2A1 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x30D871C6 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x207 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x183 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x198C JUMP JUMPDEST PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x19D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH2 0x44B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0x4DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x1B8C JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B4 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x50F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x1D54 JUMP JUMPDEST PUSH2 0x611 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x200 SWAP2 SWAP1 PUSH2 0x1BCC JUMP JUMPDEST PUSH2 0x69E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22E SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x251 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x1D9D JUMP JUMPDEST PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26F PUSH2 0x78A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29A SWAP2 SWAP1 PUSH2 0x1E20 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x832 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D2 SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0x84F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x302 SWAP2 SWAP1 PUSH2 0x1FBA JUMP JUMPDEST PUSH2 0xAFF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x323 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31E SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x353 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0x2011 JUMP JUMPDEST PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x360 SWAP2 SWAP1 PUSH2 0x19D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x434 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x444 JUMPI POP PUSH2 0x443 DUP3 PUSH2 0xC28 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x45A SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x486 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4D3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4A8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4D3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4B6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8 DUP3 PUSH2 0xC92 JUMP JUMPDEST POP PUSH2 0x4F2 DUP3 PUSH2 0xD1A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x50B DUP3 DUP3 PUSH2 0x506 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0xD5F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x581 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x595 DUP4 DUP4 PUSH2 0x590 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0xD71 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x60B JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x602 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x63D DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x629 SWAP2 SWAP1 PUSH2 0x2124 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xF8B JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x687 SWAP3 SWAP2 SWAP1 PUSH2 0x213B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6B9 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x832 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C9 DUP3 PUSH2 0xC92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x743 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73A SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x799 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7C5 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x812 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x812 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x82E PUSH2 0x827 PUSH2 0xD57 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1103 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x83D DUP5 DUP5 DUP5 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x849 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1272 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85A DUP3 PUSH2 0x1429 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x879 DUP4 PUSH2 0xC92 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C6 SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x93C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x960 SWAP2 SWAP1 PUSH2 0x2237 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x7 DUP1 SLOAD PUSH2 0x975 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9A1 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 SLT PUSH2 0xA9D JUMPI PUSH1 0x8 DUP1 SLOAD PUSH2 0xA1C SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA48 SWAP1 PUSH2 0x2080 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA95 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA6A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA95 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA78 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST PUSH2 0xAA5 PUSH2 0x1466 JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0xAB0 PUSH2 0x44B JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAC2 SWAP3 SWAP2 SWAP1 PUSH2 0x247A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xF8B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAE7 SWAP3 SWAP2 SWAP1 PUSH2 0x213B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x9 PUSH1 0x0 PUSH1 0x6 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB2C SWAP2 SWAP1 PUSH2 0x24F9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xB3F CALLER PUSH1 0x6 SLOAD PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH32 0x882D3B5A729A8BB95CF6C0083C99B42ECD9637123D4425BD7B768877FD8AF8B0 DUP3 PUSH1 0x40 MLOAD PUSH2 0xB71 SWAP2 SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC9E DUP4 PUSH2 0x1429 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD11 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD08 SWAP2 SWAP1 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD6C DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14C1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD7D DUP5 PUSH2 0x1429 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDBF JUMPI PUSH2 0xDBE DUP2 DUP5 DUP7 PUSH2 0x1686 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE50 JUMPI PUSH2 0xE01 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x14C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xED3 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SUB PUSH2 0xFAD JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH2 0x10FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26DC PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x2 DUP6 MLOAD PUSH2 0xFDC SWAP2 SWAP1 PUSH2 0x24F9 JUMP JUMPDEST PUSH2 0xFE6 SWAP2 SWAP1 PUSH2 0x255C JUMP JUMPDEST PUSH1 0x4 PUSH2 0xFF2 SWAP2 SWAP1 PUSH2 0x258D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP3 PUSH2 0x1003 SWAP2 SWAP1 PUSH2 0x24F9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x101C JUMPI PUSH2 0x101B PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x104E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD DUP6 DUP7 MLOAD DUP2 ADD PUSH1 0x20 DUP5 ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x10BD JUMPI PUSH1 0x3 DUP4 ADD SWAP3 POP DUP3 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP3 MSTORE8 PUSH1 0x1 DUP3 ADD SWAP2 POP POP PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x3 DUP10 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x10D7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x10E7 JUMPI PUSH2 0x10F2 JUMP JUMPDEST PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x2 DUP4 SUB MSTORE PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x1 DUP4 SUB MSTORE JUMPDEST POP POP POP POP POP DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1174 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x116B SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1265 SWAP2 SWAP1 PUSH2 0x19D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1423 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x12B6 PUSH2 0xD57 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2624 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1314 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1311 SWAP2 SWAP1 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1398 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1344 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1390 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1387 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x1421 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1418 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x14BD DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x174A JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x14FA JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x162E JUMPI PUSH1 0x0 PUSH2 0x150A DUP5 PUSH2 0xC92 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1575 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1588 JUMPI POP PUSH2 0x1586 DUP2 DUP5 PUSH2 0xB94 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x15CA JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C1 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x162C JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1691 DUP4 DUP4 DUP4 PUSH2 0x1766 JUMP JUMPDEST PUSH2 0x1745 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1706 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16FD SWAP2 SWAP1 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x173C SWAP3 SWAP2 SWAP1 PUSH2 0x26B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1754 DUP4 DUP4 PUSH2 0x1827 JUMP JUMPDEST PUSH2 0x1761 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1272 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x181E JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x17DF JUMPI POP PUSH2 0x17DE DUP5 DUP5 PUSH2 0xB94 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x181D JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1805 DUP4 PUSH2 0xD1A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1899 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1890 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18A7 DUP4 DUP4 PUSH1 0x0 PUSH2 0xD71 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x191B JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1912 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1969 DUP2 PUSH2 0x1934 JUMP JUMPDEST DUP2 EQ PUSH2 0x1974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1986 DUP2 PUSH2 0x1960 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A2 JUMPI PUSH2 0x19A1 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19B0 DUP5 DUP3 DUP6 ADD PUSH2 0x1977 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19CE DUP2 PUSH2 0x19B9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x19E9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19C5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A29 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A0E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A51 DUP3 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x1A5B DUP2 DUP6 PUSH2 0x19FA JUMP JUMPDEST SWAP4 POP PUSH2 0x1A6B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A0B JUMP JUMPDEST PUSH2 0x1A74 DUP2 PUSH2 0x1A35 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A99 DUP2 DUP5 PUSH2 0x1A46 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AB4 DUP2 PUSH2 0x1AA1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AD1 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AED JUMPI PUSH2 0x1AEC PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AFB DUP5 DUP3 DUP6 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B2F DUP3 PUSH2 0x1B04 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B3F DUP2 PUSH2 0x1B24 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B5A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B69 DUP2 PUSH2 0x1B24 JUMP JUMPDEST DUP2 EQ PUSH2 0x1B74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B86 DUP2 PUSH2 0x1B60 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BA3 JUMPI PUSH2 0x1BA2 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BB1 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1BC2 DUP6 DUP3 DUP7 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1BE5 JUMPI PUSH2 0x1BE4 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BF3 DUP7 DUP3 DUP8 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C04 DUP7 DUP3 DUP8 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C15 DUP7 DUP3 DUP8 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C61 DUP3 PUSH2 0x1A35 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1C80 JUMPI PUSH2 0x1C7F PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C93 PUSH2 0x1920 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C9F DUP3 DUP3 PUSH2 0x1C58 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CBF JUMPI PUSH2 0x1CBE PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST PUSH2 0x1CC8 DUP3 PUSH2 0x1A35 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF7 PUSH2 0x1CF2 DUP5 PUSH2 0x1CA4 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D13 JUMPI PUSH2 0x1D12 PUSH2 0x1C24 JUMP JUMPDEST JUMPDEST PUSH2 0x1D1E DUP5 DUP3 DUP6 PUSH2 0x1CD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D3B JUMPI PUSH2 0x1D3A PUSH2 0x1C1F JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D4B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D6A JUMPI PUSH2 0x1D69 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D88 JUMPI PUSH2 0x1D87 PUSH2 0x192F JUMP JUMPDEST JUMPDEST PUSH2 0x1D94 DUP5 DUP3 DUP6 ADD PUSH2 0x1D26 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB3 JUMPI PUSH2 0x1DB2 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DC1 DUP5 DUP3 DUP6 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DD3 DUP2 PUSH2 0x1AA1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1DCA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DFD DUP2 PUSH2 0x19B9 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E1A DUP2 PUSH2 0x1DF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E37 JUMPI PUSH2 0x1E36 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E45 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E56 DUP6 DUP3 DUP7 ADD PUSH2 0x1E0B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E7B JUMPI PUSH2 0x1E7A PUSH2 0x1C29 JUMP JUMPDEST JUMPDEST PUSH2 0x1E84 DUP3 PUSH2 0x1A35 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH2 0x1E9F DUP5 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1EC0 JUMPI PUSH2 0x1EBF PUSH2 0x1C24 JUMP JUMPDEST JUMPDEST PUSH2 0x1ECB DUP5 DUP3 DUP6 PUSH2 0x1CD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1EE8 JUMPI PUSH2 0x1EE7 PUSH2 0x1C1F JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1EF8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1E91 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F1B JUMPI PUSH2 0x1F1A PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F29 DUP8 DUP3 DUP9 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1F3A DUP8 DUP3 DUP9 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1F4B DUP8 DUP3 DUP9 ADD PUSH2 0x1AC2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F6C JUMPI PUSH2 0x1F6B PUSH2 0x192F JUMP JUMPDEST JUMPDEST PUSH2 0x1F78 DUP8 DUP3 DUP9 ADD PUSH2 0x1ED3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F97 DUP2 PUSH2 0x1F84 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FB4 DUP2 PUSH2 0x1F8E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FD0 JUMPI PUSH2 0x1FCF PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FDE DUP5 DUP3 DUP6 ADD PUSH2 0x1FA5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1FF0 DUP2 PUSH2 0x1F84 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x200B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1FE7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2028 JUMPI PUSH2 0x2027 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2036 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2047 DUP6 DUP3 DUP7 ADD PUSH2 0x1B77 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2098 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x20AB JUMPI PUSH2 0x20AA PUSH2 0x2051 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x20C6 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x20D3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1DCA JUMP JUMPDEST PUSH2 0x20E0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20FE DUP3 PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x2108 DUP2 DUP6 PUSH2 0x20E8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2118 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A0B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2130 DUP3 DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2147 DUP3 DUP6 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2153 DUP3 DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x55524920517565727920666F72206E6F6E6578697374656E7420746F6B656E00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2195 PUSH1 0x1F DUP4 PUSH2 0x19FA JUMP JUMPDEST SWAP2 POP PUSH2 0x21A0 DUP3 PUSH2 0x215F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21C4 DUP2 PUSH2 0x2188 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21EA DUP2 PUSH2 0x21CB JUMP JUMPDEST DUP2 EQ PUSH2 0x21F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2207 DUP2 PUSH2 0x21E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x221C DUP2 PUSH2 0x1F8E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2231 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2253 JUMPI PUSH2 0x2252 PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2261 DUP9 DUP3 DUP10 ADD PUSH2 0x21F8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2272 DUP9 DUP3 DUP10 ADD PUSH2 0x220D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2283 DUP9 DUP3 DUP10 ADD PUSH2 0x2222 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x2294 DUP9 DUP3 DUP10 ADD PUSH2 0x2222 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x22A5 DUP9 DUP3 DUP10 ADD PUSH2 0x21F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x207B226E616D65223A2200000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22E8 PUSH1 0xA DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x22F3 DUP3 PUSH2 0x22B2 JUMP JUMPDEST PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x222C20226465736372697074696F6E223A2022416E204E465420746861742063 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x68616E676573206261736564206F6E2074686520436861696E6C696E6B204665 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6564222C00000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2380 PUSH1 0x44 DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x238B DUP3 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x44 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2261747472696275746573223A205B7B2274726169745F74797065223A202263 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6F6C6E657373222C202276616C7565223A203130307D5D2C2022696D616765 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x223A202200000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2418 PUSH1 0x44 DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x2423 DUP3 PUSH2 0x2396 JUMP JUMPDEST PUSH1 0x44 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x227D000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2464 PUSH1 0x2 DUP4 PUSH2 0x20E8 JUMP JUMPDEST SWAP2 POP PUSH2 0x246F DUP3 PUSH2 0x242E JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2485 DUP3 PUSH2 0x22DB JUMP JUMPDEST SWAP2 POP PUSH2 0x2491 DUP3 DUP6 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x249C DUP3 PUSH2 0x2373 JUMP JUMPDEST SWAP2 POP PUSH2 0x24A7 DUP3 PUSH2 0x240B JUMP JUMPDEST SWAP2 POP PUSH2 0x24B3 DUP3 DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP2 POP PUSH2 0x24BE DUP3 PUSH2 0x2457 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2504 DUP3 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x250F DUP4 PUSH2 0x1AA1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2527 JUMPI PUSH2 0x2526 PUSH2 0x24CA JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2567 DUP3 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2572 DUP4 PUSH2 0x1AA1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2582 JUMPI PUSH2 0x2581 PUSH2 0x252D JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2598 DUP3 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x25A3 DUP4 PUSH2 0x1AA1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x25B1 DUP2 PUSH2 0x1AA1 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x25C8 JUMPI PUSH2 0x25C7 PUSH2 0x24CA JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25F6 DUP3 PUSH2 0x25CF JUMP JUMPDEST PUSH2 0x2600 DUP2 DUP6 PUSH2 0x25DA JUMP JUMPDEST SWAP4 POP PUSH2 0x2610 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A0B JUMP JUMPDEST PUSH2 0x2619 DUP2 PUSH2 0x1A35 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2639 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2646 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2653 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1DCA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2665 DUP2 DUP5 PUSH2 0x25EB JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x267F DUP2 PUSH2 0x1960 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x269B JUMPI PUSH2 0x269A PUSH2 0x192A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26A9 DUP5 DUP3 DUP6 ADD PUSH2 0x2670 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x26C7 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x26D4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1DCA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID COINBASE TIMESTAMP NUMBER PREVRANDAO GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2FA2646970667358 0x22 SLT KECCAK256 0xD4 0x2E 0xDC 0x27 EQ CALLCODE JUMP PUSH15 0xF37671B1460F34C2A53BD5DFBBE242 SWAP8 0x4B 0x22 PUSH30 0x4156535BB164736F6C634300081400330000000000000000000000000000 ","sourceMap":"225:2664:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:300:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3497:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3323:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4143:578;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1105:310:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4787:132:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2185:118;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1920:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2518:93;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3718:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4985:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1790:1097:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1421:235;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;632:54;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3928:153:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1561:300;1663:4;1713:25;1698:40;;;:11;:40;;;;:104;;;;1769:33;1754:48;;;:11;:48;;;;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;:::-;1698:156;1679:175;;1561:300;;;:::o;2365:89::-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;;3623:21;3636:7;3623:12;:21::i;:::-;3616:28;;3497:154;;;:::o;3323:113::-;3394:35;3403:2;3407:7;3416:12;:10;:12::i;:::-;3394:8;:35::i;:::-;3323:113;;:::o;4143:578::-;4251:1;4237:16;;:2;:16;;;4233:87;;4306:1;4276:33;;;;;;;;;;;:::i;:::-;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;4583:12;:10;:12::i;:::-;4562:7;:34::i;:::-;4538:58;;4627:4;4610:21;;:13;:21;;;4606:109;;4675:4;4681:7;4690:13;4654:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4606:109;4223:498;4143:578;;;:::o;1105:310:13:-;1182:13;1207:30;1240:73;1297:3;1280:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;1240:13;:73::i;:::-;1207:106;;1366:22;;;;;;;;;;;;;;;;;1390:16;1349:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1323:85;;;1105:310;;;:::o;4787:132:2:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;2185:118::-;2248:7;2274:22;2288:7;2274:13;:22::i;:::-;2267:29;;2185:118;;;:::o;1920:208::-;1983:7;2023:1;2006:19;;:5;:19;;;2002:87;;2075:1;2048:30;;;;;;;;;;;:::i;:::-;;;;;;;;2002:87;2105:9;:16;2115:5;2105:16;;;;;;;;;;;;;;;;2098:23;;1920:208;;;:::o;2518:93::-;2565:13;2597:7;2590:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2518:93;:::o;3718:144::-;3803:52;3822:12;:10;:12::i;:::-;3836:8;3846;3803:18;:52::i;:::-;3718:144;;:::o;4985:208::-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;:::-;4985:208;;;;:::o;1790:1097:13:-;1869:13;1941:17;1950:7;1941:8;:17::i;:::-;1915:43;;:22;1929:7;1915:13;:22::i;:::-;:43;;;1894:121;;;;;;;;;;;;:::i;:::-;;;;;;;;;2029:12;2051:11;:27;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2026:54;;;;;;2090:22;2115:13;2090:38;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2152:20;:29;2173:7;2152:29;;;;;;;;;;;;2143:5;:38;2139:94;;2208:14;2197:25;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2139:94;2363:10;:8;:10::i;:::-;2395:453;2522:6;:4;:6::i;:::-;2758:8;2434:392;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2395:13;:453::i;:::-;2325:541;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2282:598;;;;1790:1097;;;:::o;1421:235::-;1512:9;1473:20;:36;1494:14;;1473:36;;;;;;;;;;;:48;;;;1549:1;1531:14;;:19;;;;;;;:::i;:::-;;;;;;;;1560:37;1570:10;1582:14;;1560:9;:37::i;:::-;1623:14;;1612:37;1639:9;1612:37;;;;;;:::i;:::-;;;;;;;;1421:235;:::o;632:54::-;;;;;;;;;;;;;;;;;:::o;3928:153:2:-;4016:4;4039:18;:25;4058:5;4039:25;;;;;;;;;;;;;;;:35;4065:8;4039:35;;;;;;;;;;;;;;;;;;;;;;;;;4032:42;;3928:153;;;;:::o;762:146:8:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;16138:241:2:-;16201:7;16220:13;16236:17;16245:7;16236:8;:17::i;:::-;16220:33;;16284:1;16267:19;;:5;:19;;;16263:88;;16332:7;16309:31;;;;;;;;;;;:::i;:::-;;;;;;;;16263:88;16367:5;16360:12;;;16138:241;;;:::o;5938:127::-;6008:7;6034:15;:24;6050:7;6034:24;;;;;;;;;;;;;;;;;;;;;6027:31;;5938:127;;;:::o;656:96:6:-;709:7;735:10;728:17;;656:96;:::o;14418:120:2:-;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;:::-;14418:120;;;:::o;8838:795::-;8924:7;8943:12;8958:17;8967:7;8958:8;:17::i;:::-;8943:32;;9051:1;9035:18;;:4;:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;9031:86;9177:1;9161:18;;:4;:18;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;9387:1;9368:9;:15;9378:4;9368:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9157:256;9441:1;9427:16;;:2;:16;;;9423:107;;9504:1;9487:9;:13;9497:2;9487:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9423:107;9559:2;9540:7;:16;9548:7;9540:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9596:7;9592:2;9577:27;;9586:4;9577:27;;;;;;;;;;;;9622:4;9615:11;;;8838:795;;;;;:::o;777:1861:12:-;835:13;879:1;864:4;:11;:16;860:31;;882:9;;;;;;;;;;;;;;;;860:31;940:19;962:12;;;;;;;;;;;;;;;;;940:34;;1023:18;1069:1;1064;1050:4;:11;:15;;;;:::i;:::-;1049:21;;;;:::i;:::-;1044:1;:27;;;;:::i;:::-;1023:48;;1151:20;1198:2;1185:10;:15;;;;:::i;:::-;1174:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1151:50;;1294:10;1286:6;1279:26;1386:1;1379:5;1375:13;1442:4;1492;1486:11;1477:7;1473:25;1585:2;1577:6;1573:15;1655:739;1674:6;1665:7;1662:19;1655:739;;;1771:1;1762:7;1758:15;1747:26;;1809:7;1803:14;1932:4;1924:5;1920:2;1916:14;1912:25;1902:8;1898:40;1892:47;1881:9;1873:67;1985:1;1974:9;1970:17;1957:30;;2063:4;2055:5;2051:2;2047:14;2043:25;2033:8;2029:40;2023:47;2012:9;2004:67;2116:1;2105:9;2101:17;2088:30;;2194:4;2186:5;2183:1;2178:14;2174:25;2164:8;2160:40;2154:47;2143:9;2135:67;2247:1;2236:9;2232:17;2219:30;;2325:4;2317:5;2305:25;2295:8;2291:40;2285:47;2274:9;2266:67;2378:1;2367:9;2363:17;2350:30;;1697:697;1655:739;;;2464:1;2457:4;2451:11;2447:19;2484:1;2479:54;;;;2551:1;2546:52;;;;2440:158;;2479:54;2523:6;2518:3;2514:16;2510:1;2499:9;2495:17;2488:43;2479:54;;2546:52;2590:4;2585:3;2581:14;2577:1;2566:9;2562:17;2555:41;2440:158;;1221:1387;;;;2625:6;2618:13;;;;;777:1861;;;;:::o;15591:312:2:-;15718:1;15698:22;;:8;:22;;;15694:91;;15765:8;15743:31;;;;;;;;;;;:::i;:::-;;;;;;;;15694:91;15832:8;15794:18;:25;15813:5;15794:25;;;;;;;;;;;;;;;:35;15820:8;15794:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15877:8;15855:41;;15870:5;15855:41;;;15887:8;15855:41;;;;;;:::i;:::-;;;;;;;;15591:312;;;:::o;16918:782::-;17051:1;17034:2;:14;;;:18;17030:664;;;17088:2;17072:36;;;17109:12;:10;:12::i;:::-;17123:4;17129:7;17138:4;17072:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17398:1;17381:6;:13;:18;17377:293;;17452:2;17430:25;;;;;;;;;;;:::i;:::-;;;;;;;;17377:293;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;17200:41;;;17190:51;;;:6;:51;;;;17186:130;;17294:2;17272:25;;;;;;;;;;;:::i;:::-;;;;;;;;17186:130;17144:186;17030:664;16918:782;;;;:::o;5707:115::-;5773:7;5799;:16;5807:7;5799:16;;;;;;;;;;;;;;;;;;;;;5792:23;;5707:115;;;:::o;1662:122:13:-;1714:13;1739:38;;;;;;;;;;;;;;;;;;;1662:122;:::o;10633:100:2:-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;:::-;10633:100;;:::o;14720:662::-;14880:9;:31;;;;14909:1;14893:18;;:4;:18;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;;15109:1;15093:18;;:4;:18;;;;:35;;;;;15124:4;15115:13;;:5;:13;;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15211:4;15189:27;;;;;;;;;;;:::i;:::-;;;;;;;;15089:142;15249:9;15245:81;;;15303:7;15299:2;15283:28;;15292:5;15283:28;;;;;;;;;;;;15245:81;14913:423;14876:460;15373:2;15346:15;:24;15362:7;15346:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14720:662;;;;:::o;7082:368::-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;7269:1;7252:19;;:5;:19;;;7248:186;;7321:7;7298:31;;;;;;;;;;;:::i;:::-;;;;;;;;7248:186;7402:7;7411;7375:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7189:255;7082:368;;;:::o;10954:182::-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;:::-;10954:182;;;:::o;6376:272::-;6479:4;6533:1;6514:21;;:7;:21;;;;:127;;;;;6561:7;6552:16;;:5;:16;;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:52;:88;;;;6633:7;6608:32;;:21;6621:7;6608:12;:21::i;:::-;:32;;;6552:88;6514:127;6495:146;;6376:272;;;;;:::o;9955:327::-;10036:1;10022:16;;:2;:16;;;10018:87;;10091:1;10061:33;;;;;;;;;;;:::i;:::-;;;;;;;;10018:87;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;;10209:1;10184:27;;:13;:27;;;10180:96;;10262:1;10234:31;;;;;;;;;;;:::i;:::-;;;;;;;;10180:96;10008:274;9955:327;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:117::-;5624:1;5621;5614:12;5638:117;5747:1;5744;5737:12;5761:180;5809:77;5806:1;5799:88;5906:4;5903:1;5896:15;5930:4;5927:1;5920:15;5947:281;6030:27;6052:4;6030:27;:::i;:::-;6022:6;6018:40;6160:6;6148:10;6145:22;6124:18;6112:10;6109:34;6106:62;6103:88;;;6171:18;;:::i;:::-;6103:88;6211:10;6207:2;6200:22;5990:238;5947:281;;:::o;6234:129::-;6268:6;6295:20;;:::i;:::-;6285:30;;6324:33;6352:4;6344:6;6324:33;:::i;:::-;6234:129;;;:::o;6369:308::-;6431:4;6521:18;6513:6;6510:30;6507:56;;;6543:18;;:::i;:::-;6507:56;6581:29;6603:6;6581:29;:::i;:::-;6573:37;;6665:4;6659;6655:15;6647:23;;6369:308;;;:::o;6683:146::-;6780:6;6775:3;6770;6757:30;6821:1;6812:6;6807:3;6803:16;6796:27;6683:146;;;:::o;6835:425::-;6913:5;6938:66;6954:49;6996:6;6954:49;:::i;:::-;6938:66;:::i;:::-;6929:75;;7027:6;7020:5;7013:21;7065:4;7058:5;7054:16;7103:3;7094:6;7089:3;7085:16;7082:25;7079:112;;;7110:79;;:::i;:::-;7079:112;7200:54;7247:6;7242:3;7237;7200:54;:::i;:::-;6919:341;6835:425;;;;;:::o;7280:340::-;7336:5;7385:3;7378:4;7370:6;7366:17;7362:27;7352:122;;7393:79;;:::i;:::-;7352:122;7510:6;7497:20;7535:79;7610:3;7602:6;7595:4;7587:6;7583:17;7535:79;:::i;:::-;7526:88;;7342:278;7280:340;;;;:::o;7626:509::-;7695:6;7744:2;7732:9;7723:7;7719:23;7715:32;7712:119;;;7750:79;;:::i;:::-;7712:119;7898:1;7887:9;7883:17;7870:31;7928:18;7920:6;7917:30;7914:117;;;7950:79;;:::i;:::-;7914:117;8055:63;8110:7;8101:6;8090:9;8086:22;8055:63;:::i;:::-;8045:73;;7841:287;7626:509;;;;:::o;8141:329::-;8200:6;8249:2;8237:9;8228:7;8224:23;8220:32;8217:119;;;8255:79;;:::i;:::-;8217:119;8375:1;8400:53;8445:7;8436:6;8425:9;8421:22;8400:53;:::i;:::-;8390:63;;8346:117;8141:329;;;;:::o;8476:118::-;8563:24;8581:5;8563:24;:::i;:::-;8558:3;8551:37;8476:118;;:::o;8600:222::-;8693:4;8731:2;8720:9;8716:18;8708:26;;8744:71;8812:1;8801:9;8797:17;8788:6;8744:71;:::i;:::-;8600:222;;;;:::o;8828:116::-;8898:21;8913:5;8898:21;:::i;:::-;8891:5;8888:32;8878:60;;8934:1;8931;8924:12;8878:60;8828:116;:::o;8950:133::-;8993:5;9031:6;9018:20;9009:29;;9047:30;9071:5;9047:30;:::i;:::-;8950:133;;;;:::o;9089:468::-;9154:6;9162;9211:2;9199:9;9190:7;9186:23;9182:32;9179:119;;;9217:79;;:::i;:::-;9179:119;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:50;9532:7;9523:6;9512:9;9508:22;9490:50;:::i;:::-;9480:60;;9435:115;9089:468;;;;;:::o;9563:307::-;9624:4;9714:18;9706:6;9703:30;9700:56;;;9736:18;;:::i;:::-;9700:56;9774:29;9796:6;9774:29;:::i;:::-;9766:37;;9858:4;9852;9848:15;9840:23;;9563:307;;;:::o;9876:423::-;9953:5;9978:65;9994:48;10035:6;9994:48;:::i;:::-;9978:65;:::i;:::-;9969:74;;10066:6;10059:5;10052:21;10104:4;10097:5;10093:16;10142:3;10133:6;10128:3;10124:16;10121:25;10118:112;;;10149:79;;:::i;:::-;10118:112;10239:54;10286:6;10281:3;10276;10239:54;:::i;:::-;9959:340;9876:423;;;;;:::o;10318:338::-;10373:5;10422:3;10415:4;10407:6;10403:17;10399:27;10389:122;;10430:79;;:::i;:::-;10389:122;10547:6;10534:20;10572:78;10646:3;10638:6;10631:4;10623:6;10619:17;10572:78;:::i;:::-;10563:87;;10379:277;10318:338;;;;:::o;10662:943::-;10757:6;10765;10773;10781;10830:3;10818:9;10809:7;10805:23;10801:33;10798:120;;;10837:79;;:::i;:::-;10798:120;10957:1;10982:53;11027:7;11018:6;11007:9;11003:22;10982:53;:::i;:::-;10972:63;;10928:117;11084:2;11110:53;11155:7;11146:6;11135:9;11131:22;11110:53;:::i;:::-;11100:63;;11055:118;11212:2;11238:53;11283:7;11274:6;11263:9;11259:22;11238:53;:::i;:::-;11228:63;;11183:118;11368:2;11357:9;11353:18;11340:32;11399:18;11391:6;11388:30;11385:117;;;11421:79;;:::i;:::-;11385:117;11526:62;11580:7;11571:6;11560:9;11556:22;11526:62;:::i;:::-;11516:72;;11311:287;10662:943;;;;;;;:::o;11611:76::-;11647:7;11676:5;11665:16;;11611:76;;;:::o;11693:120::-;11765:23;11782:5;11765:23;:::i;:::-;11758:5;11755:34;11745:62;;11803:1;11800;11793:12;11745:62;11693:120;:::o;11819:137::-;11864:5;11902:6;11889:20;11880:29;;11918:32;11944:5;11918:32;:::i;:::-;11819:137;;;;:::o;11962:327::-;12020:6;12069:2;12057:9;12048:7;12044:23;12040:32;12037:119;;;12075:79;;:::i;:::-;12037:119;12195:1;12220:52;12264:7;12255:6;12244:9;12240:22;12220:52;:::i;:::-;12210:62;;12166:116;11962:327;;;;:::o;12295:115::-;12380:23;12397:5;12380:23;:::i;:::-;12375:3;12368:36;12295:115;;:::o;12416:218::-;12507:4;12545:2;12534:9;12530:18;12522:26;;12558:69;12624:1;12613:9;12609:17;12600:6;12558:69;:::i;:::-;12416:218;;;;:::o;12640:474::-;12708:6;12716;12765:2;12753:9;12744:7;12740:23;12736:32;12733:119;;;12771:79;;:::i;:::-;12733:119;12891:1;12916:53;12961:7;12952:6;12941:9;12937:22;12916:53;:::i;:::-;12906:63;;12862:117;13018:2;13044:53;13089:7;13080:6;13069:9;13065:22;13044:53;:::i;:::-;13034:63;;12989:118;12640:474;;;;;:::o;13120:180::-;13168:77;13165:1;13158:88;13265:4;13262:1;13255:15;13289:4;13286:1;13279:15;13306:320;13350:6;13387:1;13381:4;13377:12;13367:22;;13434:1;13428:4;13424:12;13455:18;13445:81;;13511:4;13503:6;13499:17;13489:27;;13445:81;13573:2;13565:6;13562:14;13542:18;13539:38;13536:84;;13592:18;;:::i;:::-;13536:84;13357:269;13306:320;;;:::o;13632:442::-;13781:4;13819:2;13808:9;13804:18;13796:26;;13832:71;13900:1;13889:9;13885:17;13876:6;13832:71;:::i;:::-;13913:72;13981:2;13970:9;13966:18;13957:6;13913:72;:::i;:::-;13995;14063:2;14052:9;14048:18;14039:6;13995:72;:::i;:::-;13632:442;;;;;;:::o;14080:148::-;14182:11;14219:3;14204:18;;14080:148;;;;:::o;14234:390::-;14340:3;14368:39;14401:5;14368:39;:::i;:::-;14423:89;14505:6;14500:3;14423:89;:::i;:::-;14416:96;;14521:65;14579:6;14574:3;14567:4;14560:5;14556:16;14521:65;:::i;:::-;14611:6;14606:3;14602:16;14595:23;;14344:280;14234:390;;;;:::o;14630:275::-;14762:3;14784:95;14875:3;14866:6;14784:95;:::i;:::-;14777:102;;14896:3;14889:10;;14630:275;;;;:::o;14911:435::-;15091:3;15113:95;15204:3;15195:6;15113:95;:::i;:::-;15106:102;;15225:95;15316:3;15307:6;15225:95;:::i;:::-;15218:102;;15337:3;15330:10;;14911:435;;;;;:::o;15352:181::-;15492:33;15488:1;15480:6;15476:14;15469:57;15352:181;:::o;15539:366::-;15681:3;15702:67;15766:2;15761:3;15702:67;:::i;:::-;15695:74;;15778:93;15867:3;15778:93;:::i;:::-;15896:2;15891:3;15887:12;15880:19;;15539:366;;;:::o;15911:419::-;16077:4;16115:2;16104:9;16100:18;16092:26;;16164:9;16158:4;16154:20;16150:1;16139:9;16135:17;16128:47;16192:131;16318:4;16192:131;:::i;:::-;16184:139;;15911:419;;;:::o;16336:105::-;16372:7;16412:22;16405:5;16401:34;16390:45;;16336:105;;;:::o;16447:120::-;16519:23;16536:5;16519:23;:::i;:::-;16512:5;16509:34;16499:62;;16557:1;16554;16547:12;16499:62;16447:120;:::o;16573:141::-;16629:5;16660:6;16654:13;16645:22;;16676:32;16702:5;16676:32;:::i;:::-;16573:141;;;;:::o;16720:::-;16776:5;16807:6;16801:13;16792:22;;16823:32;16849:5;16823:32;:::i;:::-;16720:141;;;;:::o;16867:143::-;16924:5;16955:6;16949:13;16940:22;;16971:33;16998:5;16971:33;:::i;:::-;16867:143;;;;:::o;17016:971::-;17119:6;17127;17135;17143;17151;17200:3;17188:9;17179:7;17175:23;17171:33;17168:120;;;17207:79;;:::i;:::-;17168:120;17327:1;17352:63;17407:7;17398:6;17387:9;17383:22;17352:63;:::i;:::-;17342:73;;17298:127;17464:2;17490:63;17545:7;17536:6;17525:9;17521:22;17490:63;:::i;:::-;17480:73;;17435:128;17602:2;17628:64;17684:7;17675:6;17664:9;17660:22;17628:64;:::i;:::-;17618:74;;17573:129;17741:2;17767:64;17823:7;17814:6;17803:9;17799:22;17767:64;:::i;:::-;17757:74;;17712:129;17880:3;17907:63;17962:7;17953:6;17942:9;17938:22;17907:63;:::i;:::-;17897:73;;17851:129;17016:971;;;;;;;;:::o;17993:214::-;18133:66;18129:1;18121:6;18117:14;18110:90;17993:214;:::o;18213:402::-;18373:3;18394:85;18476:2;18471:3;18394:85;:::i;:::-;18387:92;;18488:93;18577:3;18488:93;:::i;:::-;18606:2;18601:3;18597:12;18590:19;;18213:402;;;:::o;18621:384::-;18761:66;18757:1;18749:6;18745:14;18738:90;18862:34;18857:2;18849:6;18845:15;18838:59;18931:66;18926:2;18918:6;18914:15;18907:91;18621:384;:::o;19011:402::-;19171:3;19192:85;19274:2;19269:3;19192:85;:::i;:::-;19185:92;;19286:93;19375:3;19286:93;:::i;:::-;19404:2;19399:3;19395:12;19388:19;;19011:402;;;:::o;19419:416::-;19559:66;19555:1;19547:6;19543:14;19536:90;19660:66;19655:2;19647:6;19643:15;19636:91;19761:66;19756:2;19748:6;19744:15;19737:91;19419:416;:::o;19841:402::-;20001:3;20022:85;20104:2;20099:3;20022:85;:::i;:::-;20015:92;;20116:93;20205:3;20116:93;:::i;:::-;20234:2;20229:3;20225:12;20218:19;;19841:402;;;:::o;20249:214::-;20389:66;20385:1;20377:6;20373:14;20366:90;20249:214;:::o;20469:400::-;20629:3;20650:84;20732:1;20727:3;20650:84;:::i;:::-;20643:91;;20743:93;20832:3;20743:93;:::i;:::-;20861:1;20856:3;20852:11;20845:18;;20469:400;;;:::o;20875:1499::-;21459:3;21481:148;21625:3;21481:148;:::i;:::-;21474:155;;21646:95;21737:3;21728:6;21646:95;:::i;:::-;21639:102;;21758:148;21902:3;21758:148;:::i;:::-;21751:155;;21923:148;22067:3;21923:148;:::i;:::-;21916:155;;22088:95;22179:3;22170:6;22088:95;:::i;:::-;22081:102;;22200:148;22344:3;22200:148;:::i;:::-;22193:155;;22365:3;22358:10;;20875:1499;;;;;:::o;22380:180::-;22428:77;22425:1;22418:88;22525:4;22522:1;22515:15;22549:4;22546:1;22539:15;22566:191;22606:3;22625:20;22643:1;22625:20;:::i;:::-;22620:25;;22659:20;22677:1;22659:20;:::i;:::-;22654:25;;22702:1;22699;22695:9;22688:16;;22723:3;22720:1;22717:10;22714:36;;;22730:18;;:::i;:::-;22714:36;22566:191;;;;:::o;22763:180::-;22811:77;22808:1;22801:88;22908:4;22905:1;22898:15;22932:4;22929:1;22922:15;22949:185;22989:1;23006:20;23024:1;23006:20;:::i;:::-;23001:25;;23040:20;23058:1;23040:20;:::i;:::-;23035:25;;23079:1;23069:35;;23084:18;;:::i;:::-;23069:35;23126:1;23123;23119:9;23114:14;;22949:185;;;;:::o;23140:410::-;23180:7;23203:20;23221:1;23203:20;:::i;:::-;23198:25;;23237:20;23255:1;23237:20;:::i;:::-;23232:25;;23292:1;23289;23285:9;23314:30;23332:11;23314:30;:::i;:::-;23303:41;;23493:1;23484:7;23480:15;23477:1;23474:22;23454:1;23447:9;23427:83;23404:139;;23523:18;;:::i;:::-;23404:139;23188:362;23140:410;;;;:::o;23556:98::-;23607:6;23641:5;23635:12;23625:22;;23556:98;;;:::o;23660:168::-;23743:11;23777:6;23772:3;23765:19;23817:4;23812:3;23808:14;23793:29;;23660:168;;;;:::o;23834:373::-;23920:3;23948:38;23980:5;23948:38;:::i;:::-;24002:70;24065:6;24060:3;24002:70;:::i;:::-;23995:77;;24081:65;24139:6;24134:3;24127:4;24120:5;24116:16;24081:65;:::i;:::-;24171:29;24193:6;24171:29;:::i;:::-;24166:3;24162:39;24155:46;;23924:283;23834:373;;;;:::o;24213:640::-;24408:4;24446:3;24435:9;24431:19;24423:27;;24460:71;24528:1;24517:9;24513:17;24504:6;24460:71;:::i;:::-;24541:72;24609:2;24598:9;24594:18;24585:6;24541:72;:::i;:::-;24623;24691:2;24680:9;24676:18;24667:6;24623:72;:::i;:::-;24742:9;24736:4;24732:20;24727:2;24716:9;24712:18;24705:48;24770:76;24841:4;24832:6;24770:76;:::i;:::-;24762:84;;24213:640;;;;;;;:::o;24859:141::-;24915:5;24946:6;24940:13;24931:22;;24962:32;24988:5;24962:32;:::i;:::-;24859:141;;;;:::o;25006:349::-;25075:6;25124:2;25112:9;25103:7;25099:23;25095:32;25092:119;;;25130:79;;:::i;:::-;25092:119;25250:1;25275:63;25330:7;25321:6;25310:9;25306:22;25275:63;:::i;:::-;25265:73;;25221:127;25006:349;;;;:::o;25361:332::-;25482:4;25520:2;25509:9;25505:18;25497:26;;25533:71;25601:1;25590:9;25586:17;25577:6;25533:71;:::i;:::-;25614:72;25682:2;25671:9;25667:18;25658:6;25614:72;:::i;:::-;25361:332;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2013000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"infinite","getApproved(uint256)":"infinite","isApprovedForAll(address,address)":"infinite","mintNFT(int256)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","s_tokenIdToHighValue(uint256)":"2831","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"797","svgToImageURI(string)":"infinite","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_baseURI()":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","mintNFT(int256)":"e2ed50cb","name()":"06fdde03","ownerOf(uint256)":"6352211e","s_tokenIdToHighValue(uint256)":"e425aded","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","svgToImageURI(string)":"30d871c6","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lowSvg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"highSvg\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"highValue\",\"type\":\"int256\"}],\"name\":\"CreatedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"highValue\",\"type\":\"int256\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_tokenIdToHighValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DynamicSVGNFT.sol\":\"DynamicSVGNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/DynamicSVGNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\ncontract DynamicSVGNFT is ERC721 {\\n    // mint\\n    // store our SVG information someehere\\n    // some logic to say \\\"Show X image\\\" or \\\"Show Y image\\\"\\n\\n    uint256 private s_tokenCounter;\\n    string private i_lowImageURI;\\n    string private i_highImageURI;\\n    string private constant base64EncodedSvgPrefix =\\n        \\\"data:image/svg+xml;base64,\\\";\\n    AggregatorV3Interface internal immutable i_priceFeed;\\n    mapping(uint256 => int256) public s_tokenIdToHighValue;\\n\\n    event CreatedNFT(uint256 indexed tokenId, int256 highValue);\\n\\n    constructor(\\n        address priceFeedAddress,\\n        string memory lowSvg,\\n        string memory highSvg\\n    ) ERC721(\\\"Dynamic SVG NFT\\\", \\\"DSN\\\") {\\n        s_tokenCounter = 0;\\n        i_lowImageURI = svgToImageURI(lowSvg);\\n        i_highImageURI = svgToImageURI(highSvg);\\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function svgToImageURI(\\n        string memory svg\\n    ) public pure returns (string memory) {\\n        string memory svgBase64Encoded = Base64.encode(\\n            bytes(string(abi.encodePacked(svg)))\\n        );\\n        return\\n            string(abi.encodePacked(base64EncodedSvgPrefix, svgBase64Encoded));\\n    }\\n\\n    function mintNFT(int256 highValue) public {\\n        s_tokenIdToHighValue[s_tokenCounter] = highValue;\\n        s_tokenCounter += 1;\\n        _safeMint(msg.sender, s_tokenCounter);\\n        emit CreatedNFT(s_tokenCounter, highValue);\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        require(\\n            _requireOwned(tokenId) == _ownerOf(tokenId),\\n            \\\"URI Query for nonexistent token\\\"\\n        );\\n\\n        (, int256 price, , , ) = i_priceFeed.latestRoundData();\\n        string memory imageURI = i_lowImageURI;\\n\\n        if (price >= s_tokenIdToHighValue[tokenId]) {\\n            imageURI = i_highImageURI;\\n        }\\n\\n        // data:image/svg+xml;base64,\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _baseURI(),\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            ' {\\\"name\\\":\\\"',\\n                            name(),\\n                            '\\\", \\\"description\\\": \\\"An NFT that changes based on the Chainlink Feed\\\",',\\n                            '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"coolness\\\", \\\"value\\\": 100}], \\\"image\\\": \\\"',\\n                            imageURI,\\n                            '\\\"}'\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x14d51e32133fb4ff0dd8d56a8f8b695a40ec1e1577533a560cfc8b290b5479a2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":215,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":217,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":221,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":225,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":229,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":235,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2950,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"s_tokenCounter","offset":0,"slot":"6","type":"t_uint256"},{"astId":2952,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"i_lowImageURI","offset":0,"slot":"7","type":"t_string_storage"},{"astId":2954,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"i_highImageURI","offset":0,"slot":"8","type":"t_string_storage"},{"astId":2964,"contract":"contracts/DynamicSVGNFT.sol:DynamicSVGNFT","label":"s_tokenIdToHighValue","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_int256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_int256":{"encoding":"inplace","label":"int256","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_int256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => int256)","numberOfBytes":"32","value":"t_int256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}